
Praktikum03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a2  00802000  00002cba  00002d4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031c  008020a2  008020a2  00002df0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002df0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002e4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f6bc  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004ea1  00000000  00000000  000129c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008638  00000000  00000000  00017865  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001674  00000000  00000000  0001fea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000338f3  00000000  00000000  00021514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007745  00000000  00000000  00054e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0005c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c204  00000000  00000000  0005cad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_14>
      3c:	0c 94 d4 08 	jmp	0x11a8	; 0x11a8 <__vector_15>
      40:	0c 94 01 09 	jmp	0x1202	; 0x1202 <__vector_16>
      44:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_17>
      48:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__vector_18>
      4c:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_19>
      50:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__vector_20>
      54:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <__vector_21>
      58:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__vector_22>
      5c:	0c 94 3c 0a 	jmp	0x1478	; 0x1478 <__vector_23>
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 2b 0c 	jmp	0x1856	; 0x1856 <__vector_47>
      c0:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_48>
      c4:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_49>
      c8:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__vector_50>
      cc:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__vector_51>
      d0:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__vector_52>
      d4:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_53>
      d8:	0c 94 66 0d 	jmp	0x1acc	; 0x1acc <__vector_54>
      dc:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__vector_55>
      e0:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_77>
     138:	0c 94 96 0a 	jmp	0x152c	; 0x152c <__vector_78>
     13c:	0c 94 c3 0a 	jmp	0x1586	; 0x1586 <__vector_79>
     140:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__vector_80>
     144:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_81>
     148:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_82>
     14c:	0c 94 77 0b 	jmp	0x16ee	; 0x16ee <__vector_83>
     150:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_84>
     154:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_85>
     158:	0c 94 fe 0b 	jmp	0x17fc	; 0x17fc <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_108>
     1b4:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__vector_109>
     1b8:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__vector_110>
     1bc:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__vector_111>
     1c0:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__vector_112>
     1c4:	0c 94 ce 0e 	jmp	0x1d9c	; 0x1d9c <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1ce2>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7bf0f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x64ca>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x64a2>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x54ca>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1ca2>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ea eb       	ldi	r30, 0xBA	; 186
     4a6:	fc e2       	ldi	r31, 0x2C	; 44
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a2 3a       	cpi	r26, 0xA2	; 162
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	a2 ea       	ldi	r26, 0xA2	; 162
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	ae 3b       	cpi	r26, 0xBE	; 190
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 26 11 	call	0x224c	; 0x224c <main>
     4cc:	0c 94 5b 16 	jmp	0x2cb6	; 0x2cb6 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	d4 d4       	rcall	.+2472   	; 0xede <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     536:	c1 2c       	mov	r12, r1
     538:	d1 2c       	mov	r13, r1
     53a:	76 01       	movw	r14, r12
     53c:	00 e4       	ldi	r16, 0x40	; 64
     53e:	12 e4       	ldi	r17, 0x42	; 66
     540:	2f e0       	ldi	r18, 0x0F	; 15
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	43 e0       	ldi	r20, 0x03	; 3
     546:	be 01       	movw	r22, r28
     548:	6f 5f       	subi	r22, 0xFF	; 255
     54a:	7f 4f       	sbci	r23, 0xFF	; 255
     54c:	80 ea       	ldi	r24, 0xA0	; 160
     54e:	99 e0       	ldi	r25, 0x09	; 9
     550:	f5 d4       	rcall	.+2538   	; 0xf3c <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     552:	00 e6       	ldi	r16, 0x60	; 96
     554:	16 e0       	ldi	r17, 0x06	; 6
     556:	ff 24       	eor	r15, r15
     558:	f3 94       	inc	r15
     55a:	f8 01       	movw	r30, r16
     55c:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     55e:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     560:	be 01       	movw	r22, r28
     562:	6f 5f       	subi	r22, 0xFF	; 255
     564:	7f 4f       	sbci	r23, 0xFF	; 255
     566:	80 ea       	ldi	r24, 0xA0	; 160
     568:	99 e0       	ldi	r25, 0x09	; 9
     56a:	02 d5       	rcall	.+2564   	; 0xf70 <usart_spi_select_device>
     56c:	f8 01       	movw	r30, r16
     56e:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     570:	e0 ea       	ldi	r30, 0xA0	; 160
     572:	f9 e0       	ldi	r31, 0x09	; 9
     574:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     576:	85 ff       	sbrs	r24, 5
     578:	fd cf       	rjmp	.-6      	; 0x574 <st7565r_init+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     57a:	80 ea       	ldi	r24, 0xA0	; 160
     57c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <st7565r_init+0x9c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     592:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     594:	be 01       	movw	r22, r28
     596:	6f 5f       	subi	r22, 0xFF	; 255
     598:	7f 4f       	sbci	r23, 0xFF	; 255
     59a:	80 ea       	ldi	r24, 0xA0	; 160
     59c:	99 e0       	ldi	r25, 0x09	; 9
     59e:	fe d4       	rcall	.+2556   	; 0xf9c <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a0:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5a2:	89 83       	std	Y+1, r24	; 0x01
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5f       	subi	r22, 0xFF	; 255
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	80 ea       	ldi	r24, 0xA0	; 160
     5ac:	99 e0       	ldi	r25, 0x09	; 9
     5ae:	e0 d4       	rcall	.+2496   	; 0xf70 <usart_spi_select_device>
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5b6:	e0 ea       	ldi	r30, 0xA0	; 160
     5b8:	f9 e0       	ldi	r31, 0x09	; 9
     5ba:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5bc:	85 ff       	sbrs	r24, 5
     5be:	fd cf       	rjmp	.-6      	; 0x5ba <st7565r_init+0xd2>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5c0:	86 ea       	ldi	r24, 0xA6	; 166
     5c2:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5c6:	e0 ea       	ldi	r30, 0xA0	; 160
     5c8:	f9 e0       	ldi	r31, 0x09	; 9
     5ca:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5cc:	86 ff       	sbrs	r24, 6
     5ce:	fd cf       	rjmp	.-6      	; 0x5ca <st7565r_init+0xe2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5d6:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5d8:	80 81       	ld	r24, Z
     5da:	be 01       	movw	r22, r28
     5dc:	6f 5f       	subi	r22, 0xFF	; 255
     5de:	7f 4f       	sbci	r23, 0xFF	; 255
     5e0:	80 ea       	ldi	r24, 0xA0	; 160
     5e2:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5e4:	db d4       	rcall	.+2486   	; 0xf9c <usart_spi_deselect_device>
     5e6:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5e8:	89 83       	std	Y+1, r24	; 0x01
     5ea:	be 01       	movw	r22, r28
     5ec:	6f 5f       	subi	r22, 0xFF	; 255
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	99 e0       	ldi	r25, 0x09	; 9
     5f4:	bd d4       	rcall	.+2426   	; 0xf70 <usart_spi_select_device>
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5fc:	e0 ea       	ldi	r30, 0xA0	; 160
     5fe:	f9 e0       	ldi	r31, 0x09	; 9
     600:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     602:	85 ff       	sbrs	r24, 5
     604:	fd cf       	rjmp	.-6      	; 0x600 <st7565r_init+0x118>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     606:	88 ec       	ldi	r24, 0xC8	; 200
     608:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     60c:	e0 ea       	ldi	r30, 0xA0	; 160
     60e:	f9 e0       	ldi	r31, 0x09	; 9
     610:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     612:	86 ff       	sbrs	r24, 6
     614:	fd cf       	rjmp	.-6      	; 0x610 <st7565r_init+0x128>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     616:	e0 ea       	ldi	r30, 0xA0	; 160
     618:	f9 e0       	ldi	r31, 0x09	; 9
     61a:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     61c:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     61e:	80 81       	ld	r24, Z
     620:	be 01       	movw	r22, r28
     622:	6f 5f       	subi	r22, 0xFF	; 255
     624:	7f 4f       	sbci	r23, 0xFF	; 255
     626:	80 ea       	ldi	r24, 0xA0	; 160
     628:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     62a:	b8 d4       	rcall	.+2416   	; 0xf9c <usart_spi_deselect_device>
     62c:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     62e:	89 83       	std	Y+1, r24	; 0x01
     630:	be 01       	movw	r22, r28
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	80 ea       	ldi	r24, 0xA0	; 160
     638:	99 e0       	ldi	r25, 0x09	; 9
     63a:	9a d4       	rcall	.+2356   	; 0xf70 <usart_spi_select_device>
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     642:	e0 ea       	ldi	r30, 0xA0	; 160
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     648:	85 ff       	sbrs	r24, 5
     64a:	fd cf       	rjmp	.-6      	; 0x646 <st7565r_init+0x15e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     64c:	82 ea       	ldi	r24, 0xA2	; 162
     64e:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     652:	e0 ea       	ldi	r30, 0xA0	; 160
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     658:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     65a:	fd cf       	rjmp	.-6      	; 0x656 <st7565r_init+0x16e>
     65c:	e0 ea       	ldi	r30, 0xA0	; 160
     65e:	f9 e0       	ldi	r31, 0x09	; 9
     660:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     662:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     664:	80 81       	ld	r24, Z
     666:	be 01       	movw	r22, r28
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	80 ea       	ldi	r24, 0xA0	; 160
     66e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     670:	95 d4       	rcall	.+2346   	; 0xf9c <usart_spi_deselect_device>
     672:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     674:	89 83       	std	Y+1, r24	; 0x01
     676:	be 01       	movw	r22, r28
     678:	6f 5f       	subi	r22, 0xFF	; 255
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	80 ea       	ldi	r24, 0xA0	; 160
     67e:	99 e0       	ldi	r25, 0x09	; 9
     680:	77 d4       	rcall	.+2286   	; 0xf70 <usart_spi_select_device>
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     688:	e0 ea       	ldi	r30, 0xA0	; 160
     68a:	f9 e0       	ldi	r31, 0x09	; 9
     68c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     68e:	85 ff       	sbrs	r24, 5
     690:	fd cf       	rjmp	.-6      	; 0x68c <st7565r_init+0x1a4>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     692:	8f e2       	ldi	r24, 0x2F	; 47
     694:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     698:	e0 ea       	ldi	r30, 0xA0	; 160
     69a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6a0:	fd cf       	rjmp	.-6      	; 0x69c <st7565r_init+0x1b4>
     6a2:	e0 ea       	ldi	r30, 0xA0	; 160
     6a4:	f9 e0       	ldi	r31, 0x09	; 9
     6a6:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6a8:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6aa:	80 81       	ld	r24, Z
     6ac:	be 01       	movw	r22, r28
     6ae:	6f 5f       	subi	r22, 0xFF	; 255
     6b0:	7f 4f       	sbci	r23, 0xFF	; 255
     6b2:	80 ea       	ldi	r24, 0xA0	; 160
     6b4:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6b6:	72 d4       	rcall	.+2276   	; 0xf9c <usart_spi_deselect_device>
     6b8:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6ba:	89 83       	std	Y+1, r24	; 0x01
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5f       	subi	r22, 0xFF	; 255
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
     6c2:	80 ea       	ldi	r24, 0xA0	; 160
     6c4:	99 e0       	ldi	r25, 0x09	; 9
     6c6:	54 d4       	rcall	.+2216   	; 0xf70 <usart_spi_select_device>
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6ce:	e0 ea       	ldi	r30, 0xA0	; 160
     6d0:	f9 e0       	ldi	r31, 0x09	; 9
     6d2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6d4:	85 ff       	sbrs	r24, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <st7565r_init+0x1ea>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6d8:	88 ef       	ldi	r24, 0xF8	; 248
     6da:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6de:	e0 ea       	ldi	r30, 0xA0	; 160
     6e0:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6e2:	81 81       	ldd	r24, Z+1	; 0x01
     6e4:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <st7565r_init+0x1fa>
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6ec:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6ee:	81 83       	std	Z+1, r24	; 0x01
     6f0:	80 81       	ld	r24, Z
     6f2:	be 01       	movw	r22, r28
     6f4:	6f 5f       	subi	r22, 0xFF	; 255
     6f6:	7f 4f       	sbci	r23, 0xFF	; 255
     6f8:	80 ea       	ldi	r24, 0xA0	; 160
     6fa:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6fc:	4f d4       	rcall	.+2206   	; 0xf9c <usart_spi_deselect_device>
     6fe:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     700:	89 83       	std	Y+1, r24	; 0x01
     702:	be 01       	movw	r22, r28
     704:	6f 5f       	subi	r22, 0xFF	; 255
     706:	7f 4f       	sbci	r23, 0xFF	; 255
     708:	80 ea       	ldi	r24, 0xA0	; 160
     70a:	99 e0       	ldi	r25, 0x09	; 9
     70c:	31 d4       	rcall	.+2146   	; 0xf70 <usart_spi_select_device>
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     714:	e0 ea       	ldi	r30, 0xA0	; 160
     716:	f9 e0       	ldi	r31, 0x09	; 9
     718:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     71a:	85 ff       	sbrs	r24, 5
     71c:	fd cf       	rjmp	.-6      	; 0x718 <st7565r_init+0x230>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     71e:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     722:	e0 ea       	ldi	r30, 0xA0	; 160
     724:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     726:	81 81       	ldd	r24, Z+1	; 0x01
     728:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     72a:	fd cf       	rjmp	.-6      	; 0x726 <st7565r_init+0x23e>
     72c:	e0 ea       	ldi	r30, 0xA0	; 160
     72e:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     730:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     732:	81 83       	std	Z+1, r24	; 0x01
     734:	80 81       	ld	r24, Z
     736:	be 01       	movw	r22, r28
     738:	6f 5f       	subi	r22, 0xFF	; 255
     73a:	7f 4f       	sbci	r23, 0xFF	; 255
     73c:	80 ea       	ldi	r24, 0xA0	; 160
     73e:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     740:	2d d4       	rcall	.+2138   	; 0xf9c <usart_spi_deselect_device>
     742:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	be 01       	movw	r22, r28
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	7f 4f       	sbci	r23, 0xFF	; 255
     74c:	80 ea       	ldi	r24, 0xA0	; 160
     74e:	99 e0       	ldi	r25, 0x09	; 9
     750:	0f d4       	rcall	.+2078   	; 0xf70 <usart_spi_select_device>
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     758:	e0 ea       	ldi	r30, 0xA0	; 160
     75a:	f9 e0       	ldi	r31, 0x09	; 9
     75c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     75e:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     760:	fd cf       	rjmp	.-6      	; 0x75c <st7565r_init+0x274>
     762:	81 e2       	ldi	r24, 0x21	; 33
     764:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     768:	e0 ea       	ldi	r30, 0xA0	; 160
     76a:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     76c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     76e:	86 ff       	sbrs	r24, 6
     770:	fd cf       	rjmp	.-6      	; 0x76c <st7565r_init+0x284>
     772:	e0 ea       	ldi	r30, 0xA0	; 160
     774:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     776:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	80 81       	ld	r24, Z
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	80 ea       	ldi	r24, 0xA0	; 160
     784:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     786:	0a d4       	rcall	.+2068   	; 0xf9c <usart_spi_deselect_device>
     788:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	be 01       	movw	r22, r28
     78e:	6f 5f       	subi	r22, 0xFF	; 255
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	80 ea       	ldi	r24, 0xA0	; 160
     794:	99 e0       	ldi	r25, 0x09	; 9
     796:	ec d3       	rcall	.+2008   	; 0xf70 <usart_spi_select_device>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     79e:	e0 ea       	ldi	r30, 0xA0	; 160
     7a0:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7a2:	81 81       	ldd	r24, Z+1	; 0x01
     7a4:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7a6:	fd cf       	rjmp	.-6      	; 0x7a2 <st7565r_init+0x2ba>
     7a8:	81 e8       	ldi	r24, 0x81	; 129
     7aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7ae:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7b0:	f9 e0       	ldi	r31, 0x09	; 9
     7b2:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7b4:	86 ff       	sbrs	r24, 6
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <st7565r_init+0x2ca>
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7bc:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7be:	81 83       	std	Z+1, r24	; 0x01
     7c0:	80 81       	ld	r24, Z
     7c2:	be 01       	movw	r22, r28
     7c4:	6f 5f       	subi	r22, 0xFF	; 255
     7c6:	7f 4f       	sbci	r23, 0xFF	; 255
     7c8:	80 ea       	ldi	r24, 0xA0	; 160
     7ca:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7cc:	e7 d3       	rcall	.+1998   	; 0xf9c <usart_spi_deselect_device>
     7ce:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7d0:	89 83       	std	Y+1, r24	; 0x01
     7d2:	be 01       	movw	r22, r28
     7d4:	6f 5f       	subi	r22, 0xFF	; 255
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	99 e0       	ldi	r25, 0x09	; 9
     7dc:	c9 d3       	rcall	.+1938   	; 0xf70 <usart_spi_select_device>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7e4:	e0 ea       	ldi	r30, 0xA0	; 160
     7e6:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7e8:	81 81       	ldd	r24, Z+1	; 0x01
     7ea:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ec:	fd cf       	rjmp	.-6      	; 0x7e8 <st7565r_init+0x300>
     7ee:	81 e2       	ldi	r24, 0x21	; 33
     7f0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7f4:	e0 ea       	ldi	r30, 0xA0	; 160
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7f6:	f9 e0       	ldi	r31, 0x09	; 9
     7f8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7fa:	86 ff       	sbrs	r24, 6
     7fc:	fd cf       	rjmp	.-6      	; 0x7f8 <st7565r_init+0x310>
     7fe:	e0 ea       	ldi	r30, 0xA0	; 160
     800:	f9 e0       	ldi	r31, 0x09	; 9
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     802:	80 e4       	ldi	r24, 0x40	; 64
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     804:	81 83       	std	Z+1, r24	; 0x01
     806:	80 81       	ld	r24, Z
     808:	be 01       	movw	r22, r28
     80a:	6f 5f       	subi	r22, 0xFF	; 255
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	80 ea       	ldi	r24, 0xA0	; 160
     810:	99 e0       	ldi	r25, 0x09	; 9
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     812:	c4 d3       	rcall	.+1928   	; 0xf9c <usart_spi_deselect_device>
     814:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	be 01       	movw	r22, r28
     81a:	6f 5f       	subi	r22, 0xFF	; 255
     81c:	7f 4f       	sbci	r23, 0xFF	; 255
     81e:	80 ea       	ldi	r24, 0xA0	; 160
     820:	99 e0       	ldi	r25, 0x09	; 9
     822:	a6 d3       	rcall	.+1868   	; 0xf70 <usart_spi_select_device>
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     82a:	e0 ea       	ldi	r30, 0xA0	; 160
     82c:	f9 e0       	ldi	r31, 0x09	; 9
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	85 ff       	sbrs	r24, 5
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     832:	fd cf       	rjmp	.-6      	; 0x82e <st7565r_init+0x346>
     834:	8f ea       	ldi	r24, 0xAF	; 175
     836:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     83a:	e0 ea       	ldi	r30, 0xA0	; 160
     83c:	f9 e0       	ldi	r31, 0x09	; 9
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     83e:	81 81       	ldd	r24, Z+1	; 0x01
     840:	86 ff       	sbrs	r24, 6
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     842:	fd cf       	rjmp	.-6      	; 0x83e <st7565r_init+0x356>
     844:	e0 ea       	ldi	r30, 0xA0	; 160
     846:	f9 e0       	ldi	r31, 0x09	; 9
     848:	80 e4       	ldi	r24, 0x40	; 64
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     84a:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     84c:	80 81       	ld	r24, Z
     84e:	be 01       	movw	r22, r28
     850:	6f 5f       	subi	r22, 0xFF	; 255
     852:	7f 4f       	sbci	r23, 0xFF	; 255
     854:	80 ea       	ldi	r24, 0xA0	; 160
     856:	99 e0       	ldi	r25, 0x09	; 9
     858:	a1 d3       	rcall	.+1858   	; 0xf9c <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     85a:	0f 90       	pop	r0
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	ff 90       	pop	r15
     866:	ef 90       	pop	r14
     868:	df 90       	pop	r13
     86a:	cf 90       	pop	r12
     86c:	bf 90       	pop	r11
     86e:	08 95       	ret

00000870 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     870:	ff 92       	push	r15
     872:	0f 93       	push	r16
     874:	1f 93       	push	r17
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	1f 92       	push	r1
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	08 2f       	mov	r16, r24
     882:	f6 2e       	mov	r15, r22
     884:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     886:	a5 d3       	rcall	.+1866   	; 0xfd2 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     888:	0f 70       	andi	r16, 0x0F	; 15
     88a:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     88c:	8b e2       	ldi	r24, 0x2B	; 43
     88e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     890:	be 01       	movw	r22, r28
     892:	6f 5f       	subi	r22, 0xFF	; 255
     894:	7f 4f       	sbci	r23, 0xFF	; 255
     896:	80 ea       	ldi	r24, 0xA0	; 160
     898:	99 e0       	ldi	r25, 0x09	; 9
     89a:	6a d3       	rcall	.+1748   	; 0xf70 <usart_spi_select_device>
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8a2:	e0 ea       	ldi	r30, 0xA0	; 160
     8a4:	f9 e0       	ldi	r31, 0x09	; 9
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8a8:	95 ff       	sbrs	r25, 5
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <gfx_mono_st7565r_put_byte+0x36>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8ac:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8b0:	e0 ea       	ldi	r30, 0xA0	; 160
     8b2:	f9 e0       	ldi	r31, 0x09	; 9
     8b4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8b6:	86 ff       	sbrs	r24, 6
     8b8:	fd cf       	rjmp	.-6      	; 0x8b4 <gfx_mono_st7565r_put_byte+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ba:	e0 ea       	ldi	r30, 0xA0	; 160
     8bc:	f9 e0       	ldi	r31, 0x09	; 9
     8be:	80 e4       	ldi	r24, 0x40	; 64
     8c0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8c2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8c4:	be 01       	movw	r22, r28
     8c6:	6f 5f       	subi	r22, 0xFF	; 255
     8c8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ca:	80 ea       	ldi	r24, 0xA0	; 160
     8cc:	99 e0       	ldi	r25, 0x09	; 9
     8ce:	66 d3       	rcall	.+1740   	; 0xf9c <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     8d0:	0f 2d       	mov	r16, r15
     8d2:	0f 77       	andi	r16, 0x7F	; 127
     8d4:	02 95       	swap	r16
     8d6:	0f 70       	andi	r16, 0x0F	; 15
     8d8:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8da:	8b e2       	ldi	r24, 0x2B	; 43
     8dc:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8de:	be 01       	movw	r22, r28
     8e0:	6f 5f       	subi	r22, 0xFF	; 255
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	80 ea       	ldi	r24, 0xA0	; 160
     8e6:	99 e0       	ldi	r25, 0x09	; 9
     8e8:	43 d3       	rcall	.+1670   	; 0xf70 <usart_spi_select_device>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8f0:	e0 ea       	ldi	r30, 0xA0	; 160
     8f2:	f9 e0       	ldi	r31, 0x09	; 9
     8f4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8f6:	85 ff       	sbrs	r24, 5
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <gfx_mono_st7565r_put_byte+0x84>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8fa:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8fe:	e0 ea       	ldi	r30, 0xA0	; 160
     900:	f9 e0       	ldi	r31, 0x09	; 9
     902:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     904:	86 ff       	sbrs	r24, 6
     906:	fd cf       	rjmp	.-6      	; 0x902 <gfx_mono_st7565r_put_byte+0x92>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     908:	e0 ea       	ldi	r30, 0xA0	; 160
     90a:	f9 e0       	ldi	r31, 0x09	; 9
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     910:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     912:	be 01       	movw	r22, r28
     914:	6f 5f       	subi	r22, 0xFF	; 255
     916:	7f 4f       	sbci	r23, 0xFF	; 255
     918:	80 ea       	ldi	r24, 0xA0	; 160
     91a:	99 e0       	ldi	r25, 0x09	; 9
     91c:	3f d3       	rcall	.+1662   	; 0xf9c <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     91e:	0f 2d       	mov	r16, r15
     920:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     926:	be 01       	movw	r22, r28
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	80 ea       	ldi	r24, 0xA0	; 160
     92e:	99 e0       	ldi	r25, 0x09	; 9
     930:	1f d3       	rcall	.+1598   	; 0xf70 <usart_spi_select_device>
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f9 e0       	ldi	r31, 0x09	; 9
     93c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     93e:	85 ff       	sbrs	r24, 5
     940:	fd cf       	rjmp	.-6      	; 0x93c <gfx_mono_st7565r_put_byte+0xcc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     942:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     946:	e0 ea       	ldi	r30, 0xA0	; 160
     948:	f9 e0       	ldi	r31, 0x09	; 9
     94a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     94c:	86 ff       	sbrs	r24, 6
     94e:	fd cf       	rjmp	.-6      	; 0x94a <gfx_mono_st7565r_put_byte+0xda>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     950:	e0 ea       	ldi	r30, 0xA0	; 160
     952:	f9 e0       	ldi	r31, 0x09	; 9
     954:	80 e4       	ldi	r24, 0x40	; 64
     956:	81 83       	std	Z+1, r24	; 0x01
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     958:	80 81       	ld	r24, Z
     95a:	be 01       	movw	r22, r28
     95c:	6f 5f       	subi	r22, 0xFF	; 255
     95e:	7f 4f       	sbci	r23, 0xFF	; 255
     960:	80 ea       	ldi	r24, 0xA0	; 160
     962:	99 e0       	ldi	r25, 0x09	; 9
     964:	1b d3       	rcall	.+1590   	; 0xf9c <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     966:	8b e2       	ldi	r24, 0x2B	; 43
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     968:	89 83       	std	Y+1, r24	; 0x01
     96a:	be 01       	movw	r22, r28
     96c:	6f 5f       	subi	r22, 0xFF	; 255
     96e:	7f 4f       	sbci	r23, 0xFF	; 255
     970:	80 ea       	ldi	r24, 0xA0	; 160
     972:	99 e0       	ldi	r25, 0x09	; 9
     974:	fd d2       	rcall	.+1530   	; 0xf70 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7be665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     97c:	e0 ea       	ldi	r30, 0xA0	; 160
     97e:	f9 e0       	ldi	r31, 0x09	; 9
     980:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     982:	85 ff       	sbrs	r24, 5
     984:	fd cf       	rjmp	.-6      	; 0x980 <gfx_mono_st7565r_put_byte+0x110>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     986:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     98a:	e0 ea       	ldi	r30, 0xA0	; 160
     98c:	f9 e0       	ldi	r31, 0x09	; 9
     98e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     990:	86 ff       	sbrs	r24, 6
     992:	fd cf       	rjmp	.-6      	; 0x98e <gfx_mono_st7565r_put_byte+0x11e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     994:	e0 ea       	ldi	r30, 0xA0	; 160
     996:	f9 e0       	ldi	r31, 0x09	; 9
     998:	80 e4       	ldi	r24, 0x40	; 64
     99a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     99c:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9a4:	be 01       	movw	r22, r28
     9a6:	6f 5f       	subi	r22, 0xFF	; 255
     9a8:	7f 4f       	sbci	r23, 0xFF	; 255
     9aa:	80 ea       	ldi	r24, 0xA0	; 160
     9ac:	99 e0       	ldi	r25, 0x09	; 9
     9ae:	f6 d2       	rcall	.+1516   	; 0xf9c <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	08 95       	ret

000009be <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	1f 92       	push	r1
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     9cc:	82 ea       	ldi	r24, 0xA2	; 162
     9ce:	90 e2       	ldi	r25, 0x20	; 32
     9d0:	fb d2       	rcall	.+1526   	; 0xfc8 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     9d2:	8a dd       	rcall	.-1260   	; 0x4e8 <st7565r_init>
     9d4:	8b e2       	ldi	r24, 0x2B	; 43
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	be 01       	movw	r22, r28
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9da:	6f 5f       	subi	r22, 0xFF	; 255
     9dc:	7f 4f       	sbci	r23, 0xFF	; 255
     9de:	80 ea       	ldi	r24, 0xA0	; 160
     9e0:	99 e0       	ldi	r25, 0x09	; 9
     9e2:	c6 d2       	rcall	.+1420   	; 0xf70 <usart_spi_select_device>
     9e4:	81 e0       	ldi	r24, 0x01	; 1
     9e6:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x7be666>
     9ea:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9ec:	f9 e0       	ldi	r31, 0x09	; 9
     9ee:	81 81       	ldd	r24, Z+1	; 0x01
     9f0:	85 ff       	sbrs	r24, 5
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <gfx_mono_st7565r_init+0x30>
     9f4:	80 e4       	ldi	r24, 0x40	; 64
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9f6:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7be9a0>
     9fa:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9fc:	f9 e0       	ldi	r31, 0x09	; 9
     9fe:	81 81       	ldd	r24, Z+1	; 0x01
     a00:	86 ff       	sbrs	r24, 6
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <gfx_mono_st7565r_init+0x40>
     a04:	e0 ea       	ldi	r30, 0xA0	; 160
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a06:	f9 e0       	ldi	r31, 0x09	; 9
     a08:	80 e4       	ldi	r24, 0x40	; 64
     a0a:	81 83       	std	Z+1, r24	; 0x01
     a0c:	80 81       	ld	r24, Z
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a0e:	be 01       	movw	r22, r28
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a10:	6f 5f       	subi	r22, 0xFF	; 255
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	80 ea       	ldi	r24, 0xA0	; 160
     a16:	99 e0       	ldi	r25, 0x09	; 9
     a18:	c1 d2       	rcall	.+1410   	; 0xf9c <usart_spi_deselect_device>
     a1a:	00 e0       	ldi	r16, 0x00	; 0

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a1c:	0a c0       	rjmp	.+20     	; 0xa32 <gfx_mono_st7565r_init+0x74>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	61 2f       	mov	r22, r17
     a22:	80 2f       	mov	r24, r16
     a24:	25 df       	rcall	.-438    	; 0x870 <gfx_mono_st7565r_put_byte>
     a26:	1f 5f       	subi	r17, 0xFF	; 255
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a28:	10 38       	cpi	r17, 0x80	; 128
     a2a:	c9 f7       	brne	.-14     	; 0xa1e <gfx_mono_st7565r_init+0x60>
     a2c:	0f 5f       	subi	r16, 0xFF	; 255

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a2e:	04 30       	cpi	r16, 0x04	; 4
     a30:	11 f0       	breq	.+4      	; 0xa36 <gfx_mono_st7565r_init+0x78>
     a32:	10 e0       	ldi	r17, 0x00	; 0
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a34:	f4 cf       	rjmp	.-24     	; 0xa1e <gfx_mono_st7565r_init+0x60>
     a36:	0f 90       	pop	r0
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	08 95       	ret

00000a42 <gfx_mono_st7565r_draw_pixel>:
     a42:	ff 92       	push	r15
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a4c:	88 23       	and	r24, r24
     a4e:	4c f1       	brlt	.+82     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x60>
     a50:	60 32       	cpi	r22, 0x20	; 32
     a52:	38 f5       	brcc	.+78     	; 0xaa2 <gfx_mono_st7565r_draw_pixel+0x60>
     a54:	d4 2f       	mov	r29, r20
     a56:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     a58:	f6 2e       	mov	r15, r22
     a5a:	f6 94       	lsr	r15
     a5c:	f6 94       	lsr	r15
     a5e:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	88 e0       	ldi	r24, 0x08	; 8
     a64:	f8 9e       	mul	r15, r24
     a66:	60 19       	sub	r22, r0
     a68:	71 09       	sbc	r23, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	8c 01       	movw	r16, r24
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <gfx_mono_st7565r_draw_pixel+0x36>
     a74:	00 0f       	add	r16, r16
     a76:	11 1f       	adc	r17, r17
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     a7c:	6c 2f       	mov	r22, r28
     a7e:	8f 2d       	mov	r24, r15
     a80:	b6 d2       	rcall	.+1388   	; 0xfee <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     a82:	d1 30       	cpi	r29, 0x01	; 1
     a84:	21 f0       	breq	.+8      	; 0xa8e <gfx_mono_st7565r_draw_pixel+0x4c>
     a86:	28 f0       	brcs	.+10     	; 0xa92 <gfx_mono_st7565r_draw_pixel+0x50>
     a88:	d2 30       	cpi	r29, 0x02	; 2
     a8a:	31 f0       	breq	.+12     	; 0xa98 <gfx_mono_st7565r_draw_pixel+0x56>
     a8c:	06 c0       	rjmp	.+12     	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     a8e:	80 2b       	or	r24, r16
		break;
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     a92:	00 95       	com	r16
     a94:	80 23       	and	r24, r16
		break;
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <gfx_mono_st7565r_draw_pixel+0x58>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     a98:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     a9a:	48 2f       	mov	r20, r24
     a9c:	6c 2f       	mov	r22, r28
     a9e:	8f 2d       	mov	r24, r15
     aa0:	e7 de       	rcall	.-562    	; 0x870 <gfx_mono_st7565r_put_byte>
}
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	08 95       	ret

00000aae <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     aae:	9f c2       	rjmp	.+1342   	; 0xfee <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     ab0:	08 95       	ret

00000ab2 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
     ac4:	d9 01       	movw	r26, r18
     ac6:	c8 01       	movw	r24, r16
     ac8:	b6 95       	lsr	r27
     aca:	a7 95       	ror	r26
     acc:	97 95       	ror	r25
     ace:	87 95       	ror	r24
     ad0:	48 17       	cp	r20, r24
     ad2:	59 07       	cpc	r21, r25
     ad4:	6a 07       	cpc	r22, r26
     ad6:	7b 07       	cpc	r23, r27
     ad8:	78 f4       	brcc	.+30     	; 0xaf8 <usart_spi_set_baudrate+0x46>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
     ada:	6a 01       	movw	r12, r20
     adc:	7b 01       	movw	r14, r22
     ade:	cc 0c       	add	r12, r12
     ae0:	dd 1c       	adc	r13, r13
     ae2:	ee 1c       	adc	r14, r14
     ae4:	ff 1c       	adc	r15, r15
     ae6:	c9 01       	movw	r24, r18
     ae8:	b8 01       	movw	r22, r16
     aea:	a7 01       	movw	r20, r14
     aec:	96 01       	movw	r18, r12
     aee:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <__udivmodsi4>
     af2:	21 50       	subi	r18, 0x01	; 1
     af4:	31 09       	sbc	r19, r1
     af6:	02 c0       	rjmp	.+4      	; 0xafc <usart_spi_set_baudrate+0x4a>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
     afc:	83 2f       	mov	r24, r19
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
     b02:	2e 83       	std	Y+6, r18	; 0x06
}
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	08 95       	ret

00000b16 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     b16:	df 92       	push	r13
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	1f 92       	push	r1
     b26:	cd b7       	in	r28, 0x3d	; 61
     b28:	de b7       	in	r29, 0x3e	; 62
     b2a:	7c 01       	movw	r14, r24
     b2c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	09 f4       	brne	.+2      	; 0xb34 <usart_init_spi+0x1e>
     b32:	b2 c1       	rjmp	.+868    	; 0xe98 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     b34:	80 3c       	cpi	r24, 0xC0	; 192
     b36:	91 05       	cpc	r25, r1
     b38:	21 f4       	brne	.+8      	; 0xb42 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     b3a:	60 e1       	ldi	r22, 0x10	; 16
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	f1 d2       	rcall	.+1506   	; 0x1122 <sysclk_enable_module>
     b40:	ab c1       	rjmp	.+854    	; 0xe98 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     b42:	80 e8       	ldi	r24, 0x80	; 128
     b44:	e8 16       	cp	r14, r24
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	f8 06       	cpc	r15, r24
     b4a:	21 f4       	brne	.+8      	; 0xb54 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     b4c:	62 e0       	ldi	r22, 0x02	; 2
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	e8 d2       	rcall	.+1488   	; 0x1122 <sysclk_enable_module>
     b52:	a2 c1       	rjmp	.+836    	; 0xe98 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     b54:	e1 14       	cp	r14, r1
     b56:	e1 e0       	ldi	r30, 0x01	; 1
     b58:	fe 06       	cpc	r15, r30
     b5a:	21 f4       	brne	.+8      	; 0xb64 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	e0 d2       	rcall	.+1472   	; 0x1122 <sysclk_enable_module>
     b62:	9a c1       	rjmp	.+820    	; 0xe98 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     b64:	f0 e8       	ldi	r31, 0x80	; 128
     b66:	ef 16       	cp	r14, r31
     b68:	f3 e0       	ldi	r31, 0x03	; 3
     b6a:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     b6c:	21 f4       	brne	.+8      	; 0xb76 <usart_init_spi+0x60>
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	d7 d2       	rcall	.+1454   	; 0x1122 <sysclk_enable_module>
     b74:	91 c1       	rjmp	.+802    	; 0xe98 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
     b76:	30 e9       	ldi	r19, 0x90	; 144
     b78:	e3 16       	cp	r14, r19
     b7a:	33 e0       	ldi	r19, 0x03	; 3
     b7c:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
     b7e:	21 f4       	brne	.+8      	; 0xb88 <usart_init_spi+0x72>
     b80:	61 e0       	ldi	r22, 0x01	; 1
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	ce d2       	rcall	.+1436   	; 0x1122 <sysclk_enable_module>
     b86:	88 c1       	rjmp	.+784    	; 0xe98 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b88:	e1 14       	cp	r14, r1
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b8e:	21 f4       	brne	.+8      	; 0xb98 <usart_init_spi+0x82>
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	c6 d2       	rcall	.+1420   	; 0x1122 <sysclk_enable_module>
     b96:	80 c1       	rjmp	.+768    	; 0xe98 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	ee 16       	cp	r14, r30
     b9c:	e2 e0       	ldi	r30, 0x02	; 2
     b9e:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
     ba0:	21 f4       	brne	.+8      	; 0xbaa <usart_init_spi+0x94>
     ba2:	62 e0       	ldi	r22, 0x02	; 2
     ba4:	82 e0       	ldi	r24, 0x02	; 2
     ba6:	bd d2       	rcall	.+1402   	; 0x1122 <sysclk_enable_module>
     ba8:	77 c1       	rjmp	.+750    	; 0xe98 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     baa:	f0 e2       	ldi	r31, 0x20	; 32
     bac:	ef 16       	cp	r14, r31
     bae:	f3 e0       	ldi	r31, 0x03	; 3
     bb0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     bb2:	21 f4       	brne	.+8      	; 0xbbc <usart_init_spi+0xa6>
     bb4:	64 e0       	ldi	r22, 0x04	; 4
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	b4 d2       	rcall	.+1384   	; 0x1122 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     bba:	6e c1       	rjmp	.+732    	; 0xe98 <usart_init_spi+0x382>
     bbc:	e1 14       	cp	r14, r1
     bbe:	38 e0       	ldi	r19, 0x08	; 8
     bc0:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     bc2:	21 f4       	brne	.+8      	; 0xbcc <usart_init_spi+0xb6>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	83 e0       	ldi	r24, 0x03	; 3
     bc8:	ac d2       	rcall	.+1368   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     bca:	66 c1       	rjmp	.+716    	; 0xe98 <usart_init_spi+0x382>
     bcc:	e1 14       	cp	r14, r1
     bce:	89 e0       	ldi	r24, 0x09	; 9
     bd0:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     bd2:	21 f4       	brne	.+8      	; 0xbdc <usart_init_spi+0xc6>
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	a4 d2       	rcall	.+1352   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     bda:	5e c1       	rjmp	.+700    	; 0xe98 <usart_init_spi+0x382>
     bdc:	e1 14       	cp	r14, r1
     bde:	ea e0       	ldi	r30, 0x0A	; 10
     be0:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     be2:	21 f4       	brne	.+8      	; 0xbec <usart_init_spi+0xd6>
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	85 e0       	ldi	r24, 0x05	; 5
     be8:	9c d2       	rcall	.+1336   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
     bea:	56 c1       	rjmp	.+684    	; 0xe98 <usart_init_spi+0x382>
     bec:	e1 14       	cp	r14, r1
     bee:	fb e0       	ldi	r31, 0x0B	; 11
     bf0:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
     bf2:	21 f4       	brne	.+8      	; 0xbfc <usart_init_spi+0xe6>
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	94 d2       	rcall	.+1320   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     bfa:	4e c1       	rjmp	.+668    	; 0xe98 <usart_init_spi+0x382>
     bfc:	30 e4       	ldi	r19, 0x40	; 64
     bfe:	e3 16       	cp	r14, r19
     c00:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     c02:	f3 06       	cpc	r15, r19
     c04:	21 f4       	brne	.+8      	; 0xc0e <usart_init_spi+0xf8>
     c06:	62 e0       	ldi	r22, 0x02	; 2
     c08:	83 e0       	ldi	r24, 0x03	; 3
     c0a:	8b d2       	rcall	.+1302   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     c0c:	45 c1       	rjmp	.+650    	; 0xe98 <usart_init_spi+0x382>
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	e8 16       	cp	r14, r24
     c12:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     c14:	f8 06       	cpc	r15, r24
     c16:	21 f4       	brne	.+8      	; 0xc20 <usart_init_spi+0x10a>
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	84 e0       	ldi	r24, 0x04	; 4
     c1c:	82 d2       	rcall	.+1284   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
     c1e:	3c c1       	rjmp	.+632    	; 0xe98 <usart_init_spi+0x382>
     c20:	e0 e4       	ldi	r30, 0x40	; 64
     c22:	ee 16       	cp	r14, r30
     c24:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
     c26:	fe 06       	cpc	r15, r30
     c28:	21 f4       	brne	.+8      	; 0xc32 <usart_init_spi+0x11c>
     c2a:	62 e0       	ldi	r22, 0x02	; 2
     c2c:	85 e0       	ldi	r24, 0x05	; 5
     c2e:	79 d2       	rcall	.+1266   	; 0x1122 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     c30:	33 c1       	rjmp	.+614    	; 0xe98 <usart_init_spi+0x382>
     c32:	f0 e9       	ldi	r31, 0x90	; 144
     c34:	ef 16       	cp	r14, r31
     c36:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     c38:	ff 06       	cpc	r15, r31
     c3a:	21 f4       	brne	.+8      	; 0xc44 <usart_init_spi+0x12e>
     c3c:	64 e0       	ldi	r22, 0x04	; 4
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	70 d2       	rcall	.+1248   	; 0x1122 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     c42:	2a c1       	rjmp	.+596    	; 0xe98 <usart_init_spi+0x382>
     c44:	30 e9       	ldi	r19, 0x90	; 144
     c46:	e3 16       	cp	r14, r19
     c48:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     c4a:	f3 06       	cpc	r15, r19
     c4c:	21 f4       	brne	.+8      	; 0xc56 <usart_init_spi+0x140>
     c4e:	64 e0       	ldi	r22, 0x04	; 4
     c50:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     c52:	67 d2       	rcall	.+1230   	; 0x1122 <sysclk_enable_module>
     c54:	21 c1       	rjmp	.+578    	; 0xe98 <usart_init_spi+0x382>
     c56:	80 e9       	ldi	r24, 0x90	; 144
     c58:	e8 16       	cp	r14, r24
     c5a:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     c5c:	f8 06       	cpc	r15, r24
     c5e:	21 f4       	brne	.+8      	; 0xc68 <usart_init_spi+0x152>
     c60:	64 e0       	ldi	r22, 0x04	; 4
     c62:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
     c64:	5e d2       	rcall	.+1212   	; 0x1122 <sysclk_enable_module>
     c66:	18 c1       	rjmp	.+560    	; 0xe98 <usart_init_spi+0x382>
     c68:	e0 e9       	ldi	r30, 0x90	; 144
     c6a:	ee 16       	cp	r14, r30
     c6c:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
     c6e:	fe 06       	cpc	r15, r30
     c70:	21 f4       	brne	.+8      	; 0xc7a <usart_init_spi+0x164>
     c72:	64 e0       	ldi	r22, 0x04	; 4
     c74:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     c76:	55 d2       	rcall	.+1194   	; 0x1122 <sysclk_enable_module>
     c78:	0f c1       	rjmp	.+542    	; 0xe98 <usart_init_spi+0x382>
     c7a:	f0 ec       	ldi	r31, 0xC0	; 192
     c7c:	ef 16       	cp	r14, r31
     c7e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     c80:	ff 06       	cpc	r15, r31
     c82:	21 f4       	brne	.+8      	; 0xc8c <usart_init_spi+0x176>
     c84:	68 e0       	ldi	r22, 0x08	; 8
     c86:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     c88:	4c d2       	rcall	.+1176   	; 0x1122 <sysclk_enable_module>
     c8a:	06 c1       	rjmp	.+524    	; 0xe98 <usart_init_spi+0x382>
     c8c:	30 ec       	ldi	r19, 0xC0	; 192
     c8e:	e3 16       	cp	r14, r19
     c90:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     c92:	f3 06       	cpc	r15, r19
     c94:	21 f4       	brne	.+8      	; 0xc9e <usart_init_spi+0x188>
     c96:	68 e0       	ldi	r22, 0x08	; 8
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	43 d2       	rcall	.+1158   	; 0x1122 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     c9c:	fd c0       	rjmp	.+506    	; 0xe98 <usart_init_spi+0x382>
     c9e:	80 ea       	ldi	r24, 0xA0	; 160
     ca0:	e8 16       	cp	r14, r24
     ca2:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     ca4:	f8 06       	cpc	r15, r24
     ca6:	61 f4       	brne	.+24     	; 0xcc0 <usart_init_spi+0x1aa>
     ca8:	60 e1       	ldi	r22, 0x10	; 16
     caa:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     cac:	3a d2       	rcall	.+1140   	; 0x1122 <sysclk_enable_module>
     cae:	e0 ea       	ldi	r30, 0xA0	; 160
     cb0:	f8 e0       	ldi	r31, 0x08	; 8
     cb2:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     cb4:	8f 7e       	andi	r24, 0xEF	; 239
     cb6:	84 83       	std	Z+4, r24	; 0x04
     cb8:	f8 01       	movw	r30, r16
     cba:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     cbc:	22 50       	subi	r18, 0x02	; 2
     cbe:	4c c0       	rjmp	.+152    	; 0xd58 <usart_init_spi+0x242>
     cc0:	f0 ea       	ldi	r31, 0xA0	; 160
     cc2:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     cc4:	f9 e0       	ldi	r31, 0x09	; 9
     cc6:	ff 06       	cpc	r15, r31
     cc8:	21 f4       	brne	.+8      	; 0xcd2 <usart_init_spi+0x1bc>
     cca:	60 e1       	ldi	r22, 0x10	; 16
     ccc:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     cce:	29 d2       	rcall	.+1106   	; 0x1122 <sysclk_enable_module>
     cd0:	e3 c0       	rjmp	.+454    	; 0xe98 <usart_init_spi+0x382>
     cd2:	30 ea       	ldi	r19, 0xA0	; 160
     cd4:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     cd6:	3a e0       	ldi	r19, 0x0A	; 10
     cd8:	f3 06       	cpc	r15, r19
     cda:	21 f4       	brne	.+8      	; 0xce4 <usart_init_spi+0x1ce>
     cdc:	60 e1       	ldi	r22, 0x10	; 16
     cde:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
     ce0:	20 d2       	rcall	.+1088   	; 0x1122 <sysclk_enable_module>
     ce2:	da c0       	rjmp	.+436    	; 0xe98 <usart_init_spi+0x382>
     ce4:	80 ea       	ldi	r24, 0xA0	; 160
     ce6:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
     ce8:	8b e0       	ldi	r24, 0x0B	; 11
     cea:	f8 06       	cpc	r15, r24
     cec:	21 f4       	brne	.+8      	; 0xcf6 <usart_init_spi+0x1e0>
     cee:	60 e1       	ldi	r22, 0x10	; 16
     cf0:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     cf2:	17 d2       	rcall	.+1070   	; 0x1122 <sysclk_enable_module>
     cf4:	d1 c0       	rjmp	.+418    	; 0xe98 <usart_init_spi+0x382>
     cf6:	e0 eb       	ldi	r30, 0xB0	; 176
     cf8:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     cfa:	e8 e0       	ldi	r30, 0x08	; 8
     cfc:	fe 06       	cpc	r15, r30
     cfe:	21 f4       	brne	.+8      	; 0xd08 <usart_init_spi+0x1f2>
     d00:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	0e d2       	rcall	.+1052   	; 0x1122 <sysclk_enable_module>
     d06:	c8 c0       	rjmp	.+400    	; 0xe98 <usart_init_spi+0x382>
     d08:	f0 eb       	ldi	r31, 0xB0	; 176
     d0a:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     d0c:	f9 e0       	ldi	r31, 0x09	; 9
     d0e:	ff 06       	cpc	r15, r31
     d10:	21 f4       	brne	.+8      	; 0xd1a <usart_init_spi+0x204>
     d12:	60 e2       	ldi	r22, 0x20	; 32
     d14:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     d16:	05 d2       	rcall	.+1034   	; 0x1122 <sysclk_enable_module>
     d18:	bf c0       	rjmp	.+382    	; 0xe98 <usart_init_spi+0x382>
     d1a:	30 e8       	ldi	r19, 0x80	; 128
     d1c:	e3 16       	cp	r14, r19
     d1e:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     d20:	f3 06       	cpc	r15, r19
     d22:	21 f4       	brne	.+8      	; 0xd2c <usart_init_spi+0x216>
     d24:	60 e4       	ldi	r22, 0x40	; 64
     d26:	83 e0       	ldi	r24, 0x03	; 3
     d28:	fc d1       	rcall	.+1016   	; 0x1122 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     d2a:	b6 c0       	rjmp	.+364    	; 0xe98 <usart_init_spi+0x382>
     d2c:	80 ea       	ldi	r24, 0xA0	; 160
     d2e:	e8 16       	cp	r14, r24
     d30:	84 e0       	ldi	r24, 0x04	; 4
     d32:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     d34:	21 f4       	brne	.+8      	; 0xd3e <usart_init_spi+0x228>
     d36:	60 e4       	ldi	r22, 0x40	; 64
     d38:	85 e0       	ldi	r24, 0x05	; 5
     d3a:	f3 d1       	rcall	.+998    	; 0x1122 <sysclk_enable_module>
     d3c:	ad c0       	rjmp	.+346    	; 0xe98 <usart_init_spi+0x382>
     d3e:	f7 01       	movw	r30, r14
     d40:	84 81       	ldd	r24, Z+4	; 0x04
     d42:	8f 7e       	andi	r24, 0xEF	; 239
     d44:	84 83       	std	Z+4, r24	; 0x04
     d46:	fb 01       	movw	r30, r22
     d48:	24 81       	ldd	r18, Z+4	; 0x04
     d4a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     d4c:	c7 01       	movw	r24, r14
     d4e:	f0 ea       	ldi	r31, 0xA0	; 160
     d50:	ef 16       	cp	r14, r31
     d52:	f8 e0       	ldi	r31, 0x08	; 8
     d54:	ff 06       	cpc	r15, r31
     d56:	49 f4       	brne	.+18     	; 0xd6a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
     d58:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x7be64e>
     d5c:	84 fd       	sbrc	r24, 4
     d5e:	a5 c0       	rjmp	.+330    	; 0xeaa <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
     d60:	0f 2e       	mov	r0, r31
     d62:	f1 e1       	ldi	r31, 0x11	; 17
     d64:	df 2e       	mov	r13, r31
     d66:	f0 2d       	mov	r31, r0
     d68:	a4 c0       	rjmp	.+328    	; 0xeb2 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
     d6a:	80 3b       	cpi	r24, 0xB0	; 176
     d6c:	38 e0       	ldi	r19, 0x08	; 8
     d6e:	93 07       	cpc	r25, r19
     d70:	91 f0       	breq	.+36     	; 0xd96 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
     d72:	80 3a       	cpi	r24, 0xA0	; 160
     d74:	e9 e0       	ldi	r30, 0x09	; 9
     d76:	9e 07       	cpc	r25, r30
     d78:	49 f4       	brne	.+18     	; 0xd8c <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
     d7a:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x7be66e>
     d7e:	34 fd       	sbrc	r19, 4
     d80:	9b c0       	rjmp	.+310    	; 0xeb8 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
     d82:	0f 2e       	mov	r0, r31
     d84:	f9 e1       	ldi	r31, 0x19	; 25
     d86:	df 2e       	mov	r13, r31
     d88:	f0 2d       	mov	r31, r0
     d8a:	16 c0       	rjmp	.+44     	; 0xdb8 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
     d8c:	80 3b       	cpi	r24, 0xB0	; 176
     d8e:	f9 e0       	ldi	r31, 0x09	; 9
     d90:	9f 07       	cpc	r25, r31
     d92:	f1 f0       	breq	.+60     	; 0xdd0 <usart_init_spi+0x2ba>
     d94:	04 c0       	rjmp	.+8      	; 0xd9e <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     d96:	0f 2e       	mov	r0, r31
     d98:	f5 e1       	ldi	r31, 0x15	; 21
     d9a:	df 2e       	mov	r13, r31
     d9c:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
     d9e:	80 3a       	cpi	r24, 0xA0	; 160
     da0:	3a e0       	ldi	r19, 0x0A	; 10
     da2:	93 07       	cpc	r25, r19
     da4:	49 f4       	brne	.+18     	; 0xdb8 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
     da6:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x7be68e>
     daa:	84 fd       	sbrc	r24, 4
     dac:	8a c0       	rjmp	.+276    	; 0xec2 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
     dae:	0f 2e       	mov	r0, r31
     db0:	f1 e2       	ldi	r31, 0x21	; 33
     db2:	df 2e       	mov	r13, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	15 c0       	rjmp	.+42     	; 0xde2 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
     db8:	80 3a       	cpi	r24, 0xA0	; 160
     dba:	9b 40       	sbci	r25, 0x0B	; 11
     dbc:	91 f4       	brne	.+36     	; 0xde2 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
     dbe:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7be6ae>
     dc2:	84 fd       	sbrc	r24, 4
     dc4:	0a c0       	rjmp	.+20     	; 0xdda <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
     dc6:	0f 2e       	mov	r0, r31
     dc8:	f9 e2       	ldi	r31, 0x29	; 41
     dca:	df 2e       	mov	r13, r31
     dcc:	f0 2d       	mov	r31, r0
     dce:	09 c0       	rjmp	.+18     	; 0xde2 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     dd0:	0f 2e       	mov	r0, r31
     dd2:	fd e1       	ldi	r31, 0x1D	; 29
     dd4:	df 2e       	mov	r13, r31
     dd6:	f0 2d       	mov	r31, r0
     dd8:	04 c0       	rjmp	.+8      	; 0xde2 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
     dda:	0f 2e       	mov	r0, r31
     ddc:	fd e2       	ldi	r31, 0x2D	; 45
     dde:	df 2e       	mov	r13, r31
     de0:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     de2:	ed 2d       	mov	r30, r13
     de4:	e6 95       	lsr	r30
     de6:	e6 95       	lsr	r30
     de8:	e6 95       	lsr	r30
     dea:	30 e2       	ldi	r19, 0x20	; 32
     dec:	e3 9f       	mul	r30, r19
     dee:	f0 01       	movw	r30, r0
     df0:	11 24       	eor	r1, r1
     df2:	fa 5f       	subi	r31, 0xFA	; 250
     df4:	3d 2d       	mov	r19, r13
     df6:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	03 2e       	mov	r0, r19
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <usart_init_spi+0x2ee>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
     e08:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	10 f0       	brcs	.+4      	; 0xe12 <usart_init_spi+0x2fc>
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	01 c0       	rjmp	.+2      	; 0xe14 <usart_init_spi+0x2fe>
     e12:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
     e14:	df 01       	movw	r26, r30
     e16:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
     e18:	a3 0f       	add	r26, r19
     e1a:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     e1c:	9f b7       	in	r25, 0x3f	; 63
     e1e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     e20:	f8 94       	cli
	return flags;
     e22:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
     e24:	2c 91       	ld	r18, X
     e26:	27 70       	andi	r18, 0x07	; 7
     e28:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
     e2a:	9c 91       	ld	r25, X
     e2c:	94 2b       	or	r25, r20
     e2e:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     e30:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     e32:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     e34:	f7 01       	movw	r30, r14
     e36:	85 81       	ldd	r24, Z+5	; 0x05
     e38:	80 6c       	ori	r24, 0xC0	; 192
     e3a:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
     e3c:	f8 01       	movw	r30, r16
     e3e:	84 81       	ldd	r24, Z+4	; 0x04
     e40:	8d 7f       	andi	r24, 0xFD	; 253
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	29 f4       	brne	.+10     	; 0xe50 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
     e46:	f7 01       	movw	r30, r14
     e48:	85 81       	ldd	r24, Z+5	; 0x05
     e4a:	82 60       	ori	r24, 0x02	; 2
     e4c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <usart_init_spi+0x342>
     e50:	f7 01       	movw	r30, r14
     e52:	85 81       	ldd	r24, Z+5	; 0x05
     e54:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
     e56:	85 83       	std	Z+5, r24	; 0x05
     e58:	f8 01       	movw	r30, r16
     e5a:	85 81       	ldd	r24, Z+5	; 0x05
     e5c:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
     e5e:	29 f0       	breq	.+10     	; 0xe6a <usart_init_spi+0x354>
     e60:	f7 01       	movw	r30, r14
     e62:	85 81       	ldd	r24, Z+5	; 0x05
     e64:	84 60       	ori	r24, 0x04	; 4
     e66:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <usart_init_spi+0x35c>
     e6a:	f7 01       	movw	r30, r14
     e6c:	85 81       	ldd	r24, Z+5	; 0x05
     e6e:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     e70:	85 83       	std	Z+5, r24	; 0x05
     e72:	f8 01       	movw	r30, r16
     e74:	40 81       	ld	r20, Z
     e76:	51 81       	ldd	r21, Z+1	; 0x01
     e78:	62 81       	ldd	r22, Z+2	; 0x02
     e7a:	73 81       	ldd	r23, Z+3	; 0x03
     e7c:	00 e8       	ldi	r16, 0x80	; 128
     e7e:	14 e8       	ldi	r17, 0x84	; 132
     e80:	2e e1       	ldi	r18, 0x1E	; 30
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	c7 01       	movw	r24, r14
     e86:	15 de       	rcall	.-982    	; 0xab2 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     e88:	f7 01       	movw	r30, r14
     e8a:	84 81       	ldd	r24, Z+4	; 0x04
     e8c:	88 60       	ori	r24, 0x08	; 8
     e8e:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     e90:	84 81       	ldd	r24, Z+4	; 0x04
     e92:	80 61       	ori	r24, 0x10	; 16
     e94:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     e96:	1a c0       	rjmp	.+52     	; 0xecc <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
     e98:	f7 01       	movw	r30, r14
     e9a:	84 81       	ldd	r24, Z+4	; 0x04
     e9c:	8f 7e       	andi	r24, 0xEF	; 239
     e9e:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
     ea0:	f8 01       	movw	r30, r16
     ea2:	24 81       	ldd	r18, Z+4	; 0x04
     ea4:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
     ea6:	c7 01       	movw	r24, r14
     ea8:	60 cf       	rjmp	.-320    	; 0xd6a <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
     eaa:	0f 2e       	mov	r0, r31
     eac:	f5 e1       	ldi	r31, 0x15	; 21
     eae:	df 2e       	mov	r13, r31
     eb0:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
     eb2:	80 ea       	ldi	r24, 0xA0	; 160
     eb4:	98 e0       	ldi	r25, 0x08	; 8
     eb6:	6a cf       	rjmp	.-300    	; 0xd8c <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
     eb8:	0f 2e       	mov	r0, r31
     eba:	fd e1       	ldi	r31, 0x1D	; 29
     ebc:	df 2e       	mov	r13, r31
     ebe:	f0 2d       	mov	r31, r0
     ec0:	7b cf       	rjmp	.-266    	; 0xdb8 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
     ec2:	0f 2e       	mov	r0, r31
     ec4:	f5 e2       	ldi	r31, 0x25	; 37
     ec6:	df 2e       	mov	r13, r31
     ec8:	f0 2d       	mov	r31, r0
     eca:	8b cf       	rjmp	.-234    	; 0xde2 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
     ecc:	0f 90       	pop	r0
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	08 95       	ret

00000ede <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
     ede:	80 3a       	cpi	r24, 0xA0	; 160
     ee0:	28 e0       	ldi	r18, 0x08	; 8
     ee2:	92 07       	cpc	r25, r18
     ee4:	21 f4       	brne	.+8      	; 0xeee <usart_spi_init+0x10>
     ee6:	60 e1       	ldi	r22, 0x10	; 16
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	1b c1       	rjmp	.+566    	; 0x1122 <sysclk_enable_module>
     eec:	08 95       	ret
     eee:	80 3b       	cpi	r24, 0xB0	; 176
     ef0:	28 e0       	ldi	r18, 0x08	; 8
     ef2:	92 07       	cpc	r25, r18
     ef4:	21 f4       	brne	.+8      	; 0xefe <usart_spi_init+0x20>
     ef6:	60 e2       	ldi	r22, 0x20	; 32
     ef8:	83 e0       	ldi	r24, 0x03	; 3
     efa:	13 c1       	rjmp	.+550    	; 0x1122 <sysclk_enable_module>
     efc:	08 95       	ret
     efe:	80 3a       	cpi	r24, 0xA0	; 160
     f00:	29 e0       	ldi	r18, 0x09	; 9
     f02:	92 07       	cpc	r25, r18
     f04:	21 f4       	brne	.+8      	; 0xf0e <usart_spi_init+0x30>
     f06:	60 e1       	ldi	r22, 0x10	; 16
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	0b c1       	rjmp	.+534    	; 0x1122 <sysclk_enable_module>
     f0c:	08 95       	ret
     f0e:	80 3b       	cpi	r24, 0xB0	; 176
     f10:	29 e0       	ldi	r18, 0x09	; 9
     f12:	92 07       	cpc	r25, r18
     f14:	21 f4       	brne	.+8      	; 0xf1e <usart_spi_init+0x40>
     f16:	60 e2       	ldi	r22, 0x20	; 32
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	03 c1       	rjmp	.+518    	; 0x1122 <sysclk_enable_module>
     f1c:	08 95       	ret
     f1e:	80 3a       	cpi	r24, 0xA0	; 160
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	92 07       	cpc	r25, r18
     f24:	21 f4       	brne	.+8      	; 0xf2e <usart_spi_init+0x50>
     f26:	60 e1       	ldi	r22, 0x10	; 16
     f28:	85 e0       	ldi	r24, 0x05	; 5
     f2a:	fb c0       	rjmp	.+502    	; 0x1122 <sysclk_enable_module>
     f2c:	08 95       	ret
     f2e:	80 3a       	cpi	r24, 0xA0	; 160
     f30:	9b 40       	sbci	r25, 0x0B	; 11
     f32:	19 f4       	brne	.+6      	; 0xf3a <usart_spi_init+0x5c>
     f34:	60 e1       	ldi	r22, 0x10	; 16
     f36:	86 e0       	ldi	r24, 0x06	; 6
     f38:	f4 c0       	rjmp	.+488    	; 0x1122 <sysclk_enable_module>
     f3a:	08 95       	ret

00000f3c <usart_spi_setup_device>:
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	00 d0       	rcall	.+0      	; 0xf46 <usart_spi_setup_device+0xa>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <usart_spi_setup_device+0xc>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	09 83       	std	Y+1, r16	; 0x01
     f4e:	1a 83       	std	Y+2, r17	; 0x02
     f50:	2b 83       	std	Y+3, r18	; 0x03
     f52:	3c 83       	std	Y+4, r19	; 0x04
     f54:	4d 83       	std	Y+5, r20	; 0x05
     f56:	1e 82       	std	Y+6, r1	; 0x06
     f58:	be 01       	movw	r22, r28
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	db dd       	rcall	.-1098   	; 0xb16 <usart_init_spi>
     f60:	26 96       	adiw	r28, 0x06	; 6
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	df 91       	pop	r29
     f68:	cf 91       	pop	r28
     f6a:	1f 91       	pop	r17
     f6c:	0f 91       	pop	r16
     f6e:	08 95       	ret

00000f70 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
     f70:	fb 01       	movw	r30, r22
     f72:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     f74:	e8 2f       	mov	r30, r24
     f76:	e6 95       	lsr	r30
     f78:	e6 95       	lsr	r30
     f7a:	e6 95       	lsr	r30
     f7c:	40 e2       	ldi	r20, 0x20	; 32
     f7e:	e4 9f       	mul	r30, r20
     f80:	f0 01       	movw	r30, r0
     f82:	11 24       	eor	r1, r1
     f84:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     f86:	87 70       	andi	r24, 0x07	; 7
     f88:	21 e0       	ldi	r18, 0x01	; 1
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	a9 01       	movw	r20, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <usart_spi_select_device+0x24>
     f90:	44 0f       	add	r20, r20
     f92:	55 1f       	adc	r21, r21
     f94:	8a 95       	dec	r24
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     f98:	46 83       	std	Z+6, r20	; 0x06
     f9a:	08 95       	ret

00000f9c <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
     f9c:	fb 01       	movw	r30, r22
     f9e:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
     fa0:	e8 2f       	mov	r30, r24
     fa2:	e6 95       	lsr	r30
     fa4:	e6 95       	lsr	r30
     fa6:	e6 95       	lsr	r30
     fa8:	40 e2       	ldi	r20, 0x20	; 32
     faa:	e4 9f       	mul	r30, r20
     fac:	f0 01       	movw	r30, r0
     fae:	11 24       	eor	r1, r1
     fb0:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     fb2:	87 70       	andi	r24, 0x07	; 7
     fb4:	21 e0       	ldi	r18, 0x01	; 1
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a9 01       	movw	r20, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <usart_spi_deselect_device+0x24>
     fbc:	44 0f       	add	r20, r20
     fbe:	55 1f       	adc	r21, r21
     fc0:	8a 95       	dec	r24
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     fc4:	45 83       	std	Z+5, r20	; 0x05
     fc6:	08 95       	ret

00000fc8 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     fc8:	80 93 a2 22 	sts	0x22A2, r24	; 0x8022a2 <fbpointer>
     fcc:	90 93 a3 22 	sts	0x22A3, r25	; 0x8022a3 <fbpointer+0x1>
     fd0:	08 95       	ret

00000fd2 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     fd2:	20 91 a2 22 	lds	r18, 0x22A2	; 0x8022a2 <fbpointer>
     fd6:	30 91 a3 22 	lds	r19, 0x22A3	; 0x8022a3 <fbpointer+0x1>
     fda:	90 e8       	ldi	r25, 0x80	; 128
     fdc:	89 9f       	mul	r24, r25
     fde:	20 0d       	add	r18, r0
     fe0:	31 1d       	adc	r19, r1
     fe2:	11 24       	eor	r1, r1
     fe4:	f9 01       	movw	r30, r18
     fe6:	e6 0f       	add	r30, r22
     fe8:	f1 1d       	adc	r31, r1
     fea:	40 83       	st	Z, r20
     fec:	08 95       	ret

00000fee <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     fee:	20 91 a2 22 	lds	r18, 0x22A2	; 0x8022a2 <fbpointer>
     ff2:	30 91 a3 22 	lds	r19, 0x22A3	; 0x8022a3 <fbpointer+0x1>
     ff6:	90 e8       	ldi	r25, 0x80	; 128
     ff8:	89 9f       	mul	r24, r25
     ffa:	20 0d       	add	r18, r0
     ffc:	31 1d       	adc	r19, r1
     ffe:	11 24       	eor	r1, r1
    1000:	f9 01       	movw	r30, r18
    1002:	e6 0f       	add	r30, r22
    1004:	f1 1d       	adc	r31, r1
}
    1006:	80 81       	ld	r24, Z
    1008:	08 95       	ret

0000100a <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	e4 2f       	mov	r30, r20
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	e8 0f       	add	r30, r24
    101a:	f1 1d       	adc	r31, r1
    101c:	e1 38       	cpi	r30, 0x81	; 129
    101e:	f1 05       	cpc	r31, r1
    1020:	1c f0       	brlt	.+6      	; 0x1028 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1022:	c0 e8       	ldi	r28, 0x80	; 128
    1024:	4c 2f       	mov	r20, r28
    1026:	48 1b       	sub	r20, r24
    1028:	44 23       	and	r20, r20
    102a:	09 f4       	brne	.+2      	; 0x102e <gfx_mono_generic_draw_horizontal_line+0x24>
    102c:	4a c0       	rjmp	.+148    	; 0x10c2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    102e:	d6 2f       	mov	r29, r22
    1030:	d6 95       	lsr	r29
    1032:	d6 95       	lsr	r29
    1034:	d6 95       	lsr	r29
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	98 e0       	ldi	r25, 0x08	; 8
    103a:	d9 9f       	mul	r29, r25
    103c:	60 19       	sub	r22, r0
    103e:	71 09       	sbc	r23, r1
    1040:	11 24       	eor	r1, r1
    1042:	e1 e0       	ldi	r30, 0x01	; 1
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	df 01       	movw	r26, r30
    1048:	02 c0       	rjmp	.+4      	; 0x104e <gfx_mono_generic_draw_horizontal_line+0x44>
    104a:	aa 0f       	add	r26, r26
    104c:	bb 1f       	adc	r27, r27
    104e:	6a 95       	dec	r22
    1050:	e2 f7       	brpl	.-8      	; 0x104a <gfx_mono_generic_draw_horizontal_line+0x40>
    1052:	fa 2e       	mov	r15, r26
    1054:	21 30       	cpi	r18, 0x01	; 1
    1056:	21 f0       	breq	.+8      	; 0x1060 <gfx_mono_generic_draw_horizontal_line+0x56>
    1058:	98 f0       	brcs	.+38     	; 0x1080 <gfx_mono_generic_draw_horizontal_line+0x76>
    105a:	22 30       	cpi	r18, 0x02	; 2
    105c:	19 f1       	breq	.+70     	; 0x10a4 <gfx_mono_generic_draw_horizontal_line+0x9a>
    105e:	31 c0       	rjmp	.+98     	; 0x10c2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1060:	c4 2f       	mov	r28, r20
    1062:	1f ef       	ldi	r17, 0xFF	; 255
    1064:	18 0f       	add	r17, r24
    1066:	01 2f       	mov	r16, r17
    1068:	0c 0f       	add	r16, r28
    106a:	60 2f       	mov	r22, r16
    106c:	8d 2f       	mov	r24, r29
    106e:	1f dd       	rcall	.-1474   	; 0xaae <gfx_mono_st7565r_get_byte>
    1070:	4f 2d       	mov	r20, r15
    1072:	48 2b       	or	r20, r24
    1074:	60 2f       	mov	r22, r16
    1076:	8d 2f       	mov	r24, r29
    1078:	fb db       	rcall	.-2058   	; 0x870 <gfx_mono_st7565r_put_byte>
    107a:	c1 50       	subi	r28, 0x01	; 1
    107c:	a1 f7       	brne	.-24     	; 0x1066 <gfx_mono_generic_draw_horizontal_line+0x5c>
    107e:	21 c0       	rjmp	.+66     	; 0x10c2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    1080:	c4 2f       	mov	r28, r20
    1082:	1f ef       	ldi	r17, 0xFF	; 255
    1084:	18 0f       	add	r17, r24
    1086:	fa 2e       	mov	r15, r26
    1088:	f0 94       	com	r15
    108a:	01 2f       	mov	r16, r17
    108c:	0c 0f       	add	r16, r28
    108e:	60 2f       	mov	r22, r16
    1090:	8d 2f       	mov	r24, r29
    1092:	0d dd       	rcall	.-1510   	; 0xaae <gfx_mono_st7565r_get_byte>
    1094:	4f 2d       	mov	r20, r15
    1096:	48 23       	and	r20, r24
    1098:	60 2f       	mov	r22, r16
    109a:	8d 2f       	mov	r24, r29
    109c:	e9 db       	rcall	.-2094   	; 0x870 <gfx_mono_st7565r_put_byte>
    109e:	c1 50       	subi	r28, 0x01	; 1
    10a0:	a1 f7       	brne	.-24     	; 0x108a <gfx_mono_generic_draw_horizontal_line+0x80>
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <gfx_mono_generic_draw_horizontal_line+0xb8>
    10a4:	c4 2f       	mov	r28, r20
    10a6:	1f ef       	ldi	r17, 0xFF	; 255
    10a8:	18 0f       	add	r17, r24
    10aa:	01 2f       	mov	r16, r17
    10ac:	0c 0f       	add	r16, r28
    10ae:	60 2f       	mov	r22, r16
    10b0:	8d 2f       	mov	r24, r29
    10b2:	fd dc       	rcall	.-1542   	; 0xaae <gfx_mono_st7565r_get_byte>
    10b4:	4f 2d       	mov	r20, r15
    10b6:	48 27       	eor	r20, r24
    10b8:	60 2f       	mov	r22, r16
    10ba:	8d 2f       	mov	r24, r29
    10bc:	d9 db       	rcall	.-2126   	; 0x870 <gfx_mono_st7565r_put_byte>
    10be:	c1 50       	subi	r28, 0x01	; 1
    10c0:	a1 f7       	brne	.-24     	; 0x10aa <gfx_mono_generic_draw_horizontal_line+0xa0>
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	08 95       	ret

000010ce <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    10ce:	ff 92       	push	r15
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
	if (height == 0) {
    10d8:	22 23       	and	r18, r18
    10da:	69 f0       	breq	.+26     	; 0x10f6 <gfx_mono_generic_draw_filled_rect+0x28>
    10dc:	f4 2e       	mov	r15, r20
    10de:	18 2f       	mov	r17, r24
    10e0:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    10e2:	df ef       	ldi	r29, 0xFF	; 255
    10e4:	d6 0f       	add	r29, r22
    10e6:	6d 2f       	mov	r22, r29
    10e8:	6c 0f       	add	r22, r28
    10ea:	20 2f       	mov	r18, r16
    10ec:	4f 2d       	mov	r20, r15
    10ee:	81 2f       	mov	r24, r17
    10f0:	8c df       	rcall	.-232    	; 0x100a <gfx_mono_generic_draw_horizontal_line>
    10f2:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    10f4:	c1 f7       	brne	.-16     	; 0x10e6 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	08 95       	ret

00001102 <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7be070>
    1108:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7be071>
    110c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7be072>
    1110:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7be073>
    1114:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7be074>
    1118:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x7be075>
    111c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x7be076>
    1120:	08 95       	ret

00001122 <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	1f 92       	push	r1
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    112c:	9f b7       	in	r25, 0x3f	; 63
    112e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1130:	f8 94       	cli
	return flags;
    1132:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1134:	e8 2f       	mov	r30, r24
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	e0 59       	subi	r30, 0x90	; 144
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	60 95       	com	r22
    113e:	80 81       	ld	r24, Z
    1140:	68 23       	and	r22, r24
    1142:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1144:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1146:	0f 90       	pop	r0
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	08 95       	ret

0000114e <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	0b b6       	in	r0, 0x3b	; 59
    115a:	0f 92       	push	r0
    115c:	2f 93       	push	r18
    115e:	3f 93       	push	r19
    1160:	4f 93       	push	r20
    1162:	5f 93       	push	r21
    1164:	6f 93       	push	r22
    1166:	7f 93       	push	r23
    1168:	8f 93       	push	r24
    116a:	9f 93       	push	r25
    116c:	af 93       	push	r26
    116e:	bf 93       	push	r27
    1170:	ef 93       	push	r30
    1172:	ff 93       	push	r31
    1174:	e0 91 ea 22 	lds	r30, 0x22EA	; 0x8022ea <tc_tcc0_ovf_callback>
    1178:	f0 91 eb 22 	lds	r31, 0x22EB	; 0x8022eb <tc_tcc0_ovf_callback+0x1>
    117c:	30 97       	sbiw	r30, 0x00	; 0
    117e:	09 f0       	breq	.+2      	; 0x1182 <__vector_14+0x34>
    1180:	19 95       	eicall
    1182:	ff 91       	pop	r31
    1184:	ef 91       	pop	r30
    1186:	bf 91       	pop	r27
    1188:	af 91       	pop	r26
    118a:	9f 91       	pop	r25
    118c:	8f 91       	pop	r24
    118e:	7f 91       	pop	r23
    1190:	6f 91       	pop	r22
    1192:	5f 91       	pop	r21
    1194:	4f 91       	pop	r20
    1196:	3f 91       	pop	r19
    1198:	2f 91       	pop	r18
    119a:	0f 90       	pop	r0
    119c:	0b be       	out	0x3b, r0	; 59
    119e:	0f 90       	pop	r0
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	0f 90       	pop	r0
    11a4:	1f 90       	pop	r1
    11a6:	18 95       	reti

000011a8 <__vector_15>:
    11a8:	1f 92       	push	r1
    11aa:	0f 92       	push	r0
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	0f 92       	push	r0
    11b0:	11 24       	eor	r1, r1
    11b2:	0b b6       	in	r0, 0x3b	; 59
    11b4:	0f 92       	push	r0
    11b6:	2f 93       	push	r18
    11b8:	3f 93       	push	r19
    11ba:	4f 93       	push	r20
    11bc:	5f 93       	push	r21
    11be:	6f 93       	push	r22
    11c0:	7f 93       	push	r23
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	e0 91 e8 22 	lds	r30, 0x22E8	; 0x8022e8 <tc_tcc0_err_callback>
    11d2:	f0 91 e9 22 	lds	r31, 0x22E9	; 0x8022e9 <tc_tcc0_err_callback+0x1>
    11d6:	30 97       	sbiw	r30, 0x00	; 0
    11d8:	09 f0       	breq	.+2      	; 0x11dc <__vector_15+0x34>
    11da:	19 95       	eicall
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	bf 91       	pop	r27
    11e2:	af 91       	pop	r26
    11e4:	9f 91       	pop	r25
    11e6:	8f 91       	pop	r24
    11e8:	7f 91       	pop	r23
    11ea:	6f 91       	pop	r22
    11ec:	5f 91       	pop	r21
    11ee:	4f 91       	pop	r20
    11f0:	3f 91       	pop	r19
    11f2:	2f 91       	pop	r18
    11f4:	0f 90       	pop	r0
    11f6:	0b be       	out	0x3b, r0	; 59
    11f8:	0f 90       	pop	r0
    11fa:	0f be       	out	0x3f, r0	; 63
    11fc:	0f 90       	pop	r0
    11fe:	1f 90       	pop	r1
    1200:	18 95       	reti

00001202 <__vector_16>:
    1202:	1f 92       	push	r1
    1204:	0f 92       	push	r0
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	0f 92       	push	r0
    120a:	11 24       	eor	r1, r1
    120c:	0b b6       	in	r0, 0x3b	; 59
    120e:	0f 92       	push	r0
    1210:	2f 93       	push	r18
    1212:	3f 93       	push	r19
    1214:	4f 93       	push	r20
    1216:	5f 93       	push	r21
    1218:	6f 93       	push	r22
    121a:	7f 93       	push	r23
    121c:	8f 93       	push	r24
    121e:	9f 93       	push	r25
    1220:	af 93       	push	r26
    1222:	bf 93       	push	r27
    1224:	ef 93       	push	r30
    1226:	ff 93       	push	r31
    1228:	e0 91 e6 22 	lds	r30, 0x22E6	; 0x8022e6 <tc_tcc0_cca_callback>
    122c:	f0 91 e7 22 	lds	r31, 0x22E7	; 0x8022e7 <tc_tcc0_cca_callback+0x1>
    1230:	30 97       	sbiw	r30, 0x00	; 0
    1232:	09 f0       	breq	.+2      	; 0x1236 <__vector_16+0x34>
    1234:	19 95       	eicall
    1236:	ff 91       	pop	r31
    1238:	ef 91       	pop	r30
    123a:	bf 91       	pop	r27
    123c:	af 91       	pop	r26
    123e:	9f 91       	pop	r25
    1240:	8f 91       	pop	r24
    1242:	7f 91       	pop	r23
    1244:	6f 91       	pop	r22
    1246:	5f 91       	pop	r21
    1248:	4f 91       	pop	r20
    124a:	3f 91       	pop	r19
    124c:	2f 91       	pop	r18
    124e:	0f 90       	pop	r0
    1250:	0b be       	out	0x3b, r0	; 59
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <__vector_17>:
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	0b b6       	in	r0, 0x3b	; 59
    1268:	0f 92       	push	r0
    126a:	2f 93       	push	r18
    126c:	3f 93       	push	r19
    126e:	4f 93       	push	r20
    1270:	5f 93       	push	r21
    1272:	6f 93       	push	r22
    1274:	7f 93       	push	r23
    1276:	8f 93       	push	r24
    1278:	9f 93       	push	r25
    127a:	af 93       	push	r26
    127c:	bf 93       	push	r27
    127e:	ef 93       	push	r30
    1280:	ff 93       	push	r31
    1282:	e0 91 e4 22 	lds	r30, 0x22E4	; 0x8022e4 <tc_tcc0_ccb_callback>
    1286:	f0 91 e5 22 	lds	r31, 0x22E5	; 0x8022e5 <tc_tcc0_ccb_callback+0x1>
    128a:	30 97       	sbiw	r30, 0x00	; 0
    128c:	09 f0       	breq	.+2      	; 0x1290 <__vector_17+0x34>
    128e:	19 95       	eicall
    1290:	ff 91       	pop	r31
    1292:	ef 91       	pop	r30
    1294:	bf 91       	pop	r27
    1296:	af 91       	pop	r26
    1298:	9f 91       	pop	r25
    129a:	8f 91       	pop	r24
    129c:	7f 91       	pop	r23
    129e:	6f 91       	pop	r22
    12a0:	5f 91       	pop	r21
    12a2:	4f 91       	pop	r20
    12a4:	3f 91       	pop	r19
    12a6:	2f 91       	pop	r18
    12a8:	0f 90       	pop	r0
    12aa:	0b be       	out	0x3b, r0	; 59
    12ac:	0f 90       	pop	r0
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	0f 90       	pop	r0
    12b2:	1f 90       	pop	r1
    12b4:	18 95       	reti

000012b6 <__vector_18>:
    12b6:	1f 92       	push	r1
    12b8:	0f 92       	push	r0
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	0f 92       	push	r0
    12be:	11 24       	eor	r1, r1
    12c0:	0b b6       	in	r0, 0x3b	; 59
    12c2:	0f 92       	push	r0
    12c4:	2f 93       	push	r18
    12c6:	3f 93       	push	r19
    12c8:	4f 93       	push	r20
    12ca:	5f 93       	push	r21
    12cc:	6f 93       	push	r22
    12ce:	7f 93       	push	r23
    12d0:	8f 93       	push	r24
    12d2:	9f 93       	push	r25
    12d4:	af 93       	push	r26
    12d6:	bf 93       	push	r27
    12d8:	ef 93       	push	r30
    12da:	ff 93       	push	r31
    12dc:	e0 91 e2 22 	lds	r30, 0x22E2	; 0x8022e2 <tc_tcc0_ccc_callback>
    12e0:	f0 91 e3 22 	lds	r31, 0x22E3	; 0x8022e3 <tc_tcc0_ccc_callback+0x1>
    12e4:	30 97       	sbiw	r30, 0x00	; 0
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__vector_18+0x34>
    12e8:	19 95       	eicall
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0b be       	out	0x3b, r0	; 59
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_19>:
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	0b b6       	in	r0, 0x3b	; 59
    131c:	0f 92       	push	r0
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
    1336:	e0 91 e0 22 	lds	r30, 0x22E0	; 0x8022e0 <tc_tcc0_ccd_callback>
    133a:	f0 91 e1 22 	lds	r31, 0x22E1	; 0x8022e1 <tc_tcc0_ccd_callback+0x1>
    133e:	30 97       	sbiw	r30, 0x00	; 0
    1340:	09 f0       	breq	.+2      	; 0x1344 <__vector_19+0x34>
    1342:	19 95       	eicall
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0b be       	out	0x3b, r0	; 59
    1360:	0f 90       	pop	r0
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	0f 90       	pop	r0
    1366:	1f 90       	pop	r1
    1368:	18 95       	reti

0000136a <__vector_20>:
    136a:	1f 92       	push	r1
    136c:	0f 92       	push	r0
    136e:	0f b6       	in	r0, 0x3f	; 63
    1370:	0f 92       	push	r0
    1372:	11 24       	eor	r1, r1
    1374:	0b b6       	in	r0, 0x3b	; 59
    1376:	0f 92       	push	r0
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	ef 93       	push	r30
    138e:	ff 93       	push	r31
    1390:	e0 91 de 22 	lds	r30, 0x22DE	; 0x8022de <tc_tcc1_ovf_callback>
    1394:	f0 91 df 22 	lds	r31, 0x22DF	; 0x8022df <tc_tcc1_ovf_callback+0x1>
    1398:	30 97       	sbiw	r30, 0x00	; 0
    139a:	09 f0       	breq	.+2      	; 0x139e <__vector_20+0x34>
    139c:	19 95       	eicall
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0b be       	out	0x3b, r0	; 59
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	0f 90       	pop	r0
    13c0:	1f 90       	pop	r1
    13c2:	18 95       	reti

000013c4 <__vector_21>:
    13c4:	1f 92       	push	r1
    13c6:	0f 92       	push	r0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	0f 92       	push	r0
    13cc:	11 24       	eor	r1, r1
    13ce:	0b b6       	in	r0, 0x3b	; 59
    13d0:	0f 92       	push	r0
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
    13ea:	e0 91 dc 22 	lds	r30, 0x22DC	; 0x8022dc <tc_tcc1_err_callback>
    13ee:	f0 91 dd 22 	lds	r31, 0x22DD	; 0x8022dd <tc_tcc1_err_callback+0x1>
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__vector_21+0x34>
    13f6:	19 95       	eicall
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0b be       	out	0x3b, r0	; 59
    1414:	0f 90       	pop	r0
    1416:	0f be       	out	0x3f, r0	; 63
    1418:	0f 90       	pop	r0
    141a:	1f 90       	pop	r1
    141c:	18 95       	reti

0000141e <__vector_22>:
    141e:	1f 92       	push	r1
    1420:	0f 92       	push	r0
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	0f 92       	push	r0
    1426:	11 24       	eor	r1, r1
    1428:	0b b6       	in	r0, 0x3b	; 59
    142a:	0f 92       	push	r0
    142c:	2f 93       	push	r18
    142e:	3f 93       	push	r19
    1430:	4f 93       	push	r20
    1432:	5f 93       	push	r21
    1434:	6f 93       	push	r22
    1436:	7f 93       	push	r23
    1438:	8f 93       	push	r24
    143a:	9f 93       	push	r25
    143c:	af 93       	push	r26
    143e:	bf 93       	push	r27
    1440:	ef 93       	push	r30
    1442:	ff 93       	push	r31
    1444:	e0 91 da 22 	lds	r30, 0x22DA	; 0x8022da <tc_tcc1_cca_callback>
    1448:	f0 91 db 22 	lds	r31, 0x22DB	; 0x8022db <tc_tcc1_cca_callback+0x1>
    144c:	30 97       	sbiw	r30, 0x00	; 0
    144e:	09 f0       	breq	.+2      	; 0x1452 <__vector_22+0x34>
    1450:	19 95       	eicall
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	0f 90       	pop	r0
    146c:	0b be       	out	0x3b, r0	; 59
    146e:	0f 90       	pop	r0
    1470:	0f be       	out	0x3f, r0	; 63
    1472:	0f 90       	pop	r0
    1474:	1f 90       	pop	r1
    1476:	18 95       	reti

00001478 <__vector_23>:
    1478:	1f 92       	push	r1
    147a:	0f 92       	push	r0
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	0f 92       	push	r0
    1480:	11 24       	eor	r1, r1
    1482:	0b b6       	in	r0, 0x3b	; 59
    1484:	0f 92       	push	r0
    1486:	2f 93       	push	r18
    1488:	3f 93       	push	r19
    148a:	4f 93       	push	r20
    148c:	5f 93       	push	r21
    148e:	6f 93       	push	r22
    1490:	7f 93       	push	r23
    1492:	8f 93       	push	r24
    1494:	9f 93       	push	r25
    1496:	af 93       	push	r26
    1498:	bf 93       	push	r27
    149a:	ef 93       	push	r30
    149c:	ff 93       	push	r31
    149e:	e0 91 d8 22 	lds	r30, 0x22D8	; 0x8022d8 <tc_tcc1_ccb_callback>
    14a2:	f0 91 d9 22 	lds	r31, 0x22D9	; 0x8022d9 <tc_tcc1_ccb_callback+0x1>
    14a6:	30 97       	sbiw	r30, 0x00	; 0
    14a8:	09 f0       	breq	.+2      	; 0x14ac <__vector_23+0x34>
    14aa:	19 95       	eicall
    14ac:	ff 91       	pop	r31
    14ae:	ef 91       	pop	r30
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	9f 91       	pop	r25
    14b6:	8f 91       	pop	r24
    14b8:	7f 91       	pop	r23
    14ba:	6f 91       	pop	r22
    14bc:	5f 91       	pop	r21
    14be:	4f 91       	pop	r20
    14c0:	3f 91       	pop	r19
    14c2:	2f 91       	pop	r18
    14c4:	0f 90       	pop	r0
    14c6:	0b be       	out	0x3b, r0	; 59
    14c8:	0f 90       	pop	r0
    14ca:	0f be       	out	0x3f, r0	; 63
    14cc:	0f 90       	pop	r0
    14ce:	1f 90       	pop	r1
    14d0:	18 95       	reti

000014d2 <__vector_77>:
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	0b b6       	in	r0, 0x3b	; 59
    14de:	0f 92       	push	r0
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
    14f8:	e0 91 d6 22 	lds	r30, 0x22D6	; 0x8022d6 <tc_tcd0_ovf_callback>
    14fc:	f0 91 d7 22 	lds	r31, 0x22D7	; 0x8022d7 <tc_tcd0_ovf_callback+0x1>
    1500:	30 97       	sbiw	r30, 0x00	; 0
    1502:	09 f0       	breq	.+2      	; 0x1506 <__vector_77+0x34>
    1504:	19 95       	eicall
    1506:	ff 91       	pop	r31
    1508:	ef 91       	pop	r30
    150a:	bf 91       	pop	r27
    150c:	af 91       	pop	r26
    150e:	9f 91       	pop	r25
    1510:	8f 91       	pop	r24
    1512:	7f 91       	pop	r23
    1514:	6f 91       	pop	r22
    1516:	5f 91       	pop	r21
    1518:	4f 91       	pop	r20
    151a:	3f 91       	pop	r19
    151c:	2f 91       	pop	r18
    151e:	0f 90       	pop	r0
    1520:	0b be       	out	0x3b, r0	; 59
    1522:	0f 90       	pop	r0
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	0f 90       	pop	r0
    1528:	1f 90       	pop	r1
    152a:	18 95       	reti

0000152c <__vector_78>:
    152c:	1f 92       	push	r1
    152e:	0f 92       	push	r0
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	0f 92       	push	r0
    1534:	11 24       	eor	r1, r1
    1536:	0b b6       	in	r0, 0x3b	; 59
    1538:	0f 92       	push	r0
    153a:	2f 93       	push	r18
    153c:	3f 93       	push	r19
    153e:	4f 93       	push	r20
    1540:	5f 93       	push	r21
    1542:	6f 93       	push	r22
    1544:	7f 93       	push	r23
    1546:	8f 93       	push	r24
    1548:	9f 93       	push	r25
    154a:	af 93       	push	r26
    154c:	bf 93       	push	r27
    154e:	ef 93       	push	r30
    1550:	ff 93       	push	r31
    1552:	e0 91 d4 22 	lds	r30, 0x22D4	; 0x8022d4 <tc_tcd0_err_callback>
    1556:	f0 91 d5 22 	lds	r31, 0x22D5	; 0x8022d5 <tc_tcd0_err_callback+0x1>
    155a:	30 97       	sbiw	r30, 0x00	; 0
    155c:	09 f0       	breq	.+2      	; 0x1560 <__vector_78+0x34>
    155e:	19 95       	eicall
    1560:	ff 91       	pop	r31
    1562:	ef 91       	pop	r30
    1564:	bf 91       	pop	r27
    1566:	af 91       	pop	r26
    1568:	9f 91       	pop	r25
    156a:	8f 91       	pop	r24
    156c:	7f 91       	pop	r23
    156e:	6f 91       	pop	r22
    1570:	5f 91       	pop	r21
    1572:	4f 91       	pop	r20
    1574:	3f 91       	pop	r19
    1576:	2f 91       	pop	r18
    1578:	0f 90       	pop	r0
    157a:	0b be       	out	0x3b, r0	; 59
    157c:	0f 90       	pop	r0
    157e:	0f be       	out	0x3f, r0	; 63
    1580:	0f 90       	pop	r0
    1582:	1f 90       	pop	r1
    1584:	18 95       	reti

00001586 <__vector_79>:
    1586:	1f 92       	push	r1
    1588:	0f 92       	push	r0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	0f 92       	push	r0
    158e:	11 24       	eor	r1, r1
    1590:	0b b6       	in	r0, 0x3b	; 59
    1592:	0f 92       	push	r0
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
    15ac:	e0 91 d2 22 	lds	r30, 0x22D2	; 0x8022d2 <tc_tcd0_cca_callback>
    15b0:	f0 91 d3 22 	lds	r31, 0x22D3	; 0x8022d3 <tc_tcd0_cca_callback+0x1>
    15b4:	30 97       	sbiw	r30, 0x00	; 0
    15b6:	09 f0       	breq	.+2      	; 0x15ba <__vector_79+0x34>
    15b8:	19 95       	eicall
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0b be       	out	0x3b, r0	; 59
    15d6:	0f 90       	pop	r0
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	0f 90       	pop	r0
    15dc:	1f 90       	pop	r1
    15de:	18 95       	reti

000015e0 <__vector_80>:
    15e0:	1f 92       	push	r1
    15e2:	0f 92       	push	r0
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	0f 92       	push	r0
    15e8:	11 24       	eor	r1, r1
    15ea:	0b b6       	in	r0, 0x3b	; 59
    15ec:	0f 92       	push	r0
    15ee:	2f 93       	push	r18
    15f0:	3f 93       	push	r19
    15f2:	4f 93       	push	r20
    15f4:	5f 93       	push	r21
    15f6:	6f 93       	push	r22
    15f8:	7f 93       	push	r23
    15fa:	8f 93       	push	r24
    15fc:	9f 93       	push	r25
    15fe:	af 93       	push	r26
    1600:	bf 93       	push	r27
    1602:	ef 93       	push	r30
    1604:	ff 93       	push	r31
    1606:	e0 91 d0 22 	lds	r30, 0x22D0	; 0x8022d0 <tc_tcd0_ccb_callback>
    160a:	f0 91 d1 22 	lds	r31, 0x22D1	; 0x8022d1 <tc_tcd0_ccb_callback+0x1>
    160e:	30 97       	sbiw	r30, 0x00	; 0
    1610:	09 f0       	breq	.+2      	; 0x1614 <__vector_80+0x34>
    1612:	19 95       	eicall
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	bf 91       	pop	r27
    161a:	af 91       	pop	r26
    161c:	9f 91       	pop	r25
    161e:	8f 91       	pop	r24
    1620:	7f 91       	pop	r23
    1622:	6f 91       	pop	r22
    1624:	5f 91       	pop	r21
    1626:	4f 91       	pop	r20
    1628:	3f 91       	pop	r19
    162a:	2f 91       	pop	r18
    162c:	0f 90       	pop	r0
    162e:	0b be       	out	0x3b, r0	; 59
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <__vector_81>:
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	0b b6       	in	r0, 0x3b	; 59
    1646:	0f 92       	push	r0
    1648:	2f 93       	push	r18
    164a:	3f 93       	push	r19
    164c:	4f 93       	push	r20
    164e:	5f 93       	push	r21
    1650:	6f 93       	push	r22
    1652:	7f 93       	push	r23
    1654:	8f 93       	push	r24
    1656:	9f 93       	push	r25
    1658:	af 93       	push	r26
    165a:	bf 93       	push	r27
    165c:	ef 93       	push	r30
    165e:	ff 93       	push	r31
    1660:	e0 91 ce 22 	lds	r30, 0x22CE	; 0x8022ce <tc_tcd0_ccc_callback>
    1664:	f0 91 cf 22 	lds	r31, 0x22CF	; 0x8022cf <tc_tcd0_ccc_callback+0x1>
    1668:	30 97       	sbiw	r30, 0x00	; 0
    166a:	09 f0       	breq	.+2      	; 0x166e <__vector_81+0x34>
    166c:	19 95       	eicall
    166e:	ff 91       	pop	r31
    1670:	ef 91       	pop	r30
    1672:	bf 91       	pop	r27
    1674:	af 91       	pop	r26
    1676:	9f 91       	pop	r25
    1678:	8f 91       	pop	r24
    167a:	7f 91       	pop	r23
    167c:	6f 91       	pop	r22
    167e:	5f 91       	pop	r21
    1680:	4f 91       	pop	r20
    1682:	3f 91       	pop	r19
    1684:	2f 91       	pop	r18
    1686:	0f 90       	pop	r0
    1688:	0b be       	out	0x3b, r0	; 59
    168a:	0f 90       	pop	r0
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	0f 90       	pop	r0
    1690:	1f 90       	pop	r1
    1692:	18 95       	reti

00001694 <__vector_82>:
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	0b b6       	in	r0, 0x3b	; 59
    16a0:	0f 92       	push	r0
    16a2:	2f 93       	push	r18
    16a4:	3f 93       	push	r19
    16a6:	4f 93       	push	r20
    16a8:	5f 93       	push	r21
    16aa:	6f 93       	push	r22
    16ac:	7f 93       	push	r23
    16ae:	8f 93       	push	r24
    16b0:	9f 93       	push	r25
    16b2:	af 93       	push	r26
    16b4:	bf 93       	push	r27
    16b6:	ef 93       	push	r30
    16b8:	ff 93       	push	r31
    16ba:	e0 91 cc 22 	lds	r30, 0x22CC	; 0x8022cc <tc_tcd0_ccd_callback>
    16be:	f0 91 cd 22 	lds	r31, 0x22CD	; 0x8022cd <tc_tcd0_ccd_callback+0x1>
    16c2:	30 97       	sbiw	r30, 0x00	; 0
    16c4:	09 f0       	breq	.+2      	; 0x16c8 <__vector_82+0x34>
    16c6:	19 95       	eicall
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0b be       	out	0x3b, r0	; 59
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	0f 90       	pop	r0
    16ea:	1f 90       	pop	r1
    16ec:	18 95       	reti

000016ee <__vector_83>:
    16ee:	1f 92       	push	r1
    16f0:	0f 92       	push	r0
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	0f 92       	push	r0
    16f6:	11 24       	eor	r1, r1
    16f8:	0b b6       	in	r0, 0x3b	; 59
    16fa:	0f 92       	push	r0
    16fc:	2f 93       	push	r18
    16fe:	3f 93       	push	r19
    1700:	4f 93       	push	r20
    1702:	5f 93       	push	r21
    1704:	6f 93       	push	r22
    1706:	7f 93       	push	r23
    1708:	8f 93       	push	r24
    170a:	9f 93       	push	r25
    170c:	af 93       	push	r26
    170e:	bf 93       	push	r27
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	e0 91 ca 22 	lds	r30, 0x22CA	; 0x8022ca <tc_tcd1_ovf_callback>
    1718:	f0 91 cb 22 	lds	r31, 0x22CB	; 0x8022cb <tc_tcd1_ovf_callback+0x1>
    171c:	30 97       	sbiw	r30, 0x00	; 0
    171e:	09 f0       	breq	.+2      	; 0x1722 <__vector_83+0x34>
    1720:	19 95       	eicall
    1722:	ff 91       	pop	r31
    1724:	ef 91       	pop	r30
    1726:	bf 91       	pop	r27
    1728:	af 91       	pop	r26
    172a:	9f 91       	pop	r25
    172c:	8f 91       	pop	r24
    172e:	7f 91       	pop	r23
    1730:	6f 91       	pop	r22
    1732:	5f 91       	pop	r21
    1734:	4f 91       	pop	r20
    1736:	3f 91       	pop	r19
    1738:	2f 91       	pop	r18
    173a:	0f 90       	pop	r0
    173c:	0b be       	out	0x3b, r0	; 59
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_84>:
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	0b b6       	in	r0, 0x3b	; 59
    1754:	0f 92       	push	r0
    1756:	2f 93       	push	r18
    1758:	3f 93       	push	r19
    175a:	4f 93       	push	r20
    175c:	5f 93       	push	r21
    175e:	6f 93       	push	r22
    1760:	7f 93       	push	r23
    1762:	8f 93       	push	r24
    1764:	9f 93       	push	r25
    1766:	af 93       	push	r26
    1768:	bf 93       	push	r27
    176a:	ef 93       	push	r30
    176c:	ff 93       	push	r31
    176e:	e0 91 c8 22 	lds	r30, 0x22C8	; 0x8022c8 <tc_tcd1_err_callback>
    1772:	f0 91 c9 22 	lds	r31, 0x22C9	; 0x8022c9 <tc_tcd1_err_callback+0x1>
    1776:	30 97       	sbiw	r30, 0x00	; 0
    1778:	09 f0       	breq	.+2      	; 0x177c <__vector_84+0x34>
    177a:	19 95       	eicall
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0b be       	out	0x3b, r0	; 59
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_85>:
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	0b b6       	in	r0, 0x3b	; 59
    17ae:	0f 92       	push	r0
    17b0:	2f 93       	push	r18
    17b2:	3f 93       	push	r19
    17b4:	4f 93       	push	r20
    17b6:	5f 93       	push	r21
    17b8:	6f 93       	push	r22
    17ba:	7f 93       	push	r23
    17bc:	8f 93       	push	r24
    17be:	9f 93       	push	r25
    17c0:	af 93       	push	r26
    17c2:	bf 93       	push	r27
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	e0 91 c6 22 	lds	r30, 0x22C6	; 0x8022c6 <tc_tcd1_cca_callback>
    17cc:	f0 91 c7 22 	lds	r31, 0x22C7	; 0x8022c7 <tc_tcd1_cca_callback+0x1>
    17d0:	30 97       	sbiw	r30, 0x00	; 0
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <__vector_85+0x34>
    17d4:	19 95       	eicall
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0b be       	out	0x3b, r0	; 59
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <__vector_86>:
    17fc:	1f 92       	push	r1
    17fe:	0f 92       	push	r0
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	0f 92       	push	r0
    1804:	11 24       	eor	r1, r1
    1806:	0b b6       	in	r0, 0x3b	; 59
    1808:	0f 92       	push	r0
    180a:	2f 93       	push	r18
    180c:	3f 93       	push	r19
    180e:	4f 93       	push	r20
    1810:	5f 93       	push	r21
    1812:	6f 93       	push	r22
    1814:	7f 93       	push	r23
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	af 93       	push	r26
    181c:	bf 93       	push	r27
    181e:	ef 93       	push	r30
    1820:	ff 93       	push	r31
    1822:	e0 91 c4 22 	lds	r30, 0x22C4	; 0x8022c4 <tc_tcd1_ccb_callback>
    1826:	f0 91 c5 22 	lds	r31, 0x22C5	; 0x8022c5 <tc_tcd1_ccb_callback+0x1>
    182a:	30 97       	sbiw	r30, 0x00	; 0
    182c:	09 f0       	breq	.+2      	; 0x1830 <__vector_86+0x34>
    182e:	19 95       	eicall
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0b be       	out	0x3b, r0	; 59
    184c:	0f 90       	pop	r0
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	0f 90       	pop	r0
    1852:	1f 90       	pop	r1
    1854:	18 95       	reti

00001856 <__vector_47>:
    1856:	1f 92       	push	r1
    1858:	0f 92       	push	r0
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	0f 92       	push	r0
    185e:	11 24       	eor	r1, r1
    1860:	0b b6       	in	r0, 0x3b	; 59
    1862:	0f 92       	push	r0
    1864:	2f 93       	push	r18
    1866:	3f 93       	push	r19
    1868:	4f 93       	push	r20
    186a:	5f 93       	push	r21
    186c:	6f 93       	push	r22
    186e:	7f 93       	push	r23
    1870:	8f 93       	push	r24
    1872:	9f 93       	push	r25
    1874:	af 93       	push	r26
    1876:	bf 93       	push	r27
    1878:	ef 93       	push	r30
    187a:	ff 93       	push	r31
    187c:	e0 91 c2 22 	lds	r30, 0x22C2	; 0x8022c2 <tc_tce0_ovf_callback>
    1880:	f0 91 c3 22 	lds	r31, 0x22C3	; 0x8022c3 <tc_tce0_ovf_callback+0x1>
    1884:	30 97       	sbiw	r30, 0x00	; 0
    1886:	09 f0       	breq	.+2      	; 0x188a <__vector_47+0x34>
    1888:	19 95       	eicall
    188a:	ff 91       	pop	r31
    188c:	ef 91       	pop	r30
    188e:	bf 91       	pop	r27
    1890:	af 91       	pop	r26
    1892:	9f 91       	pop	r25
    1894:	8f 91       	pop	r24
    1896:	7f 91       	pop	r23
    1898:	6f 91       	pop	r22
    189a:	5f 91       	pop	r21
    189c:	4f 91       	pop	r20
    189e:	3f 91       	pop	r19
    18a0:	2f 91       	pop	r18
    18a2:	0f 90       	pop	r0
    18a4:	0b be       	out	0x3b, r0	; 59
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <__vector_48>:
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	0b b6       	in	r0, 0x3b	; 59
    18bc:	0f 92       	push	r0
    18be:	2f 93       	push	r18
    18c0:	3f 93       	push	r19
    18c2:	4f 93       	push	r20
    18c4:	5f 93       	push	r21
    18c6:	6f 93       	push	r22
    18c8:	7f 93       	push	r23
    18ca:	8f 93       	push	r24
    18cc:	9f 93       	push	r25
    18ce:	af 93       	push	r26
    18d0:	bf 93       	push	r27
    18d2:	ef 93       	push	r30
    18d4:	ff 93       	push	r31
    18d6:	e0 91 c0 22 	lds	r30, 0x22C0	; 0x8022c0 <tc_tce0_err_callback>
    18da:	f0 91 c1 22 	lds	r31, 0x22C1	; 0x8022c1 <tc_tce0_err_callback+0x1>
    18de:	30 97       	sbiw	r30, 0x00	; 0
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <__vector_48+0x34>
    18e2:	19 95       	eicall
    18e4:	ff 91       	pop	r31
    18e6:	ef 91       	pop	r30
    18e8:	bf 91       	pop	r27
    18ea:	af 91       	pop	r26
    18ec:	9f 91       	pop	r25
    18ee:	8f 91       	pop	r24
    18f0:	7f 91       	pop	r23
    18f2:	6f 91       	pop	r22
    18f4:	5f 91       	pop	r21
    18f6:	4f 91       	pop	r20
    18f8:	3f 91       	pop	r19
    18fa:	2f 91       	pop	r18
    18fc:	0f 90       	pop	r0
    18fe:	0b be       	out	0x3b, r0	; 59
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_49>:
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	0b b6       	in	r0, 0x3b	; 59
    1916:	0f 92       	push	r0
    1918:	2f 93       	push	r18
    191a:	3f 93       	push	r19
    191c:	4f 93       	push	r20
    191e:	5f 93       	push	r21
    1920:	6f 93       	push	r22
    1922:	7f 93       	push	r23
    1924:	8f 93       	push	r24
    1926:	9f 93       	push	r25
    1928:	af 93       	push	r26
    192a:	bf 93       	push	r27
    192c:	ef 93       	push	r30
    192e:	ff 93       	push	r31
    1930:	e0 91 be 22 	lds	r30, 0x22BE	; 0x8022be <tc_tce0_cca_callback>
    1934:	f0 91 bf 22 	lds	r31, 0x22BF	; 0x8022bf <tc_tce0_cca_callback+0x1>
    1938:	30 97       	sbiw	r30, 0x00	; 0
    193a:	09 f0       	breq	.+2      	; 0x193e <__vector_49+0x34>
    193c:	19 95       	eicall
    193e:	ff 91       	pop	r31
    1940:	ef 91       	pop	r30
    1942:	bf 91       	pop	r27
    1944:	af 91       	pop	r26
    1946:	9f 91       	pop	r25
    1948:	8f 91       	pop	r24
    194a:	7f 91       	pop	r23
    194c:	6f 91       	pop	r22
    194e:	5f 91       	pop	r21
    1950:	4f 91       	pop	r20
    1952:	3f 91       	pop	r19
    1954:	2f 91       	pop	r18
    1956:	0f 90       	pop	r0
    1958:	0b be       	out	0x3b, r0	; 59
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <__vector_50>:
    1964:	1f 92       	push	r1
    1966:	0f 92       	push	r0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	0f 92       	push	r0
    196c:	11 24       	eor	r1, r1
    196e:	0b b6       	in	r0, 0x3b	; 59
    1970:	0f 92       	push	r0
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	ef 93       	push	r30
    1988:	ff 93       	push	r31
    198a:	e0 91 bc 22 	lds	r30, 0x22BC	; 0x8022bc <tc_tce0_ccb_callback>
    198e:	f0 91 bd 22 	lds	r31, 0x22BD	; 0x8022bd <tc_tce0_ccb_callback+0x1>
    1992:	30 97       	sbiw	r30, 0x00	; 0
    1994:	09 f0       	breq	.+2      	; 0x1998 <__vector_50+0x34>
    1996:	19 95       	eicall
    1998:	ff 91       	pop	r31
    199a:	ef 91       	pop	r30
    199c:	bf 91       	pop	r27
    199e:	af 91       	pop	r26
    19a0:	9f 91       	pop	r25
    19a2:	8f 91       	pop	r24
    19a4:	7f 91       	pop	r23
    19a6:	6f 91       	pop	r22
    19a8:	5f 91       	pop	r21
    19aa:	4f 91       	pop	r20
    19ac:	3f 91       	pop	r19
    19ae:	2f 91       	pop	r18
    19b0:	0f 90       	pop	r0
    19b2:	0b be       	out	0x3b, r0	; 59
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <__vector_51>:
    19be:	1f 92       	push	r1
    19c0:	0f 92       	push	r0
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	0f 92       	push	r0
    19c6:	11 24       	eor	r1, r1
    19c8:	0b b6       	in	r0, 0x3b	; 59
    19ca:	0f 92       	push	r0
    19cc:	2f 93       	push	r18
    19ce:	3f 93       	push	r19
    19d0:	4f 93       	push	r20
    19d2:	5f 93       	push	r21
    19d4:	6f 93       	push	r22
    19d6:	7f 93       	push	r23
    19d8:	8f 93       	push	r24
    19da:	9f 93       	push	r25
    19dc:	af 93       	push	r26
    19de:	bf 93       	push	r27
    19e0:	ef 93       	push	r30
    19e2:	ff 93       	push	r31
    19e4:	e0 91 ba 22 	lds	r30, 0x22BA	; 0x8022ba <tc_tce0_ccc_callback>
    19e8:	f0 91 bb 22 	lds	r31, 0x22BB	; 0x8022bb <tc_tce0_ccc_callback+0x1>
    19ec:	30 97       	sbiw	r30, 0x00	; 0
    19ee:	09 f0       	breq	.+2      	; 0x19f2 <__vector_51+0x34>
    19f0:	19 95       	eicall
    19f2:	ff 91       	pop	r31
    19f4:	ef 91       	pop	r30
    19f6:	bf 91       	pop	r27
    19f8:	af 91       	pop	r26
    19fa:	9f 91       	pop	r25
    19fc:	8f 91       	pop	r24
    19fe:	7f 91       	pop	r23
    1a00:	6f 91       	pop	r22
    1a02:	5f 91       	pop	r21
    1a04:	4f 91       	pop	r20
    1a06:	3f 91       	pop	r19
    1a08:	2f 91       	pop	r18
    1a0a:	0f 90       	pop	r0
    1a0c:	0b be       	out	0x3b, r0	; 59
    1a0e:	0f 90       	pop	r0
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	0f 90       	pop	r0
    1a14:	1f 90       	pop	r1
    1a16:	18 95       	reti

00001a18 <__vector_52>:
    1a18:	1f 92       	push	r1
    1a1a:	0f 92       	push	r0
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	0f 92       	push	r0
    1a20:	11 24       	eor	r1, r1
    1a22:	0b b6       	in	r0, 0x3b	; 59
    1a24:	0f 92       	push	r0
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
    1a3e:	e0 91 b8 22 	lds	r30, 0x22B8	; 0x8022b8 <tc_tce0_ccd_callback>
    1a42:	f0 91 b9 22 	lds	r31, 0x22B9	; 0x8022b9 <tc_tce0_ccd_callback+0x1>
    1a46:	30 97       	sbiw	r30, 0x00	; 0
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <__vector_52+0x34>
    1a4a:	19 95       	eicall
    1a4c:	ff 91       	pop	r31
    1a4e:	ef 91       	pop	r30
    1a50:	bf 91       	pop	r27
    1a52:	af 91       	pop	r26
    1a54:	9f 91       	pop	r25
    1a56:	8f 91       	pop	r24
    1a58:	7f 91       	pop	r23
    1a5a:	6f 91       	pop	r22
    1a5c:	5f 91       	pop	r21
    1a5e:	4f 91       	pop	r20
    1a60:	3f 91       	pop	r19
    1a62:	2f 91       	pop	r18
    1a64:	0f 90       	pop	r0
    1a66:	0b be       	out	0x3b, r0	; 59
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <__vector_53>:
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	0b b6       	in	r0, 0x3b	; 59
    1a7e:	0f 92       	push	r0
    1a80:	2f 93       	push	r18
    1a82:	3f 93       	push	r19
    1a84:	4f 93       	push	r20
    1a86:	5f 93       	push	r21
    1a88:	6f 93       	push	r22
    1a8a:	7f 93       	push	r23
    1a8c:	8f 93       	push	r24
    1a8e:	9f 93       	push	r25
    1a90:	af 93       	push	r26
    1a92:	bf 93       	push	r27
    1a94:	ef 93       	push	r30
    1a96:	ff 93       	push	r31
    1a98:	e0 91 b6 22 	lds	r30, 0x22B6	; 0x8022b6 <tc_tce1_ovf_callback>
    1a9c:	f0 91 b7 22 	lds	r31, 0x22B7	; 0x8022b7 <tc_tce1_ovf_callback+0x1>
    1aa0:	30 97       	sbiw	r30, 0x00	; 0
    1aa2:	09 f0       	breq	.+2      	; 0x1aa6 <__vector_53+0x34>
    1aa4:	19 95       	eicall
    1aa6:	ff 91       	pop	r31
    1aa8:	ef 91       	pop	r30
    1aaa:	bf 91       	pop	r27
    1aac:	af 91       	pop	r26
    1aae:	9f 91       	pop	r25
    1ab0:	8f 91       	pop	r24
    1ab2:	7f 91       	pop	r23
    1ab4:	6f 91       	pop	r22
    1ab6:	5f 91       	pop	r21
    1ab8:	4f 91       	pop	r20
    1aba:	3f 91       	pop	r19
    1abc:	2f 91       	pop	r18
    1abe:	0f 90       	pop	r0
    1ac0:	0b be       	out	0x3b, r0	; 59
    1ac2:	0f 90       	pop	r0
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	0f 90       	pop	r0
    1ac8:	1f 90       	pop	r1
    1aca:	18 95       	reti

00001acc <__vector_54>:
    1acc:	1f 92       	push	r1
    1ace:	0f 92       	push	r0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	0f 92       	push	r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	0b b6       	in	r0, 0x3b	; 59
    1ad8:	0f 92       	push	r0
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	e0 91 b4 22 	lds	r30, 0x22B4	; 0x8022b4 <tc_tce1_err_callback>
    1af6:	f0 91 b5 22 	lds	r31, 0x22B5	; 0x8022b5 <tc_tce1_err_callback+0x1>
    1afa:	30 97       	sbiw	r30, 0x00	; 0
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__vector_54+0x34>
    1afe:	19 95       	eicall
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0b be       	out	0x3b, r0	; 59
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0
    1b22:	1f 90       	pop	r1
    1b24:	18 95       	reti

00001b26 <__vector_55>:
    1b26:	1f 92       	push	r1
    1b28:	0f 92       	push	r0
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	0f 92       	push	r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	0b b6       	in	r0, 0x3b	; 59
    1b32:	0f 92       	push	r0
    1b34:	2f 93       	push	r18
    1b36:	3f 93       	push	r19
    1b38:	4f 93       	push	r20
    1b3a:	5f 93       	push	r21
    1b3c:	6f 93       	push	r22
    1b3e:	7f 93       	push	r23
    1b40:	8f 93       	push	r24
    1b42:	9f 93       	push	r25
    1b44:	af 93       	push	r26
    1b46:	bf 93       	push	r27
    1b48:	ef 93       	push	r30
    1b4a:	ff 93       	push	r31
    1b4c:	e0 91 b2 22 	lds	r30, 0x22B2	; 0x8022b2 <tc_tce1_cca_callback>
    1b50:	f0 91 b3 22 	lds	r31, 0x22B3	; 0x8022b3 <tc_tce1_cca_callback+0x1>
    1b54:	30 97       	sbiw	r30, 0x00	; 0
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <__vector_55+0x34>
    1b58:	19 95       	eicall
    1b5a:	ff 91       	pop	r31
    1b5c:	ef 91       	pop	r30
    1b5e:	bf 91       	pop	r27
    1b60:	af 91       	pop	r26
    1b62:	9f 91       	pop	r25
    1b64:	8f 91       	pop	r24
    1b66:	7f 91       	pop	r23
    1b68:	6f 91       	pop	r22
    1b6a:	5f 91       	pop	r21
    1b6c:	4f 91       	pop	r20
    1b6e:	3f 91       	pop	r19
    1b70:	2f 91       	pop	r18
    1b72:	0f 90       	pop	r0
    1b74:	0b be       	out	0x3b, r0	; 59
    1b76:	0f 90       	pop	r0
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	0f 90       	pop	r0
    1b7c:	1f 90       	pop	r1
    1b7e:	18 95       	reti

00001b80 <__vector_56>:
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	0f 92       	push	r0
    1b88:	11 24       	eor	r1, r1
    1b8a:	0b b6       	in	r0, 0x3b	; 59
    1b8c:	0f 92       	push	r0
    1b8e:	2f 93       	push	r18
    1b90:	3f 93       	push	r19
    1b92:	4f 93       	push	r20
    1b94:	5f 93       	push	r21
    1b96:	6f 93       	push	r22
    1b98:	7f 93       	push	r23
    1b9a:	8f 93       	push	r24
    1b9c:	9f 93       	push	r25
    1b9e:	af 93       	push	r26
    1ba0:	bf 93       	push	r27
    1ba2:	ef 93       	push	r30
    1ba4:	ff 93       	push	r31
    1ba6:	e0 91 b0 22 	lds	r30, 0x22B0	; 0x8022b0 <tc_tce1_ccb_callback>
    1baa:	f0 91 b1 22 	lds	r31, 0x22B1	; 0x8022b1 <tc_tce1_ccb_callback+0x1>
    1bae:	30 97       	sbiw	r30, 0x00	; 0
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <__vector_56+0x34>
    1bb2:	19 95       	eicall
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	0f 90       	pop	r0
    1bce:	0b be       	out	0x3b, r0	; 59
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <__vector_108>:
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	0b b6       	in	r0, 0x3b	; 59
    1be6:	0f 92       	push	r0
    1be8:	2f 93       	push	r18
    1bea:	3f 93       	push	r19
    1bec:	4f 93       	push	r20
    1bee:	5f 93       	push	r21
    1bf0:	6f 93       	push	r22
    1bf2:	7f 93       	push	r23
    1bf4:	8f 93       	push	r24
    1bf6:	9f 93       	push	r25
    1bf8:	af 93       	push	r26
    1bfa:	bf 93       	push	r27
    1bfc:	ef 93       	push	r30
    1bfe:	ff 93       	push	r31
    1c00:	e0 91 ae 22 	lds	r30, 0x22AE	; 0x8022ae <tc_tcf0_ovf_callback>
    1c04:	f0 91 af 22 	lds	r31, 0x22AF	; 0x8022af <tc_tcf0_ovf_callback+0x1>
    1c08:	30 97       	sbiw	r30, 0x00	; 0
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <__vector_108+0x34>
    1c0c:	19 95       	eicall
    1c0e:	ff 91       	pop	r31
    1c10:	ef 91       	pop	r30
    1c12:	bf 91       	pop	r27
    1c14:	af 91       	pop	r26
    1c16:	9f 91       	pop	r25
    1c18:	8f 91       	pop	r24
    1c1a:	7f 91       	pop	r23
    1c1c:	6f 91       	pop	r22
    1c1e:	5f 91       	pop	r21
    1c20:	4f 91       	pop	r20
    1c22:	3f 91       	pop	r19
    1c24:	2f 91       	pop	r18
    1c26:	0f 90       	pop	r0
    1c28:	0b be       	out	0x3b, r0	; 59
    1c2a:	0f 90       	pop	r0
    1c2c:	0f be       	out	0x3f, r0	; 63
    1c2e:	0f 90       	pop	r0
    1c30:	1f 90       	pop	r1
    1c32:	18 95       	reti

00001c34 <__vector_109>:
    1c34:	1f 92       	push	r1
    1c36:	0f 92       	push	r0
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	0b b6       	in	r0, 0x3b	; 59
    1c40:	0f 92       	push	r0
    1c42:	2f 93       	push	r18
    1c44:	3f 93       	push	r19
    1c46:	4f 93       	push	r20
    1c48:	5f 93       	push	r21
    1c4a:	6f 93       	push	r22
    1c4c:	7f 93       	push	r23
    1c4e:	8f 93       	push	r24
    1c50:	9f 93       	push	r25
    1c52:	af 93       	push	r26
    1c54:	bf 93       	push	r27
    1c56:	ef 93       	push	r30
    1c58:	ff 93       	push	r31
    1c5a:	e0 91 ac 22 	lds	r30, 0x22AC	; 0x8022ac <tc_tcf0_err_callback>
    1c5e:	f0 91 ad 22 	lds	r31, 0x22AD	; 0x8022ad <tc_tcf0_err_callback+0x1>
    1c62:	30 97       	sbiw	r30, 0x00	; 0
    1c64:	09 f0       	breq	.+2      	; 0x1c68 <__vector_109+0x34>
    1c66:	19 95       	eicall
    1c68:	ff 91       	pop	r31
    1c6a:	ef 91       	pop	r30
    1c6c:	bf 91       	pop	r27
    1c6e:	af 91       	pop	r26
    1c70:	9f 91       	pop	r25
    1c72:	8f 91       	pop	r24
    1c74:	7f 91       	pop	r23
    1c76:	6f 91       	pop	r22
    1c78:	5f 91       	pop	r21
    1c7a:	4f 91       	pop	r20
    1c7c:	3f 91       	pop	r19
    1c7e:	2f 91       	pop	r18
    1c80:	0f 90       	pop	r0
    1c82:	0b be       	out	0x3b, r0	; 59
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	0f 90       	pop	r0
    1c8a:	1f 90       	pop	r1
    1c8c:	18 95       	reti

00001c8e <__vector_110>:
    1c8e:	1f 92       	push	r1
    1c90:	0f 92       	push	r0
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	0f 92       	push	r0
    1c96:	11 24       	eor	r1, r1
    1c98:	0b b6       	in	r0, 0x3b	; 59
    1c9a:	0f 92       	push	r0
    1c9c:	2f 93       	push	r18
    1c9e:	3f 93       	push	r19
    1ca0:	4f 93       	push	r20
    1ca2:	5f 93       	push	r21
    1ca4:	6f 93       	push	r22
    1ca6:	7f 93       	push	r23
    1ca8:	8f 93       	push	r24
    1caa:	9f 93       	push	r25
    1cac:	af 93       	push	r26
    1cae:	bf 93       	push	r27
    1cb0:	ef 93       	push	r30
    1cb2:	ff 93       	push	r31
    1cb4:	e0 91 aa 22 	lds	r30, 0x22AA	; 0x8022aa <tc_tcf0_cca_callback>
    1cb8:	f0 91 ab 22 	lds	r31, 0x22AB	; 0x8022ab <tc_tcf0_cca_callback+0x1>
    1cbc:	30 97       	sbiw	r30, 0x00	; 0
    1cbe:	09 f0       	breq	.+2      	; 0x1cc2 <__vector_110+0x34>
    1cc0:	19 95       	eicall
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	bf 91       	pop	r27
    1cc8:	af 91       	pop	r26
    1cca:	9f 91       	pop	r25
    1ccc:	8f 91       	pop	r24
    1cce:	7f 91       	pop	r23
    1cd0:	6f 91       	pop	r22
    1cd2:	5f 91       	pop	r21
    1cd4:	4f 91       	pop	r20
    1cd6:	3f 91       	pop	r19
    1cd8:	2f 91       	pop	r18
    1cda:	0f 90       	pop	r0
    1cdc:	0b be       	out	0x3b, r0	; 59
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <__vector_111>:
    1ce8:	1f 92       	push	r1
    1cea:	0f 92       	push	r0
    1cec:	0f b6       	in	r0, 0x3f	; 63
    1cee:	0f 92       	push	r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	0b b6       	in	r0, 0x3b	; 59
    1cf4:	0f 92       	push	r0
    1cf6:	2f 93       	push	r18
    1cf8:	3f 93       	push	r19
    1cfa:	4f 93       	push	r20
    1cfc:	5f 93       	push	r21
    1cfe:	6f 93       	push	r22
    1d00:	7f 93       	push	r23
    1d02:	8f 93       	push	r24
    1d04:	9f 93       	push	r25
    1d06:	af 93       	push	r26
    1d08:	bf 93       	push	r27
    1d0a:	ef 93       	push	r30
    1d0c:	ff 93       	push	r31
    1d0e:	e0 91 a8 22 	lds	r30, 0x22A8	; 0x8022a8 <tc_tcf0_ccb_callback>
    1d12:	f0 91 a9 22 	lds	r31, 0x22A9	; 0x8022a9 <tc_tcf0_ccb_callback+0x1>
    1d16:	30 97       	sbiw	r30, 0x00	; 0
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <__vector_111+0x34>
    1d1a:	19 95       	eicall
    1d1c:	ff 91       	pop	r31
    1d1e:	ef 91       	pop	r30
    1d20:	bf 91       	pop	r27
    1d22:	af 91       	pop	r26
    1d24:	9f 91       	pop	r25
    1d26:	8f 91       	pop	r24
    1d28:	7f 91       	pop	r23
    1d2a:	6f 91       	pop	r22
    1d2c:	5f 91       	pop	r21
    1d2e:	4f 91       	pop	r20
    1d30:	3f 91       	pop	r19
    1d32:	2f 91       	pop	r18
    1d34:	0f 90       	pop	r0
    1d36:	0b be       	out	0x3b, r0	; 59
    1d38:	0f 90       	pop	r0
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	0f 90       	pop	r0
    1d3e:	1f 90       	pop	r1
    1d40:	18 95       	reti

00001d42 <__vector_112>:
    1d42:	1f 92       	push	r1
    1d44:	0f 92       	push	r0
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	0f 92       	push	r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	0b b6       	in	r0, 0x3b	; 59
    1d4e:	0f 92       	push	r0
    1d50:	2f 93       	push	r18
    1d52:	3f 93       	push	r19
    1d54:	4f 93       	push	r20
    1d56:	5f 93       	push	r21
    1d58:	6f 93       	push	r22
    1d5a:	7f 93       	push	r23
    1d5c:	8f 93       	push	r24
    1d5e:	9f 93       	push	r25
    1d60:	af 93       	push	r26
    1d62:	bf 93       	push	r27
    1d64:	ef 93       	push	r30
    1d66:	ff 93       	push	r31
    1d68:	e0 91 a6 22 	lds	r30, 0x22A6	; 0x8022a6 <tc_tcf0_ccc_callback>
    1d6c:	f0 91 a7 22 	lds	r31, 0x22A7	; 0x8022a7 <tc_tcf0_ccc_callback+0x1>
    1d70:	30 97       	sbiw	r30, 0x00	; 0
    1d72:	09 f0       	breq	.+2      	; 0x1d76 <__vector_112+0x34>
    1d74:	19 95       	eicall
    1d76:	ff 91       	pop	r31
    1d78:	ef 91       	pop	r30
    1d7a:	bf 91       	pop	r27
    1d7c:	af 91       	pop	r26
    1d7e:	9f 91       	pop	r25
    1d80:	8f 91       	pop	r24
    1d82:	7f 91       	pop	r23
    1d84:	6f 91       	pop	r22
    1d86:	5f 91       	pop	r21
    1d88:	4f 91       	pop	r20
    1d8a:	3f 91       	pop	r19
    1d8c:	2f 91       	pop	r18
    1d8e:	0f 90       	pop	r0
    1d90:	0b be       	out	0x3b, r0	; 59
    1d92:	0f 90       	pop	r0
    1d94:	0f be       	out	0x3f, r0	; 63
    1d96:	0f 90       	pop	r0
    1d98:	1f 90       	pop	r1
    1d9a:	18 95       	reti

00001d9c <__vector_113>:
    1d9c:	1f 92       	push	r1
    1d9e:	0f 92       	push	r0
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	0f 92       	push	r0
    1da4:	11 24       	eor	r1, r1
    1da6:	0b b6       	in	r0, 0x3b	; 59
    1da8:	0f 92       	push	r0
    1daa:	2f 93       	push	r18
    1dac:	3f 93       	push	r19
    1dae:	4f 93       	push	r20
    1db0:	5f 93       	push	r21
    1db2:	6f 93       	push	r22
    1db4:	7f 93       	push	r23
    1db6:	8f 93       	push	r24
    1db8:	9f 93       	push	r25
    1dba:	af 93       	push	r26
    1dbc:	bf 93       	push	r27
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    1dc2:	e0 91 a4 22 	lds	r30, 0x22A4	; 0x8022a4 <tc_tcf0_ccd_callback>
    1dc6:	f0 91 a5 22 	lds	r31, 0x22A5	; 0x8022a5 <tc_tcf0_ccd_callback+0x1>
    1dca:	30 97       	sbiw	r30, 0x00	; 0
    1dcc:	09 f0       	breq	.+2      	; 0x1dd0 <__vector_113+0x34>
    1dce:	19 95       	eicall
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0b be       	out	0x3b, r0	; 59
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	0f 90       	pop	r0
    1df2:	1f 90       	pop	r1
    1df4:	18 95       	reti

00001df6 <tc_enable>:
    1df6:	1f 93       	push	r17
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	1f 92       	push	r1
    1dfe:	1f 92       	push	r1
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	2f b7       	in	r18, 0x3f	; 63
    1e06:	2a 83       	std	Y+2, r18	; 0x02
    1e08:	f8 94       	cli
    1e0a:	1a 81       	ldd	r17, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	39 2f       	mov	r19, r25
    1e10:	21 15       	cp	r18, r1
    1e12:	88 e0       	ldi	r24, 0x08	; 8
    1e14:	38 07       	cpc	r19, r24
    1e16:	39 f4       	brne	.+14     	; 0x1e26 <tc_enable+0x30>
    1e18:	61 e0       	ldi	r22, 0x01	; 1
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	82 d9       	rcall	.-3324   	; 0x1122 <sysclk_enable_module>
    1e1e:	64 e0       	ldi	r22, 0x04	; 4
    1e20:	83 e0       	ldi	r24, 0x03	; 3
    1e22:	7f d9       	rcall	.-3330   	; 0x1122 <sysclk_enable_module>
    1e24:	43 c0       	rjmp	.+134    	; 0x1eac <tc_enable+0xb6>
    1e26:	20 34       	cpi	r18, 0x40	; 64
    1e28:	88 e0       	ldi	r24, 0x08	; 8
    1e2a:	38 07       	cpc	r19, r24
    1e2c:	39 f4       	brne	.+14     	; 0x1e3c <tc_enable+0x46>
    1e2e:	62 e0       	ldi	r22, 0x02	; 2
    1e30:	83 e0       	ldi	r24, 0x03	; 3
    1e32:	77 d9       	rcall	.-3346   	; 0x1122 <sysclk_enable_module>
    1e34:	64 e0       	ldi	r22, 0x04	; 4
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	74 d9       	rcall	.-3352   	; 0x1122 <sysclk_enable_module>
    1e3a:	38 c0       	rjmp	.+112    	; 0x1eac <tc_enable+0xb6>
    1e3c:	21 15       	cp	r18, r1
    1e3e:	89 e0       	ldi	r24, 0x09	; 9
    1e40:	38 07       	cpc	r19, r24
    1e42:	39 f4       	brne	.+14     	; 0x1e52 <tc_enable+0x5c>
    1e44:	61 e0       	ldi	r22, 0x01	; 1
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    1e48:	6c d9       	rcall	.-3368   	; 0x1122 <sysclk_enable_module>
    1e4a:	64 e0       	ldi	r22, 0x04	; 4
    1e4c:	84 e0       	ldi	r24, 0x04	; 4
    1e4e:	69 d9       	rcall	.-3374   	; 0x1122 <sysclk_enable_module>
    1e50:	2d c0       	rjmp	.+90     	; 0x1eac <tc_enable+0xb6>
    1e52:	20 34       	cpi	r18, 0x40	; 64
    1e54:	89 e0       	ldi	r24, 0x09	; 9
    1e56:	38 07       	cpc	r19, r24
    1e58:	39 f4       	brne	.+14     	; 0x1e68 <tc_enable+0x72>
    1e5a:	62 e0       	ldi	r22, 0x02	; 2
    1e5c:	84 e0       	ldi	r24, 0x04	; 4
    1e5e:	61 d9       	rcall	.-3390   	; 0x1122 <sysclk_enable_module>
    1e60:	64 e0       	ldi	r22, 0x04	; 4
    1e62:	84 e0       	ldi	r24, 0x04	; 4
    1e64:	5e d9       	rcall	.-3396   	; 0x1122 <sysclk_enable_module>
    1e66:	22 c0       	rjmp	.+68     	; 0x1eac <tc_enable+0xb6>
    1e68:	21 15       	cp	r18, r1
    1e6a:	8a e0       	ldi	r24, 0x0A	; 10
    1e6c:	38 07       	cpc	r19, r24
    1e6e:	39 f4       	brne	.+14     	; 0x1e7e <tc_enable+0x88>
    1e70:	61 e0       	ldi	r22, 0x01	; 1
    1e72:	85 e0       	ldi	r24, 0x05	; 5
    1e74:	56 d9       	rcall	.-3412   	; 0x1122 <sysclk_enable_module>
    1e76:	64 e0       	ldi	r22, 0x04	; 4
    1e78:	85 e0       	ldi	r24, 0x05	; 5
    1e7a:	53 d9       	rcall	.-3418   	; 0x1122 <sysclk_enable_module>
    1e7c:	17 c0       	rjmp	.+46     	; 0x1eac <tc_enable+0xb6>
    1e7e:	20 34       	cpi	r18, 0x40	; 64
    1e80:	8a e0       	ldi	r24, 0x0A	; 10
    1e82:	38 07       	cpc	r19, r24
    1e84:	39 f4       	brne	.+14     	; 0x1e94 <tc_enable+0x9e>
    1e86:	62 e0       	ldi	r22, 0x02	; 2
    1e88:	85 e0       	ldi	r24, 0x05	; 5
    1e8a:	4b d9       	rcall	.-3434   	; 0x1122 <sysclk_enable_module>
    1e8c:	64 e0       	ldi	r22, 0x04	; 4
    1e8e:	85 e0       	ldi	r24, 0x05	; 5
    1e90:	48 d9       	rcall	.-3440   	; 0x1122 <sysclk_enable_module>
    1e92:	0c c0       	rjmp	.+24     	; 0x1eac <tc_enable+0xb6>
    1e94:	21 15       	cp	r18, r1
    1e96:	3b 40       	sbci	r19, 0x0B	; 11
    1e98:	39 f4       	brne	.+14     	; 0x1ea8 <tc_enable+0xb2>
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	86 e0       	ldi	r24, 0x06	; 6
    1e9e:	41 d9       	rcall	.-3454   	; 0x1122 <sysclk_enable_module>
    1ea0:	64 e0       	ldi	r22, 0x04	; 4
    1ea2:	86 e0       	ldi	r24, 0x06	; 6
    1ea4:	3e d9       	rcall	.-3460   	; 0x1122 <sysclk_enable_module>
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <tc_enable+0xb6>
    1ea8:	1f bf       	out	0x3f, r17	; 63
    1eaa:	10 c0       	rjmp	.+32     	; 0x1ecc <tc_enable+0xd6>
    1eac:	80 91 b9 23 	lds	r24, 0x23B9	; 0x8023b9 <sleepmgr_locks+0x1>
    1eb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <tc_enable+0xc0>
    1eb4:	ff cf       	rjmp	.-2      	; 0x1eb4 <tc_enable+0xbe>
    1eb6:	8f b7       	in	r24, 0x3f	; 63
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	f8 94       	cli
    1ebc:	99 81       	ldd	r25, Y+1	; 0x01
    1ebe:	e8 eb       	ldi	r30, 0xB8	; 184
    1ec0:	f3 e2       	ldi	r31, 0x23	; 35
    1ec2:	81 81       	ldd	r24, Z+1	; 0x01
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	81 83       	std	Z+1, r24	; 0x01
    1ec8:	9f bf       	out	0x3f, r25	; 63
    1eca:	1f bf       	out	0x3f, r17	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	0f 90       	pop	r0
    1ed0:	df 91       	pop	r29
    1ed2:	cf 91       	pop	r28
    1ed4:	1f 91       	pop	r17
    1ed6:	08 95       	ret

00001ed8 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1ed8:	81 15       	cp	r24, r1
    1eda:	28 e0       	ldi	r18, 0x08	; 8
    1edc:	92 07       	cpc	r25, r18
    1ede:	29 f4       	brne	.+10     	; 0x1eea <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1ee0:	60 93 ea 22 	sts	0x22EA, r22	; 0x8022ea <tc_tcc0_ovf_callback>
    1ee4:	70 93 eb 22 	sts	0x22EB, r23	; 0x8022eb <tc_tcc0_ovf_callback+0x1>
    1ee8:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    1eea:	80 34       	cpi	r24, 0x40	; 64
    1eec:	28 e0       	ldi	r18, 0x08	; 8
    1eee:	92 07       	cpc	r25, r18
    1ef0:	29 f4       	brne	.+10     	; 0x1efc <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    1ef2:	60 93 de 22 	sts	0x22DE, r22	; 0x8022de <tc_tcc1_ovf_callback>
    1ef6:	70 93 df 22 	sts	0x22DF, r23	; 0x8022df <tc_tcc1_ovf_callback+0x1>
    1efa:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    1efc:	81 15       	cp	r24, r1
    1efe:	29 e0       	ldi	r18, 0x09	; 9
    1f00:	92 07       	cpc	r25, r18
    1f02:	29 f4       	brne	.+10     	; 0x1f0e <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    1f04:	60 93 d6 22 	sts	0x22D6, r22	; 0x8022d6 <tc_tcd0_ovf_callback>
    1f08:	70 93 d7 22 	sts	0x22D7, r23	; 0x8022d7 <tc_tcd0_ovf_callback+0x1>
    1f0c:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1f0e:	80 34       	cpi	r24, 0x40	; 64
    1f10:	29 e0       	ldi	r18, 0x09	; 9
    1f12:	92 07       	cpc	r25, r18
    1f14:	29 f4       	brne	.+10     	; 0x1f20 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    1f16:	60 93 ca 22 	sts	0x22CA, r22	; 0x8022ca <tc_tcd1_ovf_callback>
    1f1a:	70 93 cb 22 	sts	0x22CB, r23	; 0x8022cb <tc_tcd1_ovf_callback+0x1>
    1f1e:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1f20:	81 15       	cp	r24, r1
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	92 07       	cpc	r25, r18
    1f26:	29 f4       	brne	.+10     	; 0x1f32 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    1f28:	60 93 c2 22 	sts	0x22C2, r22	; 0x8022c2 <tc_tce0_ovf_callback>
    1f2c:	70 93 c3 22 	sts	0x22C3, r23	; 0x8022c3 <tc_tce0_ovf_callback+0x1>
    1f30:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    1f32:	80 34       	cpi	r24, 0x40	; 64
    1f34:	2a e0       	ldi	r18, 0x0A	; 10
    1f36:	92 07       	cpc	r25, r18
    1f38:	29 f4       	brne	.+10     	; 0x1f44 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    1f3a:	60 93 b6 22 	sts	0x22B6, r22	; 0x8022b6 <tc_tce1_ovf_callback>
    1f3e:	70 93 b7 22 	sts	0x22B7, r23	; 0x8022b7 <tc_tce1_ovf_callback+0x1>
    1f42:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    1f44:	81 15       	cp	r24, r1
    1f46:	9b 40       	sbci	r25, 0x0B	; 11
    1f48:	21 f4       	brne	.+8      	; 0x1f52 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    1f4a:	60 93 ae 22 	sts	0x22AE, r22	; 0x8022ae <tc_tcf0_ovf_callback>
    1f4e:	70 93 af 22 	sts	0x22AF, r23	; 0x8022af <tc_tcf0_ovf_callback+0x1>
    1f52:	08 95       	ret

00001f54 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1f54:	af 92       	push	r10
    1f56:	bf 92       	push	r11
    1f58:	cf 92       	push	r12
    1f5a:	df 92       	push	r13
    1f5c:	ef 92       	push	r14
    1f5e:	ff 92       	push	r15
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
    1f68:	c8 2f       	mov	r28, r24
    1f6a:	e6 2e       	mov	r14, r22
    1f6c:	b4 2e       	mov	r11, r20
    1f6e:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1f70:	00 e0       	ldi	r16, 0x00	; 0
    1f72:	f9 01       	movw	r30, r18
    1f74:	24 81       	ldd	r18, Z+4	; 0x04
    1f76:	43 81       	ldd	r20, Z+3	; 0x03
    1f78:	6b 2d       	mov	r22, r11
    1f7a:	8e 2d       	mov	r24, r14
    1f7c:	a8 d8       	rcall	.-3760   	; 0x10ce <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1f7e:	f6 01       	movw	r30, r12
    1f80:	80 81       	ld	r24, Z
    1f82:	81 11       	cpse	r24, r1
    1f84:	3a c0       	rjmp	.+116    	; 0x1ffa <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1f86:	83 81       	ldd	r24, Z+3	; 0x03
    1f88:	28 2f       	mov	r18, r24
    1f8a:	26 95       	lsr	r18
    1f8c:	26 95       	lsr	r18
    1f8e:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1f90:	87 70       	andi	r24, 0x07	; 7
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <gfx_mono_draw_char+0x42>
		char_row_size++;
    1f94:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1f96:	f6 01       	movw	r30, r12
    1f98:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1f9a:	8c 2f       	mov	r24, r28
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	35 81       	ldd	r19, Z+5	; 0x05
    1fa0:	83 1b       	sub	r24, r19
    1fa2:	91 09       	sbc	r25, r1
    1fa4:	2a 9d       	mul	r18, r10
    1fa6:	90 01       	movw	r18, r0
    1fa8:	11 24       	eor	r1, r1
    1faa:	82 9f       	mul	r24, r18
    1fac:	a0 01       	movw	r20, r0
    1fae:	83 9f       	mul	r24, r19
    1fb0:	50 0d       	add	r21, r0
    1fb2:	92 9f       	mul	r25, r18
    1fb4:	50 0d       	add	r21, r0
    1fb6:	11 24       	eor	r1, r1
    1fb8:	01 81       	ldd	r16, Z+1	; 0x01
    1fba:	12 81       	ldd	r17, Z+2	; 0x02
    1fbc:	04 0f       	add	r16, r20
    1fbe:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    1fc0:	f6 01       	movw	r30, r12
    1fc2:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    1fc4:	ff 20       	and	r15, r15
    1fc6:	a9 f0       	breq	.+42     	; 0x1ff2 <gfx_mono_draw_char+0x9e>
    1fc8:	d0 e0       	ldi	r29, 0x00	; 0
    1fca:	c0 e0       	ldi	r28, 0x00	; 0
    1fcc:	8e 2d       	mov	r24, r14
    1fce:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    1fd0:	9c 2f       	mov	r25, r28
    1fd2:	97 70       	andi	r25, 0x07	; 7
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    1fd6:	f8 01       	movw	r30, r16
    1fd8:	d4 91       	lpm	r29, Z
				glyph_data++;
    1fda:	0f 5f       	subi	r16, 0xFF	; 255
    1fdc:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    1fde:	dd 23       	and	r29, r29
    1fe0:	24 f4       	brge	.+8      	; 0x1fea <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	6b 2d       	mov	r22, r11
    1fe6:	0e 94 21 05 	call	0xa42	; 0xa42 <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    1fea:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    1fec:	cf 5f       	subi	r28, 0xFF	; 255
    1fee:	fc 12       	cpse	r15, r28
    1ff0:	ed cf       	rjmp	.-38     	; 0x1fcc <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    1ff2:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    1ff4:	aa 94       	dec	r10
	} while (rows_left > 0);
    1ff6:	a1 10       	cpse	r10, r1
    1ff8:	e3 cf       	rjmp	.-58     	; 0x1fc0 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	ef 90       	pop	r14
    2006:	df 90       	pop	r13
    2008:	cf 90       	pop	r12
    200a:	bf 90       	pop	r11
    200c:	af 90       	pop	r10
    200e:	08 95       	ret

00002010 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	0f 93       	push	r16
    2018:	1f 93       	push	r17
    201a:	cf 93       	push	r28
    201c:	df 93       	push	r29
    201e:	d6 2e       	mov	r13, r22
    2020:	04 2f       	mov	r16, r20
    2022:	79 01       	movw	r14, r18
    2024:	ec 01       	movw	r28, r24
    2026:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    2028:	89 91       	ld	r24, Y+
    202a:	8a 30       	cpi	r24, 0x0A	; 10
    202c:	31 f4       	brne	.+12     	; 0x203a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    202e:	f7 01       	movw	r30, r14
    2030:	84 81       	ldd	r24, Z+4	; 0x04
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    2036:	1d 2d       	mov	r17, r13
    2038:	09 c0       	rjmp	.+18     	; 0x204c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    203a:	8d 30       	cpi	r24, 0x0D	; 13
    203c:	39 f0       	breq	.+14     	; 0x204c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    203e:	97 01       	movw	r18, r14
    2040:	40 2f       	mov	r20, r16
    2042:	61 2f       	mov	r22, r17
    2044:	87 df       	rcall	.-242    	; 0x1f54 <gfx_mono_draw_char>
			x += font->width;
    2046:	f7 01       	movw	r30, r14
    2048:	83 81       	ldd	r24, Z+3	; 0x03
    204a:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    204c:	88 81       	ld	r24, Y
    204e:	81 11       	cpse	r24, r1
    2050:	eb cf       	rjmp	.-42     	; 0x2028 <gfx_mono_draw_string+0x18>
}
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	df 90       	pop	r13
    2060:	08 95       	ret

00002062 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    206c:	c6 2f       	mov	r28, r22
    206e:	d0 e0       	ldi	r29, 0x00	; 0
    2070:	de 01       	movw	r26, r28
    2072:	02 2e       	mov	r0, r18
    2074:	02 c0       	rjmp	.+4      	; 0x207a <ioport_configure_port_pin+0x18>
    2076:	b5 95       	asr	r27
    2078:	a7 95       	ror	r26
    207a:	0a 94       	dec	r0
    207c:	e2 f7       	brpl	.-8      	; 0x2076 <ioport_configure_port_pin+0x14>
    207e:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    2080:	50 8b       	std	Z+16, r21	; 0x10
    2082:	2f 5f       	subi	r18, 0xFF	; 255
    2084:	3f 4f       	sbci	r19, 0xFF	; 255
    2086:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    2088:	28 30       	cpi	r18, 0x08	; 8
    208a:	31 05       	cpc	r19, r1
    208c:	89 f7       	brne	.-30     	; 0x2070 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    208e:	40 ff       	sbrs	r20, 0
    2090:	0a c0       	rjmp	.+20     	; 0x20a6 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    2092:	41 ff       	sbrs	r20, 1
    2094:	03 c0       	rjmp	.+6      	; 0x209c <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    2096:	fc 01       	movw	r30, r24
    2098:	65 83       	std	Z+5, r22	; 0x05
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    209c:	fc 01       	movw	r30, r24
    209e:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    20a0:	fc 01       	movw	r30, r24
    20a2:	61 83       	std	Z+1, r22	; 0x01
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    20a6:	fc 01       	movw	r30, r24
    20a8:	62 83       	std	Z+2, r22	; 0x02
	}
}
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	08 95       	ret

000020b0 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    20b0:	43 e0       	ldi	r20, 0x03	; 3
    20b2:	50 e0       	ldi	r21, 0x00	; 0
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	80 ee       	ldi	r24, 0xE0	; 224
    20b8:	97 e0       	ldi	r25, 0x07	; 7
    20ba:	d3 df       	rcall	.-90     	; 0x2062 <ioport_configure_port_pin>
    20bc:	43 e0       	ldi	r20, 0x03	; 3
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	62 e0       	ldi	r22, 0x02	; 2
    20c2:	80 ee       	ldi	r24, 0xE0	; 224
    20c4:	97 e0       	ldi	r25, 0x07	; 7
    20c6:	cd df       	rcall	.-102    	; 0x2062 <ioport_configure_port_pin>
    20c8:	43 e0       	ldi	r20, 0x03	; 3
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	60 e1       	ldi	r22, 0x10	; 16
    20ce:	80 e6       	ldi	r24, 0x60	; 96
    20d0:	96 e0       	ldi	r25, 0x06	; 6
    20d2:	c7 df       	rcall	.-114    	; 0x2062 <ioport_configure_port_pin>
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	50 e4       	ldi	r21, 0x40	; 64
    20d8:	60 e2       	ldi	r22, 0x20	; 32
    20da:	80 e6       	ldi	r24, 0x60	; 96
    20dc:	96 e0       	ldi	r25, 0x06	; 6
    20de:	c1 df       	rcall	.-126    	; 0x2062 <ioport_configure_port_pin>
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	5b e1       	ldi	r21, 0x1B	; 27
    20e4:	60 e2       	ldi	r22, 0x20	; 32
    20e6:	80 e8       	ldi	r24, 0x80	; 128
    20e8:	96 e0       	ldi	r25, 0x06	; 6
    20ea:	bb df       	rcall	.-138    	; 0x2062 <ioport_configure_port_pin>
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	5b e1       	ldi	r21, 0x1B	; 27
    20f0:	62 e0       	ldi	r22, 0x02	; 2
    20f2:	80 ea       	ldi	r24, 0xA0	; 160
    20f4:	96 e0       	ldi	r25, 0x06	; 6
    20f6:	b5 df       	rcall	.-150    	; 0x2062 <ioport_configure_port_pin>
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	5b e1       	ldi	r21, 0x1B	; 27
    20fc:	64 e0       	ldi	r22, 0x04	; 4
    20fe:	80 ea       	ldi	r24, 0xA0	; 160
    2100:	96 e0       	ldi	r25, 0x06	; 6
    2102:	af df       	rcall	.-162    	; 0x2062 <ioport_configure_port_pin>
    2104:	43 e0       	ldi	r20, 0x03	; 3
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	62 e0       	ldi	r22, 0x02	; 2
    210a:	80 e6       	ldi	r24, 0x60	; 96
    210c:	96 e0       	ldi	r25, 0x06	; 6
    210e:	a9 df       	rcall	.-174    	; 0x2062 <ioport_configure_port_pin>
    2110:	43 e0       	ldi	r20, 0x03	; 3
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	68 e0       	ldi	r22, 0x08	; 8
    2116:	80 e6       	ldi	r24, 0x60	; 96
    2118:	96 e0       	ldi	r25, 0x06	; 6
    211a:	a3 df       	rcall	.-186    	; 0x2062 <ioport_configure_port_pin>
    211c:	43 e0       	ldi	r20, 0x03	; 3
    211e:	50 e0       	ldi	r21, 0x00	; 0
    2120:	68 e0       	ldi	r22, 0x08	; 8
    2122:	80 ea       	ldi	r24, 0xA0	; 160
    2124:	96 e0       	ldi	r25, 0x06	; 6
    2126:	9d df       	rcall	.-198    	; 0x2062 <ioport_configure_port_pin>
    2128:	43 e0       	ldi	r20, 0x03	; 3
    212a:	50 e0       	ldi	r21, 0x00	; 0
    212c:	61 e0       	ldi	r22, 0x01	; 1
    212e:	80 e6       	ldi	r24, 0x60	; 96
    2130:	96 e0       	ldi	r25, 0x06	; 6
    2132:	97 df       	rcall	.-210    	; 0x2062 <ioport_configure_port_pin>
    2134:	43 e0       	ldi	r20, 0x03	; 3
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	68 e0       	ldi	r22, 0x08	; 8
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	96 e0       	ldi	r25, 0x06	; 6
    213e:	91 df       	rcall	.-222    	; 0x2062 <ioport_configure_port_pin>
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	50 e0       	ldi	r21, 0x00	; 0
    2144:	60 e1       	ldi	r22, 0x10	; 16
    2146:	80 e8       	ldi	r24, 0x80	; 128
    2148:	96 e0       	ldi	r25, 0x06	; 6
    214a:	8b df       	rcall	.-234    	; 0x2062 <ioport_configure_port_pin>
    214c:	43 e0       	ldi	r20, 0x03	; 3
    214e:	50 e0       	ldi	r21, 0x00	; 0
    2150:	62 e0       	ldi	r22, 0x02	; 2
    2152:	80 e6       	ldi	r24, 0x60	; 96
    2154:	96 e0       	ldi	r25, 0x06	; 6
    2156:	85 df       	rcall	.-246    	; 0x2062 <ioport_configure_port_pin>
    2158:	43 e0       	ldi	r20, 0x03	; 3
    215a:	50 e0       	ldi	r21, 0x00	; 0
    215c:	68 e0       	ldi	r22, 0x08	; 8
    215e:	80 e6       	ldi	r24, 0x60	; 96
    2160:	96 e0       	ldi	r25, 0x06	; 6
    2162:	7f df       	rcall	.-258    	; 0x2062 <ioport_configure_port_pin>
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	80 e6       	ldi	r24, 0x60	; 96
    216c:	96 e0       	ldi	r25, 0x06	; 6
    216e:	79 df       	rcall	.-270    	; 0x2062 <ioport_configure_port_pin>
    2170:	43 e0       	ldi	r20, 0x03	; 3
    2172:	50 e0       	ldi	r21, 0x00	; 0
    2174:	60 e1       	ldi	r22, 0x10	; 16
    2176:	80 ea       	ldi	r24, 0xA0	; 160
    2178:	96 e0       	ldi	r25, 0x06	; 6
    217a:	73 df       	rcall	.-282    	; 0x2062 <ioport_configure_port_pin>
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	50 e0       	ldi	r21, 0x00	; 0
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	96 e0       	ldi	r25, 0x06	; 6
    2186:	6d df       	rcall	.-294    	; 0x2062 <ioport_configure_port_pin>
    2188:	40 e0       	ldi	r20, 0x00	; 0
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	64 e0       	ldi	r22, 0x04	; 4
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	96 e0       	ldi	r25, 0x06	; 6
    2192:	67 df       	rcall	.-306    	; 0x2062 <ioport_configure_port_pin>
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	62 e0       	ldi	r22, 0x02	; 2
    219a:	80 e2       	ldi	r24, 0x20	; 32
    219c:	96 e0       	ldi	r25, 0x06	; 6
    219e:	61 df       	rcall	.-318    	; 0x2062 <ioport_configure_port_pin>
    21a0:	43 e0       	ldi	r20, 0x03	; 3
    21a2:	50 e0       	ldi	r21, 0x00	; 0
    21a4:	68 e0       	ldi	r22, 0x08	; 8
    21a6:	80 e4       	ldi	r24, 0x40	; 64
    21a8:	96 e0       	ldi	r25, 0x06	; 6
    21aa:	5b df       	rcall	.-330    	; 0x2062 <ioport_configure_port_pin>
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	50 e0       	ldi	r21, 0x00	; 0
    21b0:	64 e0       	ldi	r22, 0x04	; 4
    21b2:	80 e4       	ldi	r24, 0x40	; 64
    21b4:	96 e0       	ldi	r25, 0x06	; 6
    21b6:	55 df       	rcall	.-342    	; 0x2062 <ioport_configure_port_pin>
    21b8:	43 e0       	ldi	r20, 0x03	; 3
    21ba:	50 e0       	ldi	r21, 0x00	; 0
    21bc:	68 e0       	ldi	r22, 0x08	; 8
    21be:	80 e6       	ldi	r24, 0x60	; 96
    21c0:	96 e0       	ldi	r25, 0x06	; 6
    21c2:	4f df       	rcall	.-354    	; 0x2062 <ioport_configure_port_pin>
    21c4:	40 e0       	ldi	r20, 0x00	; 0
    21c6:	50 e0       	ldi	r21, 0x00	; 0
    21c8:	64 e0       	ldi	r22, 0x04	; 4
    21ca:	80 e6       	ldi	r24, 0x60	; 96
    21cc:	96 e0       	ldi	r25, 0x06	; 6
    21ce:	49 df       	rcall	.-366    	; 0x2062 <ioport_configure_port_pin>
    21d0:	43 e0       	ldi	r20, 0x03	; 3
    21d2:	50 e0       	ldi	r21, 0x00	; 0
    21d4:	68 e0       	ldi	r22, 0x08	; 8
    21d6:	80 e8       	ldi	r24, 0x80	; 128
    21d8:	96 e0       	ldi	r25, 0x06	; 6
    21da:	43 df       	rcall	.-378    	; 0x2062 <ioport_configure_port_pin>
    21dc:	40 e0       	ldi	r20, 0x00	; 0
    21de:	50 e0       	ldi	r21, 0x00	; 0
    21e0:	64 e0       	ldi	r22, 0x04	; 4
    21e2:	80 e8       	ldi	r24, 0x80	; 128
    21e4:	96 e0       	ldi	r25, 0x06	; 6
    21e6:	3d cf       	rjmp	.-390    	; 0x2062 <ioport_configure_port_pin>
    21e8:	08 95       	ret

000021ea <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    21ea:	04 c0       	rjmp	.+8      	; 0x21f4 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    21ec:	61 50       	subi	r22, 0x01	; 1
    21ee:	71 09       	sbc	r23, r1
    21f0:	81 09       	sbc	r24, r1
    21f2:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    21f4:	61 15       	cp	r22, r1
    21f6:	71 05       	cpc	r23, r1
    21f8:	81 05       	cpc	r24, r1
    21fa:	91 05       	cpc	r25, r1
    21fc:	b9 f7       	brne	.-18     	; 0x21ec <__portable_avr_delay_cycles+0x2>
    21fe:	08 95       	ret

00002200 <print_message>:
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);
}

//Fungsi ini bukan utk print message, tapi increment nilai variabel "increment" setiap 29us
void print_message(void){
	incremental = incremental + 1;
    2200:	80 91 b4 23 	lds	r24, 0x23B4	; 0x8023b4 <incremental>
    2204:	90 91 b5 23 	lds	r25, 0x23B5	; 0x8023b5 <incremental+0x1>
    2208:	01 96       	adiw	r24, 0x01	; 1
    220a:	80 93 b4 23 	sts	0x23B4, r24	; 0x8023b4 <incremental>
    220e:	90 93 b5 23 	sts	0x23B5, r25	; 0x8023b5 <incremental+0x1>
    2212:	08 95       	ret

00002214 <setup_timer>:
static char buffarray[200];

//Fungsi setup timer
void setup_timer(void){
	// Timer counter untuk sensor ultrasonik
	tc_enable(&TCC0);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	98 e0       	ldi	r25, 0x08	; 8
    2218:	ee dd       	rcall	.-1060   	; 0x1df6 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0,print_message);
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	71 e1       	ldi	r23, 0x11	; 17
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	98 e0       	ldi	r25, 0x08	; 8
    2222:	5a de       	rcall	.-844    	; 0x1ed8 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    2224:	e0 e0       	ldi	r30, 0x00	; 0
    2226:	f8 e0       	ldi	r31, 0x08	; 8
    2228:	81 81       	ldd	r24, Z+1	; 0x01
    222a:	88 7f       	andi	r24, 0xF8	; 248
    222c:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    222e:	8a e3       	ldi	r24, 0x3A	; 58
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	86 a3       	std	Z+38, r24	; 0x26
    2234:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    2236:	86 81       	ldd	r24, Z+6	; 0x06
    2238:	8c 7f       	andi	r24, 0xFC	; 252
    223a:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    223c:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    223e:	83 60       	ori	r24, 0x03	; 3
    2240:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2242:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    2244:	80 7f       	andi	r24, 0xF0	; 240
    2246:	81 60       	ori	r24, 0x01	; 1
    2248:	80 83       	st	Z, r24
    224a:	08 95       	ret

0000224c <main>:

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).
	
	board_init();
    224c:	31 df       	rcall	.-414    	; 0x20b0 <board_init>
	sysclk_init();
    224e:	0e 94 81 08 	call	0x1102	; 0x1102 <sysclk_init>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    2252:	87 e0       	ldi	r24, 0x07	; 7
    2254:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7be0a2>
	pmic_init();
	gfx_mono_init();
    2258:	0e 94 df 04 	call	0x9be	; 0x9be <gfx_mono_st7565r_init>
    225c:	80 e1       	ldi	r24, 0x10	; 16
    225e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7be685>
	
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);
	
	gfx_mono_draw_string("Fathan-Fikri-Vincent", 0, 0, &sysfont);
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e2       	ldi	r19, 0x20	; 32
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	60 e0       	ldi	r22, 0x00	; 0
    226a:	87 e0       	ldi	r24, 0x07	; 7
    226c:	90 e2       	ldi	r25, 0x20	; 32
    226e:	d0 de       	rcall	.-608    	; 0x2010 <gfx_mono_draw_string>
	
	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2270:	64 e0       	ldi	r22, 0x04	; 4
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	0e 94 91 08 	call	0x1122	; 0x1122 <sysclk_enable_module>
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    2278:	e0 e2       	ldi	r30, 0x20	; 32
    227a:	f4 e0       	ldi	r31, 0x04	; 4
    227c:	81 81       	ldd	r24, Z+1	; 0x01
    227e:	80 fd       	sbrc	r24, 0
    2280:	fd cf       	rjmp	.-6      	; 0x227c <main+0x30>
		// Wait for RTC32 sysclk to become stable
	}
	
	delay_ms(1000);
    2282:	66 e1       	ldi	r22, 0x16	; 22
    2284:	76 e1       	ldi	r23, 0x16	; 22
    2286:	85 e0       	ldi	r24, 0x05	; 5
    2288:	90 e0       	ldi	r25, 0x00	; 0
	setup_timer();
    228a:	af df       	rcall	.-162    	; 0x21ea <__portable_avr_delay_cycles>
    228c:	c3 df       	rcall	.-122    	; 0x2214 <setup_timer>
	PORTE.DIR = 0xFF;
    228e:	8f ef       	ldi	r24, 0xFF	; 255
    2290:	80 93 80 06 	sts	0x0680, r24	; 0x800680 <__TEXT_REGION_LENGTH__+0x7be680>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x7be641>
	
	int locked=0;
    229a:	c1 2c       	mov	r12, r1
    229c:	d1 2c       	mov	r13, r1
	// Insert application code here, after the board has been initialized.
	while(1){
		tc_enable(&TCC0);
		
		
		PORTB.DIR = 0b11111111; //Set sensor sebagai output
    229e:	c0 e2       	ldi	r28, 0x20	; 32
    22a0:	d6 e0       	ldi	r29, 0x06	; 6
    22a2:	55 24       	eor	r5, r5
    22a4:	5a 94       	dec	r5
				gfx_mono_draw_string("Rumah terkunci", 0, 8, &sysfont);
			} else {
				gfx_mono_draw_string("Rumah terbuka ", 0, 8, &sysfont);
				gfx_mono_draw_string("                     ", 0, 16, &sysfont);
			}
			snprintf(buffarray, sizeof(buffarray), "Jarak: %d cm  ", newscore);
    22a6:	0f 2e       	mov	r0, r31
    22a8:	fc e1       	ldi	r31, 0x1C	; 28
    22aa:	ef 2e       	mov	r14, r31
    22ac:	f0 e2       	ldi	r31, 0x20	; 32
    22ae:	ff 2e       	mov	r15, r31
    22b0:	f0 2d       	mov	r31, r0
    22b2:	0f 2e       	mov	r0, r31
    22b4:	f8 ec       	ldi	r31, 0xC8	; 200
    22b6:	4f 2e       	mov	r4, r31
    22b8:	f0 2d       	mov	r31, r0
    22ba:	0c ee       	ldi	r16, 0xEC	; 236
    22bc:	12 e2       	ldi	r17, 0x22	; 34
				else if (newscore > 5) {
					PORTE.OUT=0b00011000;
					gfx_mono_draw_string("Ada yang mencurigakan", 0, 16, &sysfont);
				}
				else {
					PORTE.OUT=0b00011010;
    22be:	0f 2e       	mov	r0, r31
    22c0:	f0 e8       	ldi	r31, 0x80	; 128
    22c2:	6f 2e       	mov	r6, r31
    22c4:	f6 e0       	ldi	r31, 0x06	; 6
    22c6:	7f 2e       	mov	r7, r31
    22c8:	f0 2d       	mov	r31, r0
		}
		int newinc = incremental; //Catat selisih waktu antara suara dikirim hingga diterima
		cpu_irq_disable(); //Interrupt dimatikan
		
		if (incremental > 300) {
			score = 300;
    22ca:	0f 2e       	mov	r0, r31
    22cc:	fc e2       	ldi	r31, 0x2C	; 44
    22ce:	2f 2e       	mov	r2, r31
    22d0:	33 24       	eor	r3, r3
    22d2:	33 94       	inc	r3
    22d4:	f0 2d       	mov	r31, r0

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	return base->IN & arch_ioport_pin_to_mask(pin);
    22d6:	0f 2e       	mov	r0, r31
    22d8:	f0 ea       	ldi	r31, 0xA0	; 160
    22da:	8f 2e       	mov	r8, r31
    22dc:	f6 e0       	ldi	r31, 0x06	; 6
    22de:	9f 2e       	mov	r9, r31
	int locked=0;
	//set J1 Pin 0 to output
	ioport_set_pin_dir(J1_PIN0, IOPORT_DIR_OUTPUT);
	// Insert application code here, after the board has been initialized.
	while(1){
		tc_enable(&TCC0);
    22e0:	f0 2d       	mov	r31, r0
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	98 e0       	ldi	r25, 0x08	; 8
    22e6:	87 dd       	rcall	.-1266   	; 0x1df6 <tc_enable>
		
		
		PORTB.DIR = 0b11111111; //Set sensor sebagai output
    22e8:	58 82       	st	Y, r5
		PORTB.OUT = 0b00000000; //Set low
    22ea:	1c 82       	std	Y+4, r1	; 0x04
		PORTB.OUT = 0b11111111; //Set high selama 5us (memancarkan signal)
		delay_us(5);
    22ec:	5c 82       	std	Y+4, r5	; 0x04
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	79 df       	rcall	.-270    	; 0x21ea <__portable_avr_delay_cycles>
		PORTB.OUT = 0b00000000; //Kembali menjadi low
		PORTB.DIR = 0b00000000; //Set sensor menjadi input untuk menerima pancaran
    22f8:	1c 82       	std	Y+4, r1	; 0x04
		delay_us(750); //Delay holdoff selama 750us
    22fa:	18 82       	st	Y, r1
    22fc:	6b ef       	ldi	r22, 0xFB	; 251
    22fe:	70 e0       	ldi	r23, 0x00	; 0
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	72 df       	rcall	.-284    	; 0x21ea <__portable_avr_delay_cycles>
		int oldinc = incremental;
    2306:	a0 90 b4 23 	lds	r10, 0x23B4	; 0x8023b4 <incremental>
    230a:	b0 90 b5 23 	lds	r11, 0x23B5	; 0x8023b5 <incremental+0x1>
		delay_us(115); //Delay lagi, kali ini seharusnya pin menjadi high
    230e:	67 e2       	ldi	r22, 0x27	; 39
    2310:	70 e0       	ldi	r23, 0x00	; 0
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	69 df       	rcall	.-302    	; 0x21ea <__portable_avr_delay_cycles>
		cpu_irq_enable(); //Mulai interrupt
    2318:	78 94       	sei
		while(PORTB.IN & PIN0_bm){
    231a:	88 85       	ldd	r24, Y+8	; 0x08
    231c:	80 fd       	sbrc	r24, 0
    231e:	fd cf       	rjmp	.-6      	; 0x231a <main+0xce>
			//Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
		}
		int newinc = incremental; //Catat selisih waktu antara suara dikirim hingga diterima
    2320:	60 91 b4 23 	lds	r22, 0x23B4	; 0x8023b4 <incremental>
    2324:	70 91 b5 23 	lds	r23, 0x23B5	; 0x8023b5 <incremental+0x1>
		cpu_irq_disable(); //Interrupt dimatikan
    2328:	f8 94       	cli
		
		if (incremental > 300) {
    232a:	80 91 b4 23 	lds	r24, 0x23B4	; 0x8023b4 <incremental>
    232e:	90 91 b5 23 	lds	r25, 0x23B5	; 0x8023b5 <incremental+0x1>
    2332:	8d 32       	cpi	r24, 0x2D	; 45
    2334:	91 40       	sbci	r25, 0x01	; 1
    2336:	24 f1       	brlt	.+72     	; 0x2380 <main+0x134>
			score = 300;
    2338:	20 92 b6 23 	sts	0x23B6, r2	; 0x8023b6 <score>
    233c:	30 92 b7 23 	sts	0x23B7, r3	; 0x8023b7 <score+0x1>
			snprintf(buffarray, sizeof(buffarray), "Jarak: %d cm  ", score);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	8f 93       	push	r24
    2344:	9c e2       	ldi	r25, 0x2C	; 44
    2346:	9f 93       	push	r25
    2348:	ff 92       	push	r15
    234a:	ef 92       	push	r14
    234c:	1f 92       	push	r1
    234e:	4f 92       	push	r4
    2350:	1f 93       	push	r17
    2352:	0f 93       	push	r16
			gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
    2354:	d3 d1       	rcall	.+934    	; 0x26fc <snprintf>
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e2       	ldi	r19, 0x20	; 32
    235a:	48 e1       	ldi	r20, 0x18	; 24
    235c:	60 e0       	ldi	r22, 0x00	; 0
    235e:	c8 01       	movw	r24, r16
			delay_ms(10);
    2360:	57 de       	rcall	.-850    	; 0x2010 <gfx_mono_draw_string>
    2362:	66 e0       	ldi	r22, 0x06	; 6
    2364:	7d e0       	ldi	r23, 0x0D	; 13
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	3f df       	rcall	.-386    	; 0x21ea <__portable_avr_delay_cycles>
			incremental = 0;
    236c:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <incremental>
    2370:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <incremental+0x1>
    2374:	ed b7       	in	r30, 0x3d	; 61
    2376:	fe b7       	in	r31, 0x3e	; 62
    2378:	38 96       	adiw	r30, 0x08	; 8
    237a:	ed bf       	out	0x3d, r30	; 61
    237c:	fe bf       	out	0x3e, r31	; 62
		}
		else {
			int inc = newinc - oldinc;
			int newscore = inc * 1.1538461538461;
    237e:	6f c0       	rjmp	.+222    	; 0x245e <main+0x212>
    2380:	6a 19       	sub	r22, r10
    2382:	7b 09       	sbc	r23, r11
    2384:	07 2e       	mov	r0, r23
    2386:	00 0c       	add	r0, r0
    2388:	88 0b       	sbc	r24, r24
    238a:	99 0b       	sbc	r25, r25
    238c:	a6 d0       	rcall	.+332    	; 0x24da <__floatsisf>
    238e:	2b e3       	ldi	r18, 0x3B	; 59
    2390:	31 eb       	ldi	r19, 0xB1	; 177
    2392:	43 e9       	ldi	r20, 0x93	; 147
    2394:	5f e3       	ldi	r21, 0x3F	; 63
    2396:	05 d1       	rcall	.+522    	; 0x25a2 <__mulsf3>
    2398:	6d d0       	rcall	.+218    	; 0x2474 <__fixsfsi>
    239a:	b6 2e       	mov	r11, r22
    239c:	a7 2e       	mov	r10, r23
    239e:	86 2f       	mov	r24, r22
    23a0:	9a 2d       	mov	r25, r10
			
			if (locked){
    23a2:	c1 14       	cp	r12, r1
    23a4:	d1 04       	cpc	r13, r1
				if (newscore > 20) {
    23a6:	a9 f1       	breq	.+106    	; 0x2412 <main+0x1c6>
    23a8:	85 31       	cpi	r24, 0x15	; 21
    23aa:	91 05       	cpc	r25, r1
					PORTE.OUT=0b00011000;
    23ac:	5c f0       	brlt	.+22     	; 0x23c4 <main+0x178>
    23ae:	88 e1       	ldi	r24, 0x18	; 24
    23b0:	f3 01       	movw	r30, r6
					gfx_mono_draw_string("Rumah aman           ", 0, 16, &sysfont);
    23b2:	84 83       	std	Z+4, r24	; 0x04
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e2       	ldi	r19, 0x20	; 32
    23b8:	40 e1       	ldi	r20, 0x10	; 16
    23ba:	60 e0       	ldi	r22, 0x00	; 0
    23bc:	8b e2       	ldi	r24, 0x2B	; 43
    23be:	90 e2       	ldi	r25, 0x20	; 32
    23c0:	27 de       	rcall	.-946    	; 0x2010 <gfx_mono_draw_string>
				}
				else if (newscore > 5) {
    23c2:	1f c0       	rjmp	.+62     	; 0x2402 <main+0x1b6>
    23c4:	06 97       	sbiw	r24, 0x06	; 6
					PORTE.OUT=0b00011000;
    23c6:	5c f0       	brlt	.+22     	; 0x23de <main+0x192>
    23c8:	88 e1       	ldi	r24, 0x18	; 24
    23ca:	f3 01       	movw	r30, r6
					gfx_mono_draw_string("Ada yang mencurigakan", 0, 16, &sysfont);
    23cc:	84 83       	std	Z+4, r24	; 0x04
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e2       	ldi	r19, 0x20	; 32
    23d2:	40 e1       	ldi	r20, 0x10	; 16
    23d4:	60 e0       	ldi	r22, 0x00	; 0
    23d6:	81 e4       	ldi	r24, 0x41	; 65
    23d8:	90 e2       	ldi	r25, 0x20	; 32
				}
				else {
					PORTE.OUT=0b00011010;
    23da:	1a de       	rcall	.-972    	; 0x2010 <gfx_mono_draw_string>
    23dc:	12 c0       	rjmp	.+36     	; 0x2402 <main+0x1b6>
    23de:	2a e1       	ldi	r18, 0x1A	; 26
					delay_ms(50);
    23e0:	f3 01       	movw	r30, r6
    23e2:	24 83       	std	Z+4, r18	; 0x04
    23e4:	6b e1       	ldi	r22, 0x1B	; 27
    23e6:	71 e4       	ldi	r23, 0x41	; 65
    23e8:	80 e0       	ldi	r24, 0x00	; 0
					gfx_mono_draw_string("BAHAYA!!!!!!         ", 0, 16, &sysfont);
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	fe de       	rcall	.-516    	; 0x21ea <__portable_avr_delay_cycles>
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e2       	ldi	r19, 0x20	; 32
    23f2:	40 e1       	ldi	r20, 0x10	; 16
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	87 e5       	ldi	r24, 0x57	; 87
					PORTE.OUT=0b00011000;
    23f8:	90 e2       	ldi	r25, 0x20	; 32
    23fa:	0a de       	rcall	.-1004   	; 0x2010 <gfx_mono_draw_string>
    23fc:	88 e1       	ldi	r24, 0x18	; 24
				}
				gfx_mono_draw_string("Rumah terkunci", 0, 8, &sysfont);
    23fe:	f3 01       	movw	r30, r6
    2400:	84 83       	std	Z+4, r24	; 0x04
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e2       	ldi	r19, 0x20	; 32
    2406:	48 e0       	ldi	r20, 0x08	; 8
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	8d e6       	ldi	r24, 0x6D	; 109
    240c:	90 e2       	ldi	r25, 0x20	; 32
			} else {
				gfx_mono_draw_string("Rumah terbuka ", 0, 8, &sysfont);
    240e:	00 de       	rcall	.-1024   	; 0x2010 <gfx_mono_draw_string>
    2410:	0e c0       	rjmp	.+28     	; 0x242e <main+0x1e2>
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e2       	ldi	r19, 0x20	; 32
    2416:	48 e0       	ldi	r20, 0x08	; 8
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	8c e7       	ldi	r24, 0x7C	; 124
				gfx_mono_draw_string("                     ", 0, 16, &sysfont);
    241c:	90 e2       	ldi	r25, 0x20	; 32
    241e:	f8 dd       	rcall	.-1040   	; 0x2010 <gfx_mono_draw_string>
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e2       	ldi	r19, 0x20	; 32
    2424:	40 e1       	ldi	r20, 0x10	; 16
    2426:	60 e0       	ldi	r22, 0x00	; 0
    2428:	8b e8       	ldi	r24, 0x8B	; 139
			}
			snprintf(buffarray, sizeof(buffarray), "Jarak: %d cm  ", newscore);
    242a:	90 e2       	ldi	r25, 0x20	; 32
    242c:	f1 dd       	rcall	.-1054   	; 0x2010 <gfx_mono_draw_string>
    242e:	af 92       	push	r10
    2430:	bf 92       	push	r11
    2432:	ff 92       	push	r15
    2434:	ef 92       	push	r14
    2436:	1f 92       	push	r1
    2438:	4f 92       	push	r4
    243a:	1f 93       	push	r17
    243c:	0f 93       	push	r16
			gfx_mono_draw_string(buffarray, 0, 24, &sysfont);
    243e:	5e d1       	rcall	.+700    	; 0x26fc <snprintf>
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e2       	ldi	r19, 0x20	; 32
    2444:	48 e1       	ldi	r20, 0x18	; 24
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	c8 01       	movw	r24, r16
    244a:	e2 dd       	rcall	.-1084   	; 0x2010 <gfx_mono_draw_string>
			incremental = 0;
    244c:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <incremental>
    2450:	10 92 b5 23 	sts	0x23B5, r1	; 0x8023b5 <incremental+0x1>
    2454:	8d b7       	in	r24, 0x3d	; 61
    2456:	9e b7       	in	r25, 0x3e	; 62
    2458:	08 96       	adiw	r24, 0x08	; 8
    245a:	8d bf       	out	0x3d, r24	; 61
    245c:	9e bf       	out	0x3e, r25	; 62
    245e:	f4 01       	movw	r30, r8
    2460:	80 85       	ldd	r24, Z+8	; 0x08
		}
		
		//BUTTONS
		//check if button pressed
		if(ioport_get_pin_level(GPIO_PUSH_BUTTON_1)==0){
    2462:	81 fd       	sbrc	r24, 1
    2464:	3e cf       	rjmp	.-388    	; 0x22e2 <main+0x96>
			locked = (locked==0) ? 1 : 0;				//toggle state
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	cd 28       	or	r12, r13
    246a:	09 f0       	breq	.+2      	; 0x246e <main+0x222>
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	c8 2e       	mov	r12, r24
    2470:	d1 2c       	mov	r13, r1
    2472:	37 cf       	rjmp	.-402    	; 0x22e2 <main+0x96>

00002474 <__fixsfsi>:
    2474:	04 d0       	rcall	.+8      	; 0x247e <__fixunssfsi>
    2476:	68 94       	set
    2478:	b1 11       	cpse	r27, r1
    247a:	8d c0       	rjmp	.+282    	; 0x2596 <__fp_szero>
    247c:	08 95       	ret

0000247e <__fixunssfsi>:
    247e:	70 d0       	rcall	.+224    	; 0x2560 <__fp_splitA>
    2480:	88 f0       	brcs	.+34     	; 0x24a4 <__fixunssfsi+0x26>
    2482:	9f 57       	subi	r25, 0x7F	; 127
    2484:	90 f0       	brcs	.+36     	; 0x24aa <__fixunssfsi+0x2c>
    2486:	b9 2f       	mov	r27, r25
    2488:	99 27       	eor	r25, r25
    248a:	b7 51       	subi	r27, 0x17	; 23
    248c:	a0 f0       	brcs	.+40     	; 0x24b6 <__fixunssfsi+0x38>
    248e:	d1 f0       	breq	.+52     	; 0x24c4 <__fixunssfsi+0x46>
    2490:	66 0f       	add	r22, r22
    2492:	77 1f       	adc	r23, r23
    2494:	88 1f       	adc	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	1a f0       	brmi	.+6      	; 0x24a0 <__fixunssfsi+0x22>
    249a:	ba 95       	dec	r27
    249c:	c9 f7       	brne	.-14     	; 0x2490 <__fixunssfsi+0x12>
    249e:	12 c0       	rjmp	.+36     	; 0x24c4 <__fixunssfsi+0x46>
    24a0:	b1 30       	cpi	r27, 0x01	; 1
    24a2:	81 f0       	breq	.+32     	; 0x24c4 <__fixunssfsi+0x46>
    24a4:	77 d0       	rcall	.+238    	; 0x2594 <__fp_zero>
    24a6:	b1 e0       	ldi	r27, 0x01	; 1
    24a8:	08 95       	ret
    24aa:	74 c0       	rjmp	.+232    	; 0x2594 <__fp_zero>
    24ac:	67 2f       	mov	r22, r23
    24ae:	78 2f       	mov	r23, r24
    24b0:	88 27       	eor	r24, r24
    24b2:	b8 5f       	subi	r27, 0xF8	; 248
    24b4:	39 f0       	breq	.+14     	; 0x24c4 <__fixunssfsi+0x46>
    24b6:	b9 3f       	cpi	r27, 0xF9	; 249
    24b8:	cc f3       	brlt	.-14     	; 0x24ac <__fixunssfsi+0x2e>
    24ba:	86 95       	lsr	r24
    24bc:	77 95       	ror	r23
    24be:	67 95       	ror	r22
    24c0:	b3 95       	inc	r27
    24c2:	d9 f7       	brne	.-10     	; 0x24ba <__fixunssfsi+0x3c>
    24c4:	3e f4       	brtc	.+14     	; 0x24d4 <__fixunssfsi+0x56>
    24c6:	90 95       	com	r25
    24c8:	80 95       	com	r24
    24ca:	70 95       	com	r23
    24cc:	61 95       	neg	r22
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	8f 4f       	sbci	r24, 0xFF	; 255
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	08 95       	ret

000024d6 <__floatunsisf>:
    24d6:	e8 94       	clt
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <__floatsisf+0x12>

000024da <__floatsisf>:
    24da:	97 fb       	bst	r25, 7
    24dc:	3e f4       	brtc	.+14     	; 0x24ec <__floatsisf+0x12>
    24de:	90 95       	com	r25
    24e0:	80 95       	com	r24
    24e2:	70 95       	com	r23
    24e4:	61 95       	neg	r22
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255
    24e8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	99 23       	and	r25, r25
    24ee:	a9 f0       	breq	.+42     	; 0x251a <__floatsisf+0x40>
    24f0:	f9 2f       	mov	r31, r25
    24f2:	96 e9       	ldi	r25, 0x96	; 150
    24f4:	bb 27       	eor	r27, r27
    24f6:	93 95       	inc	r25
    24f8:	f6 95       	lsr	r31
    24fa:	87 95       	ror	r24
    24fc:	77 95       	ror	r23
    24fe:	67 95       	ror	r22
    2500:	b7 95       	ror	r27
    2502:	f1 11       	cpse	r31, r1
    2504:	f8 cf       	rjmp	.-16     	; 0x24f6 <__floatsisf+0x1c>
    2506:	fa f4       	brpl	.+62     	; 0x2546 <__floatsisf+0x6c>
    2508:	bb 0f       	add	r27, r27
    250a:	11 f4       	brne	.+4      	; 0x2510 <__floatsisf+0x36>
    250c:	60 ff       	sbrs	r22, 0
    250e:	1b c0       	rjmp	.+54     	; 0x2546 <__floatsisf+0x6c>
    2510:	6f 5f       	subi	r22, 0xFF	; 255
    2512:	7f 4f       	sbci	r23, 0xFF	; 255
    2514:	8f 4f       	sbci	r24, 0xFF	; 255
    2516:	9f 4f       	sbci	r25, 0xFF	; 255
    2518:	16 c0       	rjmp	.+44     	; 0x2546 <__floatsisf+0x6c>
    251a:	88 23       	and	r24, r24
    251c:	11 f0       	breq	.+4      	; 0x2522 <__floatsisf+0x48>
    251e:	96 e9       	ldi	r25, 0x96	; 150
    2520:	11 c0       	rjmp	.+34     	; 0x2544 <__floatsisf+0x6a>
    2522:	77 23       	and	r23, r23
    2524:	21 f0       	breq	.+8      	; 0x252e <__floatsisf+0x54>
    2526:	9e e8       	ldi	r25, 0x8E	; 142
    2528:	87 2f       	mov	r24, r23
    252a:	76 2f       	mov	r23, r22
    252c:	05 c0       	rjmp	.+10     	; 0x2538 <__floatsisf+0x5e>
    252e:	66 23       	and	r22, r22
    2530:	71 f0       	breq	.+28     	; 0x254e <__floatsisf+0x74>
    2532:	96 e8       	ldi	r25, 0x86	; 134
    2534:	86 2f       	mov	r24, r22
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	2a f0       	brmi	.+10     	; 0x2546 <__floatsisf+0x6c>
    253c:	9a 95       	dec	r25
    253e:	66 0f       	add	r22, r22
    2540:	77 1f       	adc	r23, r23
    2542:	88 1f       	adc	r24, r24
    2544:	da f7       	brpl	.-10     	; 0x253c <__floatsisf+0x62>
    2546:	88 0f       	add	r24, r24
    2548:	96 95       	lsr	r25
    254a:	87 95       	ror	r24
    254c:	97 f9       	bld	r25, 7
    254e:	08 95       	ret

00002550 <__fp_split3>:
    2550:	57 fd       	sbrc	r21, 7
    2552:	90 58       	subi	r25, 0x80	; 128
    2554:	44 0f       	add	r20, r20
    2556:	55 1f       	adc	r21, r21
    2558:	59 f0       	breq	.+22     	; 0x2570 <__fp_splitA+0x10>
    255a:	5f 3f       	cpi	r21, 0xFF	; 255
    255c:	71 f0       	breq	.+28     	; 0x257a <__fp_splitA+0x1a>
    255e:	47 95       	ror	r20

00002560 <__fp_splitA>:
    2560:	88 0f       	add	r24, r24
    2562:	97 fb       	bst	r25, 7
    2564:	99 1f       	adc	r25, r25
    2566:	61 f0       	breq	.+24     	; 0x2580 <__fp_splitA+0x20>
    2568:	9f 3f       	cpi	r25, 0xFF	; 255
    256a:	79 f0       	breq	.+30     	; 0x258a <__fp_splitA+0x2a>
    256c:	87 95       	ror	r24
    256e:	08 95       	ret
    2570:	12 16       	cp	r1, r18
    2572:	13 06       	cpc	r1, r19
    2574:	14 06       	cpc	r1, r20
    2576:	55 1f       	adc	r21, r21
    2578:	f2 cf       	rjmp	.-28     	; 0x255e <__fp_split3+0xe>
    257a:	46 95       	lsr	r20
    257c:	f1 df       	rcall	.-30     	; 0x2560 <__fp_splitA>
    257e:	08 c0       	rjmp	.+16     	; 0x2590 <__fp_splitA+0x30>
    2580:	16 16       	cp	r1, r22
    2582:	17 06       	cpc	r1, r23
    2584:	18 06       	cpc	r1, r24
    2586:	99 1f       	adc	r25, r25
    2588:	f1 cf       	rjmp	.-30     	; 0x256c <__fp_splitA+0xc>
    258a:	86 95       	lsr	r24
    258c:	71 05       	cpc	r23, r1
    258e:	61 05       	cpc	r22, r1
    2590:	08 94       	sec
    2592:	08 95       	ret

00002594 <__fp_zero>:
    2594:	e8 94       	clt

00002596 <__fp_szero>:
    2596:	bb 27       	eor	r27, r27
    2598:	66 27       	eor	r22, r22
    259a:	77 27       	eor	r23, r23
    259c:	cb 01       	movw	r24, r22
    259e:	97 f9       	bld	r25, 7
    25a0:	08 95       	ret

000025a2 <__mulsf3>:
    25a2:	0b d0       	rcall	.+22     	; 0x25ba <__mulsf3x>
    25a4:	78 c0       	rjmp	.+240    	; 0x2696 <__fp_round>
    25a6:	69 d0       	rcall	.+210    	; 0x267a <__fp_pscA>
    25a8:	28 f0       	brcs	.+10     	; 0x25b4 <__mulsf3+0x12>
    25aa:	6e d0       	rcall	.+220    	; 0x2688 <__fp_pscB>
    25ac:	18 f0       	brcs	.+6      	; 0x25b4 <__mulsf3+0x12>
    25ae:	95 23       	and	r25, r21
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <__mulsf3+0x12>
    25b2:	5a c0       	rjmp	.+180    	; 0x2668 <__fp_inf>
    25b4:	5f c0       	rjmp	.+190    	; 0x2674 <__fp_nan>
    25b6:	11 24       	eor	r1, r1
    25b8:	ee cf       	rjmp	.-36     	; 0x2596 <__fp_szero>

000025ba <__mulsf3x>:
    25ba:	ca df       	rcall	.-108    	; 0x2550 <__fp_split3>
    25bc:	a0 f3       	brcs	.-24     	; 0x25a6 <__mulsf3+0x4>

000025be <__mulsf3_pse>:
    25be:	95 9f       	mul	r25, r21
    25c0:	d1 f3       	breq	.-12     	; 0x25b6 <__mulsf3+0x14>
    25c2:	95 0f       	add	r25, r21
    25c4:	50 e0       	ldi	r21, 0x00	; 0
    25c6:	55 1f       	adc	r21, r21
    25c8:	62 9f       	mul	r22, r18
    25ca:	f0 01       	movw	r30, r0
    25cc:	72 9f       	mul	r23, r18
    25ce:	bb 27       	eor	r27, r27
    25d0:	f0 0d       	add	r31, r0
    25d2:	b1 1d       	adc	r27, r1
    25d4:	63 9f       	mul	r22, r19
    25d6:	aa 27       	eor	r26, r26
    25d8:	f0 0d       	add	r31, r0
    25da:	b1 1d       	adc	r27, r1
    25dc:	aa 1f       	adc	r26, r26
    25de:	64 9f       	mul	r22, r20
    25e0:	66 27       	eor	r22, r22
    25e2:	b0 0d       	add	r27, r0
    25e4:	a1 1d       	adc	r26, r1
    25e6:	66 1f       	adc	r22, r22
    25e8:	82 9f       	mul	r24, r18
    25ea:	22 27       	eor	r18, r18
    25ec:	b0 0d       	add	r27, r0
    25ee:	a1 1d       	adc	r26, r1
    25f0:	62 1f       	adc	r22, r18
    25f2:	73 9f       	mul	r23, r19
    25f4:	b0 0d       	add	r27, r0
    25f6:	a1 1d       	adc	r26, r1
    25f8:	62 1f       	adc	r22, r18
    25fa:	83 9f       	mul	r24, r19
    25fc:	a0 0d       	add	r26, r0
    25fe:	61 1d       	adc	r22, r1
    2600:	22 1f       	adc	r18, r18
    2602:	74 9f       	mul	r23, r20
    2604:	33 27       	eor	r19, r19
    2606:	a0 0d       	add	r26, r0
    2608:	61 1d       	adc	r22, r1
    260a:	23 1f       	adc	r18, r19
    260c:	84 9f       	mul	r24, r20
    260e:	60 0d       	add	r22, r0
    2610:	21 1d       	adc	r18, r1
    2612:	82 2f       	mov	r24, r18
    2614:	76 2f       	mov	r23, r22
    2616:	6a 2f       	mov	r22, r26
    2618:	11 24       	eor	r1, r1
    261a:	9f 57       	subi	r25, 0x7F	; 127
    261c:	50 40       	sbci	r21, 0x00	; 0
    261e:	8a f0       	brmi	.+34     	; 0x2642 <__mulsf3_pse+0x84>
    2620:	e1 f0       	breq	.+56     	; 0x265a <__mulsf3_pse+0x9c>
    2622:	88 23       	and	r24, r24
    2624:	4a f0       	brmi	.+18     	; 0x2638 <__mulsf3_pse+0x7a>
    2626:	ee 0f       	add	r30, r30
    2628:	ff 1f       	adc	r31, r31
    262a:	bb 1f       	adc	r27, r27
    262c:	66 1f       	adc	r22, r22
    262e:	77 1f       	adc	r23, r23
    2630:	88 1f       	adc	r24, r24
    2632:	91 50       	subi	r25, 0x01	; 1
    2634:	50 40       	sbci	r21, 0x00	; 0
    2636:	a9 f7       	brne	.-22     	; 0x2622 <__mulsf3_pse+0x64>
    2638:	9e 3f       	cpi	r25, 0xFE	; 254
    263a:	51 05       	cpc	r21, r1
    263c:	70 f0       	brcs	.+28     	; 0x265a <__mulsf3_pse+0x9c>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <__fp_inf>
    2640:	aa cf       	rjmp	.-172    	; 0x2596 <__fp_szero>
    2642:	5f 3f       	cpi	r21, 0xFF	; 255
    2644:	ec f3       	brlt	.-6      	; 0x2640 <__mulsf3_pse+0x82>
    2646:	98 3e       	cpi	r25, 0xE8	; 232
    2648:	dc f3       	brlt	.-10     	; 0x2640 <__mulsf3_pse+0x82>
    264a:	86 95       	lsr	r24
    264c:	77 95       	ror	r23
    264e:	67 95       	ror	r22
    2650:	b7 95       	ror	r27
    2652:	f7 95       	ror	r31
    2654:	e7 95       	ror	r30
    2656:	9f 5f       	subi	r25, 0xFF	; 255
    2658:	c1 f7       	brne	.-16     	; 0x264a <__mulsf3_pse+0x8c>
    265a:	fe 2b       	or	r31, r30
    265c:	88 0f       	add	r24, r24
    265e:	91 1d       	adc	r25, r1
    2660:	96 95       	lsr	r25
    2662:	87 95       	ror	r24
    2664:	97 f9       	bld	r25, 7
    2666:	08 95       	ret

00002668 <__fp_inf>:
    2668:	97 f9       	bld	r25, 7
    266a:	9f 67       	ori	r25, 0x7F	; 127
    266c:	80 e8       	ldi	r24, 0x80	; 128
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	08 95       	ret

00002674 <__fp_nan>:
    2674:	9f ef       	ldi	r25, 0xFF	; 255
    2676:	80 ec       	ldi	r24, 0xC0	; 192
    2678:	08 95       	ret

0000267a <__fp_pscA>:
    267a:	00 24       	eor	r0, r0
    267c:	0a 94       	dec	r0
    267e:	16 16       	cp	r1, r22
    2680:	17 06       	cpc	r1, r23
    2682:	18 06       	cpc	r1, r24
    2684:	09 06       	cpc	r0, r25
    2686:	08 95       	ret

00002688 <__fp_pscB>:
    2688:	00 24       	eor	r0, r0
    268a:	0a 94       	dec	r0
    268c:	12 16       	cp	r1, r18
    268e:	13 06       	cpc	r1, r19
    2690:	14 06       	cpc	r1, r20
    2692:	05 06       	cpc	r0, r21
    2694:	08 95       	ret

00002696 <__fp_round>:
    2696:	09 2e       	mov	r0, r25
    2698:	03 94       	inc	r0
    269a:	00 0c       	add	r0, r0
    269c:	11 f4       	brne	.+4      	; 0x26a2 <__fp_round+0xc>
    269e:	88 23       	and	r24, r24
    26a0:	52 f0       	brmi	.+20     	; 0x26b6 <__fp_round+0x20>
    26a2:	bb 0f       	add	r27, r27
    26a4:	40 f4       	brcc	.+16     	; 0x26b6 <__fp_round+0x20>
    26a6:	bf 2b       	or	r27, r31
    26a8:	11 f4       	brne	.+4      	; 0x26ae <__fp_round+0x18>
    26aa:	60 ff       	sbrs	r22, 0
    26ac:	04 c0       	rjmp	.+8      	; 0x26b6 <__fp_round+0x20>
    26ae:	6f 5f       	subi	r22, 0xFF	; 255
    26b0:	7f 4f       	sbci	r23, 0xFF	; 255
    26b2:	8f 4f       	sbci	r24, 0xFF	; 255
    26b4:	9f 4f       	sbci	r25, 0xFF	; 255
    26b6:	08 95       	ret

000026b8 <__udivmodsi4>:
    26b8:	a1 e2       	ldi	r26, 0x21	; 33
    26ba:	1a 2e       	mov	r1, r26
    26bc:	aa 1b       	sub	r26, r26
    26be:	bb 1b       	sub	r27, r27
    26c0:	fd 01       	movw	r30, r26
    26c2:	0d c0       	rjmp	.+26     	; 0x26de <__udivmodsi4_ep>

000026c4 <__udivmodsi4_loop>:
    26c4:	aa 1f       	adc	r26, r26
    26c6:	bb 1f       	adc	r27, r27
    26c8:	ee 1f       	adc	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	a2 17       	cp	r26, r18
    26ce:	b3 07       	cpc	r27, r19
    26d0:	e4 07       	cpc	r30, r20
    26d2:	f5 07       	cpc	r31, r21
    26d4:	20 f0       	brcs	.+8      	; 0x26de <__udivmodsi4_ep>
    26d6:	a2 1b       	sub	r26, r18
    26d8:	b3 0b       	sbc	r27, r19
    26da:	e4 0b       	sbc	r30, r20
    26dc:	f5 0b       	sbc	r31, r21

000026de <__udivmodsi4_ep>:
    26de:	66 1f       	adc	r22, r22
    26e0:	77 1f       	adc	r23, r23
    26e2:	88 1f       	adc	r24, r24
    26e4:	99 1f       	adc	r25, r25
    26e6:	1a 94       	dec	r1
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <__udivmodsi4_loop>
    26ea:	60 95       	com	r22
    26ec:	70 95       	com	r23
    26ee:	80 95       	com	r24
    26f0:	90 95       	com	r25
    26f2:	9b 01       	movw	r18, r22
    26f4:	ac 01       	movw	r20, r24
    26f6:	bd 01       	movw	r22, r26
    26f8:	cf 01       	movw	r24, r30
    26fa:	08 95       	ret

000026fc <snprintf>:
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	cf 93       	push	r28
    2702:	df 93       	push	r29
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	2e 97       	sbiw	r28, 0x0e	; 14
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	de bf       	out	0x3e, r29	; 62
    270e:	0e 89       	ldd	r16, Y+22	; 0x16
    2710:	1f 89       	ldd	r17, Y+23	; 0x17
    2712:	88 8d       	ldd	r24, Y+24	; 0x18
    2714:	99 8d       	ldd	r25, Y+25	; 0x19
    2716:	26 e0       	ldi	r18, 0x06	; 6
    2718:	2c 83       	std	Y+4, r18	; 0x04
    271a:	09 83       	std	Y+1, r16	; 0x01
    271c:	1a 83       	std	Y+2, r17	; 0x02
    271e:	97 ff       	sbrs	r25, 7
    2720:	02 c0       	rjmp	.+4      	; 0x2726 <snprintf+0x2a>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	90 e8       	ldi	r25, 0x80	; 128
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	9e 83       	std	Y+6, r25	; 0x06
    272c:	ae 01       	movw	r20, r28
    272e:	44 5e       	subi	r20, 0xE4	; 228
    2730:	5f 4f       	sbci	r21, 0xFF	; 255
    2732:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2734:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2736:	ce 01       	movw	r24, r28
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	16 d0       	rcall	.+44     	; 0x2768 <vfprintf>
    273c:	4d 81       	ldd	r20, Y+5	; 0x05
    273e:	5e 81       	ldd	r21, Y+6	; 0x06
    2740:	57 fd       	sbrc	r21, 7
    2742:	0a c0       	rjmp	.+20     	; 0x2758 <snprintf+0x5c>
    2744:	2f 81       	ldd	r18, Y+7	; 0x07
    2746:	38 85       	ldd	r19, Y+8	; 0x08
    2748:	42 17       	cp	r20, r18
    274a:	53 07       	cpc	r21, r19
    274c:	0c f4       	brge	.+2      	; 0x2750 <snprintf+0x54>
    274e:	9a 01       	movw	r18, r20
    2750:	f8 01       	movw	r30, r16
    2752:	e2 0f       	add	r30, r18
    2754:	f3 1f       	adc	r31, r19
    2756:	10 82       	st	Z, r1
    2758:	2e 96       	adiw	r28, 0x0e	; 14
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	08 95       	ret

00002768 <vfprintf>:
    2768:	2f 92       	push	r2
    276a:	3f 92       	push	r3
    276c:	4f 92       	push	r4
    276e:	5f 92       	push	r5
    2770:	6f 92       	push	r6
    2772:	7f 92       	push	r7
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	cf 93       	push	r28
    278a:	df 93       	push	r29
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	2b 97       	sbiw	r28, 0x0b	; 11
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	6c 01       	movw	r12, r24
    2798:	7b 01       	movw	r14, r22
    279a:	8a 01       	movw	r16, r20
    279c:	fc 01       	movw	r30, r24
    279e:	16 82       	std	Z+6, r1	; 0x06
    27a0:	17 82       	std	Z+7, r1	; 0x07
    27a2:	83 81       	ldd	r24, Z+3	; 0x03
    27a4:	81 ff       	sbrs	r24, 1
    27a6:	bf c1       	rjmp	.+894    	; 0x2b26 <vfprintf+0x3be>
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	3c 01       	movw	r6, r24
    27ae:	f6 01       	movw	r30, r12
    27b0:	93 81       	ldd	r25, Z+3	; 0x03
    27b2:	f7 01       	movw	r30, r14
    27b4:	93 fd       	sbrc	r25, 3
    27b6:	85 91       	lpm	r24, Z+
    27b8:	93 ff       	sbrs	r25, 3
    27ba:	81 91       	ld	r24, Z+
    27bc:	7f 01       	movw	r14, r30
    27be:	88 23       	and	r24, r24
    27c0:	09 f4       	brne	.+2      	; 0x27c4 <vfprintf+0x5c>
    27c2:	ad c1       	rjmp	.+858    	; 0x2b1e <vfprintf+0x3b6>
    27c4:	85 32       	cpi	r24, 0x25	; 37
    27c6:	39 f4       	brne	.+14     	; 0x27d6 <vfprintf+0x6e>
    27c8:	93 fd       	sbrc	r25, 3
    27ca:	85 91       	lpm	r24, Z+
    27cc:	93 ff       	sbrs	r25, 3
    27ce:	81 91       	ld	r24, Z+
    27d0:	7f 01       	movw	r14, r30
    27d2:	85 32       	cpi	r24, 0x25	; 37
    27d4:	21 f4       	brne	.+8      	; 0x27de <vfprintf+0x76>
    27d6:	b6 01       	movw	r22, r12
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	d3 d1       	rcall	.+934    	; 0x2b82 <fputc>
    27dc:	e8 cf       	rjmp	.-48     	; 0x27ae <vfprintf+0x46>
    27de:	91 2c       	mov	r9, r1
    27e0:	21 2c       	mov	r2, r1
    27e2:	31 2c       	mov	r3, r1
    27e4:	ff e1       	ldi	r31, 0x1F	; 31
    27e6:	f3 15       	cp	r31, r3
    27e8:	d8 f0       	brcs	.+54     	; 0x2820 <vfprintf+0xb8>
    27ea:	8b 32       	cpi	r24, 0x2B	; 43
    27ec:	79 f0       	breq	.+30     	; 0x280c <vfprintf+0xa4>
    27ee:	38 f4       	brcc	.+14     	; 0x27fe <vfprintf+0x96>
    27f0:	80 32       	cpi	r24, 0x20	; 32
    27f2:	79 f0       	breq	.+30     	; 0x2812 <vfprintf+0xaa>
    27f4:	83 32       	cpi	r24, 0x23	; 35
    27f6:	a1 f4       	brne	.+40     	; 0x2820 <vfprintf+0xb8>
    27f8:	23 2d       	mov	r18, r3
    27fa:	20 61       	ori	r18, 0x10	; 16
    27fc:	1d c0       	rjmp	.+58     	; 0x2838 <vfprintf+0xd0>
    27fe:	8d 32       	cpi	r24, 0x2D	; 45
    2800:	61 f0       	breq	.+24     	; 0x281a <vfprintf+0xb2>
    2802:	80 33       	cpi	r24, 0x30	; 48
    2804:	69 f4       	brne	.+26     	; 0x2820 <vfprintf+0xb8>
    2806:	23 2d       	mov	r18, r3
    2808:	21 60       	ori	r18, 0x01	; 1
    280a:	16 c0       	rjmp	.+44     	; 0x2838 <vfprintf+0xd0>
    280c:	83 2d       	mov	r24, r3
    280e:	82 60       	ori	r24, 0x02	; 2
    2810:	38 2e       	mov	r3, r24
    2812:	e3 2d       	mov	r30, r3
    2814:	e4 60       	ori	r30, 0x04	; 4
    2816:	3e 2e       	mov	r3, r30
    2818:	2a c0       	rjmp	.+84     	; 0x286e <vfprintf+0x106>
    281a:	f3 2d       	mov	r31, r3
    281c:	f8 60       	ori	r31, 0x08	; 8
    281e:	1d c0       	rjmp	.+58     	; 0x285a <vfprintf+0xf2>
    2820:	37 fc       	sbrc	r3, 7
    2822:	2d c0       	rjmp	.+90     	; 0x287e <vfprintf+0x116>
    2824:	20 ed       	ldi	r18, 0xD0	; 208
    2826:	28 0f       	add	r18, r24
    2828:	2a 30       	cpi	r18, 0x0A	; 10
    282a:	40 f0       	brcs	.+16     	; 0x283c <vfprintf+0xd4>
    282c:	8e 32       	cpi	r24, 0x2E	; 46
    282e:	b9 f4       	brne	.+46     	; 0x285e <vfprintf+0xf6>
    2830:	36 fc       	sbrc	r3, 6
    2832:	75 c1       	rjmp	.+746    	; 0x2b1e <vfprintf+0x3b6>
    2834:	23 2d       	mov	r18, r3
    2836:	20 64       	ori	r18, 0x40	; 64
    2838:	32 2e       	mov	r3, r18
    283a:	19 c0       	rjmp	.+50     	; 0x286e <vfprintf+0x106>
    283c:	36 fe       	sbrs	r3, 6
    283e:	06 c0       	rjmp	.+12     	; 0x284c <vfprintf+0xe4>
    2840:	8a e0       	ldi	r24, 0x0A	; 10
    2842:	98 9e       	mul	r9, r24
    2844:	20 0d       	add	r18, r0
    2846:	11 24       	eor	r1, r1
    2848:	92 2e       	mov	r9, r18
    284a:	11 c0       	rjmp	.+34     	; 0x286e <vfprintf+0x106>
    284c:	ea e0       	ldi	r30, 0x0A	; 10
    284e:	2e 9e       	mul	r2, r30
    2850:	20 0d       	add	r18, r0
    2852:	11 24       	eor	r1, r1
    2854:	22 2e       	mov	r2, r18
    2856:	f3 2d       	mov	r31, r3
    2858:	f0 62       	ori	r31, 0x20	; 32
    285a:	3f 2e       	mov	r3, r31
    285c:	08 c0       	rjmp	.+16     	; 0x286e <vfprintf+0x106>
    285e:	8c 36       	cpi	r24, 0x6C	; 108
    2860:	21 f4       	brne	.+8      	; 0x286a <vfprintf+0x102>
    2862:	83 2d       	mov	r24, r3
    2864:	80 68       	ori	r24, 0x80	; 128
    2866:	38 2e       	mov	r3, r24
    2868:	02 c0       	rjmp	.+4      	; 0x286e <vfprintf+0x106>
    286a:	88 36       	cpi	r24, 0x68	; 104
    286c:	41 f4       	brne	.+16     	; 0x287e <vfprintf+0x116>
    286e:	f7 01       	movw	r30, r14
    2870:	93 fd       	sbrc	r25, 3
    2872:	85 91       	lpm	r24, Z+
    2874:	93 ff       	sbrs	r25, 3
    2876:	81 91       	ld	r24, Z+
    2878:	7f 01       	movw	r14, r30
    287a:	81 11       	cpse	r24, r1
    287c:	b3 cf       	rjmp	.-154    	; 0x27e4 <vfprintf+0x7c>
    287e:	98 2f       	mov	r25, r24
    2880:	9f 7d       	andi	r25, 0xDF	; 223
    2882:	95 54       	subi	r25, 0x45	; 69
    2884:	93 30       	cpi	r25, 0x03	; 3
    2886:	28 f4       	brcc	.+10     	; 0x2892 <vfprintf+0x12a>
    2888:	0c 5f       	subi	r16, 0xFC	; 252
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	9f e3       	ldi	r25, 0x3F	; 63
    288e:	99 83       	std	Y+1, r25	; 0x01
    2890:	0d c0       	rjmp	.+26     	; 0x28ac <vfprintf+0x144>
    2892:	83 36       	cpi	r24, 0x63	; 99
    2894:	31 f0       	breq	.+12     	; 0x28a2 <vfprintf+0x13a>
    2896:	83 37       	cpi	r24, 0x73	; 115
    2898:	71 f0       	breq	.+28     	; 0x28b6 <vfprintf+0x14e>
    289a:	83 35       	cpi	r24, 0x53	; 83
    289c:	09 f0       	breq	.+2      	; 0x28a0 <vfprintf+0x138>
    289e:	55 c0       	rjmp	.+170    	; 0x294a <vfprintf+0x1e2>
    28a0:	20 c0       	rjmp	.+64     	; 0x28e2 <vfprintf+0x17a>
    28a2:	f8 01       	movw	r30, r16
    28a4:	80 81       	ld	r24, Z
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	0e 5f       	subi	r16, 0xFE	; 254
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
    28ac:	88 24       	eor	r8, r8
    28ae:	83 94       	inc	r8
    28b0:	91 2c       	mov	r9, r1
    28b2:	53 01       	movw	r10, r6
    28b4:	12 c0       	rjmp	.+36     	; 0x28da <vfprintf+0x172>
    28b6:	28 01       	movw	r4, r16
    28b8:	f2 e0       	ldi	r31, 0x02	; 2
    28ba:	4f 0e       	add	r4, r31
    28bc:	51 1c       	adc	r5, r1
    28be:	f8 01       	movw	r30, r16
    28c0:	a0 80       	ld	r10, Z
    28c2:	b1 80       	ldd	r11, Z+1	; 0x01
    28c4:	36 fe       	sbrs	r3, 6
    28c6:	03 c0       	rjmp	.+6      	; 0x28ce <vfprintf+0x166>
    28c8:	69 2d       	mov	r22, r9
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	02 c0       	rjmp	.+4      	; 0x28d2 <vfprintf+0x16a>
    28ce:	6f ef       	ldi	r22, 0xFF	; 255
    28d0:	7f ef       	ldi	r23, 0xFF	; 255
    28d2:	c5 01       	movw	r24, r10
    28d4:	4b d1       	rcall	.+662    	; 0x2b6c <strnlen>
    28d6:	4c 01       	movw	r8, r24
    28d8:	82 01       	movw	r16, r4
    28da:	f3 2d       	mov	r31, r3
    28dc:	ff 77       	andi	r31, 0x7F	; 127
    28de:	3f 2e       	mov	r3, r31
    28e0:	15 c0       	rjmp	.+42     	; 0x290c <vfprintf+0x1a4>
    28e2:	28 01       	movw	r4, r16
    28e4:	22 e0       	ldi	r18, 0x02	; 2
    28e6:	42 0e       	add	r4, r18
    28e8:	51 1c       	adc	r5, r1
    28ea:	f8 01       	movw	r30, r16
    28ec:	a0 80       	ld	r10, Z
    28ee:	b1 80       	ldd	r11, Z+1	; 0x01
    28f0:	36 fe       	sbrs	r3, 6
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <vfprintf+0x192>
    28f4:	69 2d       	mov	r22, r9
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <vfprintf+0x196>
    28fa:	6f ef       	ldi	r22, 0xFF	; 255
    28fc:	7f ef       	ldi	r23, 0xFF	; 255
    28fe:	c5 01       	movw	r24, r10
    2900:	2a d1       	rcall	.+596    	; 0x2b56 <strnlen_P>
    2902:	4c 01       	movw	r8, r24
    2904:	f3 2d       	mov	r31, r3
    2906:	f0 68       	ori	r31, 0x80	; 128
    2908:	3f 2e       	mov	r3, r31
    290a:	82 01       	movw	r16, r4
    290c:	33 fc       	sbrc	r3, 3
    290e:	19 c0       	rjmp	.+50     	; 0x2942 <vfprintf+0x1da>
    2910:	82 2d       	mov	r24, r2
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	88 16       	cp	r8, r24
    2916:	99 06       	cpc	r9, r25
    2918:	a0 f4       	brcc	.+40     	; 0x2942 <vfprintf+0x1da>
    291a:	b6 01       	movw	r22, r12
    291c:	80 e2       	ldi	r24, 0x20	; 32
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	30 d1       	rcall	.+608    	; 0x2b82 <fputc>
    2922:	2a 94       	dec	r2
    2924:	f5 cf       	rjmp	.-22     	; 0x2910 <vfprintf+0x1a8>
    2926:	f5 01       	movw	r30, r10
    2928:	37 fc       	sbrc	r3, 7
    292a:	85 91       	lpm	r24, Z+
    292c:	37 fe       	sbrs	r3, 7
    292e:	81 91       	ld	r24, Z+
    2930:	5f 01       	movw	r10, r30
    2932:	b6 01       	movw	r22, r12
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	25 d1       	rcall	.+586    	; 0x2b82 <fputc>
    2938:	21 10       	cpse	r2, r1
    293a:	2a 94       	dec	r2
    293c:	21 e0       	ldi	r18, 0x01	; 1
    293e:	82 1a       	sub	r8, r18
    2940:	91 08       	sbc	r9, r1
    2942:	81 14       	cp	r8, r1
    2944:	91 04       	cpc	r9, r1
    2946:	79 f7       	brne	.-34     	; 0x2926 <vfprintf+0x1be>
    2948:	e1 c0       	rjmp	.+450    	; 0x2b0c <vfprintf+0x3a4>
    294a:	84 36       	cpi	r24, 0x64	; 100
    294c:	11 f0       	breq	.+4      	; 0x2952 <vfprintf+0x1ea>
    294e:	89 36       	cpi	r24, 0x69	; 105
    2950:	39 f5       	brne	.+78     	; 0x29a0 <vfprintf+0x238>
    2952:	f8 01       	movw	r30, r16
    2954:	37 fe       	sbrs	r3, 7
    2956:	07 c0       	rjmp	.+14     	; 0x2966 <vfprintf+0x1fe>
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	0c 5f       	subi	r16, 0xFC	; 252
    2962:	1f 4f       	sbci	r17, 0xFF	; 255
    2964:	08 c0       	rjmp	.+16     	; 0x2976 <vfprintf+0x20e>
    2966:	60 81       	ld	r22, Z
    2968:	71 81       	ldd	r23, Z+1	; 0x01
    296a:	07 2e       	mov	r0, r23
    296c:	00 0c       	add	r0, r0
    296e:	88 0b       	sbc	r24, r24
    2970:	99 0b       	sbc	r25, r25
    2972:	0e 5f       	subi	r16, 0xFE	; 254
    2974:	1f 4f       	sbci	r17, 0xFF	; 255
    2976:	f3 2d       	mov	r31, r3
    2978:	ff 76       	andi	r31, 0x6F	; 111
    297a:	3f 2e       	mov	r3, r31
    297c:	97 ff       	sbrs	r25, 7
    297e:	09 c0       	rjmp	.+18     	; 0x2992 <vfprintf+0x22a>
    2980:	90 95       	com	r25
    2982:	80 95       	com	r24
    2984:	70 95       	com	r23
    2986:	61 95       	neg	r22
    2988:	7f 4f       	sbci	r23, 0xFF	; 255
    298a:	8f 4f       	sbci	r24, 0xFF	; 255
    298c:	9f 4f       	sbci	r25, 0xFF	; 255
    298e:	f0 68       	ori	r31, 0x80	; 128
    2990:	3f 2e       	mov	r3, r31
    2992:	2a e0       	ldi	r18, 0x0A	; 10
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	a3 01       	movw	r20, r6
    2998:	30 d1       	rcall	.+608    	; 0x2bfa <__ultoa_invert>
    299a:	88 2e       	mov	r8, r24
    299c:	86 18       	sub	r8, r6
    299e:	44 c0       	rjmp	.+136    	; 0x2a28 <vfprintf+0x2c0>
    29a0:	85 37       	cpi	r24, 0x75	; 117
    29a2:	31 f4       	brne	.+12     	; 0x29b0 <vfprintf+0x248>
    29a4:	23 2d       	mov	r18, r3
    29a6:	2f 7e       	andi	r18, 0xEF	; 239
    29a8:	b2 2e       	mov	r11, r18
    29aa:	2a e0       	ldi	r18, 0x0A	; 10
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	25 c0       	rjmp	.+74     	; 0x29fa <vfprintf+0x292>
    29b0:	93 2d       	mov	r25, r3
    29b2:	99 7f       	andi	r25, 0xF9	; 249
    29b4:	b9 2e       	mov	r11, r25
    29b6:	8f 36       	cpi	r24, 0x6F	; 111
    29b8:	c1 f0       	breq	.+48     	; 0x29ea <vfprintf+0x282>
    29ba:	18 f4       	brcc	.+6      	; 0x29c2 <vfprintf+0x25a>
    29bc:	88 35       	cpi	r24, 0x58	; 88
    29be:	79 f0       	breq	.+30     	; 0x29de <vfprintf+0x276>
    29c0:	ae c0       	rjmp	.+348    	; 0x2b1e <vfprintf+0x3b6>
    29c2:	80 37       	cpi	r24, 0x70	; 112
    29c4:	19 f0       	breq	.+6      	; 0x29cc <vfprintf+0x264>
    29c6:	88 37       	cpi	r24, 0x78	; 120
    29c8:	21 f0       	breq	.+8      	; 0x29d2 <vfprintf+0x26a>
    29ca:	a9 c0       	rjmp	.+338    	; 0x2b1e <vfprintf+0x3b6>
    29cc:	e9 2f       	mov	r30, r25
    29ce:	e0 61       	ori	r30, 0x10	; 16
    29d0:	be 2e       	mov	r11, r30
    29d2:	b4 fe       	sbrs	r11, 4
    29d4:	0d c0       	rjmp	.+26     	; 0x29f0 <vfprintf+0x288>
    29d6:	fb 2d       	mov	r31, r11
    29d8:	f4 60       	ori	r31, 0x04	; 4
    29da:	bf 2e       	mov	r11, r31
    29dc:	09 c0       	rjmp	.+18     	; 0x29f0 <vfprintf+0x288>
    29de:	34 fe       	sbrs	r3, 4
    29e0:	0a c0       	rjmp	.+20     	; 0x29f6 <vfprintf+0x28e>
    29e2:	29 2f       	mov	r18, r25
    29e4:	26 60       	ori	r18, 0x06	; 6
    29e6:	b2 2e       	mov	r11, r18
    29e8:	06 c0       	rjmp	.+12     	; 0x29f6 <vfprintf+0x28e>
    29ea:	28 e0       	ldi	r18, 0x08	; 8
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	05 c0       	rjmp	.+10     	; 0x29fa <vfprintf+0x292>
    29f0:	20 e1       	ldi	r18, 0x10	; 16
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	02 c0       	rjmp	.+4      	; 0x29fa <vfprintf+0x292>
    29f6:	20 e1       	ldi	r18, 0x10	; 16
    29f8:	32 e0       	ldi	r19, 0x02	; 2
    29fa:	f8 01       	movw	r30, r16
    29fc:	b7 fe       	sbrs	r11, 7
    29fe:	07 c0       	rjmp	.+14     	; 0x2a0e <vfprintf+0x2a6>
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	0c 5f       	subi	r16, 0xFC	; 252
    2a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0c:	06 c0       	rjmp	.+12     	; 0x2a1a <vfprintf+0x2b2>
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 5f       	subi	r16, 0xFE	; 254
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	a3 01       	movw	r20, r6
    2a1c:	ee d0       	rcall	.+476    	; 0x2bfa <__ultoa_invert>
    2a1e:	88 2e       	mov	r8, r24
    2a20:	86 18       	sub	r8, r6
    2a22:	fb 2d       	mov	r31, r11
    2a24:	ff 77       	andi	r31, 0x7F	; 127
    2a26:	3f 2e       	mov	r3, r31
    2a28:	36 fe       	sbrs	r3, 6
    2a2a:	0d c0       	rjmp	.+26     	; 0x2a46 <vfprintf+0x2de>
    2a2c:	23 2d       	mov	r18, r3
    2a2e:	2e 7f       	andi	r18, 0xFE	; 254
    2a30:	a2 2e       	mov	r10, r18
    2a32:	89 14       	cp	r8, r9
    2a34:	58 f4       	brcc	.+22     	; 0x2a4c <vfprintf+0x2e4>
    2a36:	34 fe       	sbrs	r3, 4
    2a38:	0b c0       	rjmp	.+22     	; 0x2a50 <vfprintf+0x2e8>
    2a3a:	32 fc       	sbrc	r3, 2
    2a3c:	09 c0       	rjmp	.+18     	; 0x2a50 <vfprintf+0x2e8>
    2a3e:	83 2d       	mov	r24, r3
    2a40:	8e 7e       	andi	r24, 0xEE	; 238
    2a42:	a8 2e       	mov	r10, r24
    2a44:	05 c0       	rjmp	.+10     	; 0x2a50 <vfprintf+0x2e8>
    2a46:	b8 2c       	mov	r11, r8
    2a48:	a3 2c       	mov	r10, r3
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <vfprintf+0x2ea>
    2a4c:	b8 2c       	mov	r11, r8
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <vfprintf+0x2ea>
    2a50:	b9 2c       	mov	r11, r9
    2a52:	a4 fe       	sbrs	r10, 4
    2a54:	0f c0       	rjmp	.+30     	; 0x2a74 <vfprintf+0x30c>
    2a56:	fe 01       	movw	r30, r28
    2a58:	e8 0d       	add	r30, r8
    2a5a:	f1 1d       	adc	r31, r1
    2a5c:	80 81       	ld	r24, Z
    2a5e:	80 33       	cpi	r24, 0x30	; 48
    2a60:	21 f4       	brne	.+8      	; 0x2a6a <vfprintf+0x302>
    2a62:	9a 2d       	mov	r25, r10
    2a64:	99 7e       	andi	r25, 0xE9	; 233
    2a66:	a9 2e       	mov	r10, r25
    2a68:	09 c0       	rjmp	.+18     	; 0x2a7c <vfprintf+0x314>
    2a6a:	a2 fe       	sbrs	r10, 2
    2a6c:	06 c0       	rjmp	.+12     	; 0x2a7a <vfprintf+0x312>
    2a6e:	b3 94       	inc	r11
    2a70:	b3 94       	inc	r11
    2a72:	04 c0       	rjmp	.+8      	; 0x2a7c <vfprintf+0x314>
    2a74:	8a 2d       	mov	r24, r10
    2a76:	86 78       	andi	r24, 0x86	; 134
    2a78:	09 f0       	breq	.+2      	; 0x2a7c <vfprintf+0x314>
    2a7a:	b3 94       	inc	r11
    2a7c:	a3 fc       	sbrc	r10, 3
    2a7e:	10 c0       	rjmp	.+32     	; 0x2aa0 <vfprintf+0x338>
    2a80:	a0 fe       	sbrs	r10, 0
    2a82:	06 c0       	rjmp	.+12     	; 0x2a90 <vfprintf+0x328>
    2a84:	b2 14       	cp	r11, r2
    2a86:	80 f4       	brcc	.+32     	; 0x2aa8 <vfprintf+0x340>
    2a88:	28 0c       	add	r2, r8
    2a8a:	92 2c       	mov	r9, r2
    2a8c:	9b 18       	sub	r9, r11
    2a8e:	0d c0       	rjmp	.+26     	; 0x2aaa <vfprintf+0x342>
    2a90:	b2 14       	cp	r11, r2
    2a92:	58 f4       	brcc	.+22     	; 0x2aaa <vfprintf+0x342>
    2a94:	b6 01       	movw	r22, r12
    2a96:	80 e2       	ldi	r24, 0x20	; 32
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	73 d0       	rcall	.+230    	; 0x2b82 <fputc>
    2a9c:	b3 94       	inc	r11
    2a9e:	f8 cf       	rjmp	.-16     	; 0x2a90 <vfprintf+0x328>
    2aa0:	b2 14       	cp	r11, r2
    2aa2:	18 f4       	brcc	.+6      	; 0x2aaa <vfprintf+0x342>
    2aa4:	2b 18       	sub	r2, r11
    2aa6:	02 c0       	rjmp	.+4      	; 0x2aac <vfprintf+0x344>
    2aa8:	98 2c       	mov	r9, r8
    2aaa:	21 2c       	mov	r2, r1
    2aac:	a4 fe       	sbrs	r10, 4
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <vfprintf+0x366>
    2ab0:	b6 01       	movw	r22, r12
    2ab2:	80 e3       	ldi	r24, 0x30	; 48
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	65 d0       	rcall	.+202    	; 0x2b82 <fputc>
    2ab8:	a2 fe       	sbrs	r10, 2
    2aba:	16 c0       	rjmp	.+44     	; 0x2ae8 <vfprintf+0x380>
    2abc:	a1 fc       	sbrc	r10, 1
    2abe:	03 c0       	rjmp	.+6      	; 0x2ac6 <vfprintf+0x35e>
    2ac0:	88 e7       	ldi	r24, 0x78	; 120
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	02 c0       	rjmp	.+4      	; 0x2aca <vfprintf+0x362>
    2ac6:	88 e5       	ldi	r24, 0x58	; 88
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	b6 01       	movw	r22, r12
    2acc:	0c c0       	rjmp	.+24     	; 0x2ae6 <vfprintf+0x37e>
    2ace:	8a 2d       	mov	r24, r10
    2ad0:	86 78       	andi	r24, 0x86	; 134
    2ad2:	51 f0       	breq	.+20     	; 0x2ae8 <vfprintf+0x380>
    2ad4:	a1 fe       	sbrs	r10, 1
    2ad6:	02 c0       	rjmp	.+4      	; 0x2adc <vfprintf+0x374>
    2ad8:	8b e2       	ldi	r24, 0x2B	; 43
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <vfprintf+0x376>
    2adc:	80 e2       	ldi	r24, 0x20	; 32
    2ade:	a7 fc       	sbrc	r10, 7
    2ae0:	8d e2       	ldi	r24, 0x2D	; 45
    2ae2:	b6 01       	movw	r22, r12
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	4d d0       	rcall	.+154    	; 0x2b82 <fputc>
    2ae8:	89 14       	cp	r8, r9
    2aea:	30 f4       	brcc	.+12     	; 0x2af8 <vfprintf+0x390>
    2aec:	b6 01       	movw	r22, r12
    2aee:	80 e3       	ldi	r24, 0x30	; 48
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	47 d0       	rcall	.+142    	; 0x2b82 <fputc>
    2af4:	9a 94       	dec	r9
    2af6:	f8 cf       	rjmp	.-16     	; 0x2ae8 <vfprintf+0x380>
    2af8:	8a 94       	dec	r8
    2afa:	f3 01       	movw	r30, r6
    2afc:	e8 0d       	add	r30, r8
    2afe:	f1 1d       	adc	r31, r1
    2b00:	80 81       	ld	r24, Z
    2b02:	b6 01       	movw	r22, r12
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	3d d0       	rcall	.+122    	; 0x2b82 <fputc>
    2b08:	81 10       	cpse	r8, r1
    2b0a:	f6 cf       	rjmp	.-20     	; 0x2af8 <vfprintf+0x390>
    2b0c:	22 20       	and	r2, r2
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <vfprintf+0x3aa>
    2b10:	4e ce       	rjmp	.-868    	; 0x27ae <vfprintf+0x46>
    2b12:	b6 01       	movw	r22, r12
    2b14:	80 e2       	ldi	r24, 0x20	; 32
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	34 d0       	rcall	.+104    	; 0x2b82 <fputc>
    2b1a:	2a 94       	dec	r2
    2b1c:	f7 cf       	rjmp	.-18     	; 0x2b0c <vfprintf+0x3a4>
    2b1e:	f6 01       	movw	r30, r12
    2b20:	86 81       	ldd	r24, Z+6	; 0x06
    2b22:	97 81       	ldd	r25, Z+7	; 0x07
    2b24:	02 c0       	rjmp	.+4      	; 0x2b2a <vfprintf+0x3c2>
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	9f ef       	ldi	r25, 0xFF	; 255
    2b2a:	2b 96       	adiw	r28, 0x0b	; 11
    2b2c:	cd bf       	out	0x3d, r28	; 61
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	df 90       	pop	r13
    2b3e:	cf 90       	pop	r12
    2b40:	bf 90       	pop	r11
    2b42:	af 90       	pop	r10
    2b44:	9f 90       	pop	r9
    2b46:	8f 90       	pop	r8
    2b48:	7f 90       	pop	r7
    2b4a:	6f 90       	pop	r6
    2b4c:	5f 90       	pop	r5
    2b4e:	4f 90       	pop	r4
    2b50:	3f 90       	pop	r3
    2b52:	2f 90       	pop	r2
    2b54:	08 95       	ret

00002b56 <strnlen_P>:
    2b56:	fc 01       	movw	r30, r24
    2b58:	05 90       	lpm	r0, Z+
    2b5a:	61 50       	subi	r22, 0x01	; 1
    2b5c:	70 40       	sbci	r23, 0x00	; 0
    2b5e:	01 10       	cpse	r0, r1
    2b60:	d8 f7       	brcc	.-10     	; 0x2b58 <strnlen_P+0x2>
    2b62:	80 95       	com	r24
    2b64:	90 95       	com	r25
    2b66:	8e 0f       	add	r24, r30
    2b68:	9f 1f       	adc	r25, r31
    2b6a:	08 95       	ret

00002b6c <strnlen>:
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	61 50       	subi	r22, 0x01	; 1
    2b70:	70 40       	sbci	r23, 0x00	; 0
    2b72:	01 90       	ld	r0, Z+
    2b74:	01 10       	cpse	r0, r1
    2b76:	d8 f7       	brcc	.-10     	; 0x2b6e <strnlen+0x2>
    2b78:	80 95       	com	r24
    2b7a:	90 95       	com	r25
    2b7c:	8e 0f       	add	r24, r30
    2b7e:	9f 1f       	adc	r25, r31
    2b80:	08 95       	ret

00002b82 <fputc>:
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	fb 01       	movw	r30, r22
    2b8c:	23 81       	ldd	r18, Z+3	; 0x03
    2b8e:	21 fd       	sbrc	r18, 1
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <fputc+0x16>
    2b92:	8f ef       	ldi	r24, 0xFF	; 255
    2b94:	9f ef       	ldi	r25, 0xFF	; 255
    2b96:	2c c0       	rjmp	.+88     	; 0x2bf0 <fputc+0x6e>
    2b98:	22 ff       	sbrs	r18, 2
    2b9a:	16 c0       	rjmp	.+44     	; 0x2bc8 <fputc+0x46>
    2b9c:	46 81       	ldd	r20, Z+6	; 0x06
    2b9e:	57 81       	ldd	r21, Z+7	; 0x07
    2ba0:	24 81       	ldd	r18, Z+4	; 0x04
    2ba2:	35 81       	ldd	r19, Z+5	; 0x05
    2ba4:	42 17       	cp	r20, r18
    2ba6:	53 07       	cpc	r21, r19
    2ba8:	44 f4       	brge	.+16     	; 0x2bba <fputc+0x38>
    2baa:	a0 81       	ld	r26, Z
    2bac:	b1 81       	ldd	r27, Z+1	; 0x01
    2bae:	9d 01       	movw	r18, r26
    2bb0:	2f 5f       	subi	r18, 0xFF	; 255
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	20 83       	st	Z, r18
    2bb6:	31 83       	std	Z+1, r19	; 0x01
    2bb8:	8c 93       	st	X, r24
    2bba:	26 81       	ldd	r18, Z+6	; 0x06
    2bbc:	37 81       	ldd	r19, Z+7	; 0x07
    2bbe:	2f 5f       	subi	r18, 0xFF	; 255
    2bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2bc2:	26 83       	std	Z+6, r18	; 0x06
    2bc4:	37 83       	std	Z+7, r19	; 0x07
    2bc6:	14 c0       	rjmp	.+40     	; 0x2bf0 <fputc+0x6e>
    2bc8:	8b 01       	movw	r16, r22
    2bca:	ec 01       	movw	r28, r24
    2bcc:	fb 01       	movw	r30, r22
    2bce:	00 84       	ldd	r0, Z+8	; 0x08
    2bd0:	f1 85       	ldd	r31, Z+9	; 0x09
    2bd2:	e0 2d       	mov	r30, r0
    2bd4:	19 95       	eicall
    2bd6:	89 2b       	or	r24, r25
    2bd8:	e1 f6       	brne	.-72     	; 0x2b92 <fputc+0x10>
    2bda:	d8 01       	movw	r26, r16
    2bdc:	16 96       	adiw	r26, 0x06	; 6
    2bde:	8d 91       	ld	r24, X+
    2be0:	9c 91       	ld	r25, X
    2be2:	17 97       	sbiw	r26, 0x07	; 7
    2be4:	01 96       	adiw	r24, 0x01	; 1
    2be6:	16 96       	adiw	r26, 0x06	; 6
    2be8:	8d 93       	st	X+, r24
    2bea:	9c 93       	st	X, r25
    2bec:	17 97       	sbiw	r26, 0x07	; 7
    2bee:	ce 01       	movw	r24, r28
    2bf0:	df 91       	pop	r29
    2bf2:	cf 91       	pop	r28
    2bf4:	1f 91       	pop	r17
    2bf6:	0f 91       	pop	r16
    2bf8:	08 95       	ret

00002bfa <__ultoa_invert>:
    2bfa:	fa 01       	movw	r30, r20
    2bfc:	aa 27       	eor	r26, r26
    2bfe:	28 30       	cpi	r18, 0x08	; 8
    2c00:	51 f1       	breq	.+84     	; 0x2c56 <__ultoa_invert+0x5c>
    2c02:	20 31       	cpi	r18, 0x10	; 16
    2c04:	81 f1       	breq	.+96     	; 0x2c66 <__ultoa_invert+0x6c>
    2c06:	e8 94       	clt
    2c08:	6f 93       	push	r22
    2c0a:	6e 7f       	andi	r22, 0xFE	; 254
    2c0c:	6e 5f       	subi	r22, 0xFE	; 254
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	8f 4f       	sbci	r24, 0xFF	; 255
    2c12:	9f 4f       	sbci	r25, 0xFF	; 255
    2c14:	af 4f       	sbci	r26, 0xFF	; 255
    2c16:	b1 e0       	ldi	r27, 0x01	; 1
    2c18:	3e d0       	rcall	.+124    	; 0x2c96 <__ultoa_invert+0x9c>
    2c1a:	b4 e0       	ldi	r27, 0x04	; 4
    2c1c:	3c d0       	rcall	.+120    	; 0x2c96 <__ultoa_invert+0x9c>
    2c1e:	67 0f       	add	r22, r23
    2c20:	78 1f       	adc	r23, r24
    2c22:	89 1f       	adc	r24, r25
    2c24:	9a 1f       	adc	r25, r26
    2c26:	a1 1d       	adc	r26, r1
    2c28:	68 0f       	add	r22, r24
    2c2a:	79 1f       	adc	r23, r25
    2c2c:	8a 1f       	adc	r24, r26
    2c2e:	91 1d       	adc	r25, r1
    2c30:	a1 1d       	adc	r26, r1
    2c32:	6a 0f       	add	r22, r26
    2c34:	71 1d       	adc	r23, r1
    2c36:	81 1d       	adc	r24, r1
    2c38:	91 1d       	adc	r25, r1
    2c3a:	a1 1d       	adc	r26, r1
    2c3c:	20 d0       	rcall	.+64     	; 0x2c7e <__ultoa_invert+0x84>
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <__ultoa_invert+0x48>
    2c40:	68 94       	set
    2c42:	3f 91       	pop	r19
    2c44:	2a e0       	ldi	r18, 0x0A	; 10
    2c46:	26 9f       	mul	r18, r22
    2c48:	11 24       	eor	r1, r1
    2c4a:	30 19       	sub	r19, r0
    2c4c:	30 5d       	subi	r19, 0xD0	; 208
    2c4e:	31 93       	st	Z+, r19
    2c50:	de f6       	brtc	.-74     	; 0x2c08 <__ultoa_invert+0xe>
    2c52:	cf 01       	movw	r24, r30
    2c54:	08 95       	ret
    2c56:	46 2f       	mov	r20, r22
    2c58:	47 70       	andi	r20, 0x07	; 7
    2c5a:	40 5d       	subi	r20, 0xD0	; 208
    2c5c:	41 93       	st	Z+, r20
    2c5e:	b3 e0       	ldi	r27, 0x03	; 3
    2c60:	0f d0       	rcall	.+30     	; 0x2c80 <__ultoa_invert+0x86>
    2c62:	c9 f7       	brne	.-14     	; 0x2c56 <__ultoa_invert+0x5c>
    2c64:	f6 cf       	rjmp	.-20     	; 0x2c52 <__ultoa_invert+0x58>
    2c66:	46 2f       	mov	r20, r22
    2c68:	4f 70       	andi	r20, 0x0F	; 15
    2c6a:	40 5d       	subi	r20, 0xD0	; 208
    2c6c:	4a 33       	cpi	r20, 0x3A	; 58
    2c6e:	18 f0       	brcs	.+6      	; 0x2c76 <__ultoa_invert+0x7c>
    2c70:	49 5d       	subi	r20, 0xD9	; 217
    2c72:	31 fd       	sbrc	r19, 1
    2c74:	40 52       	subi	r20, 0x20	; 32
    2c76:	41 93       	st	Z+, r20
    2c78:	02 d0       	rcall	.+4      	; 0x2c7e <__ultoa_invert+0x84>
    2c7a:	a9 f7       	brne	.-22     	; 0x2c66 <__ultoa_invert+0x6c>
    2c7c:	ea cf       	rjmp	.-44     	; 0x2c52 <__ultoa_invert+0x58>
    2c7e:	b4 e0       	ldi	r27, 0x04	; 4
    2c80:	a6 95       	lsr	r26
    2c82:	97 95       	ror	r25
    2c84:	87 95       	ror	r24
    2c86:	77 95       	ror	r23
    2c88:	67 95       	ror	r22
    2c8a:	ba 95       	dec	r27
    2c8c:	c9 f7       	brne	.-14     	; 0x2c80 <__ultoa_invert+0x86>
    2c8e:	00 97       	sbiw	r24, 0x00	; 0
    2c90:	61 05       	cpc	r22, r1
    2c92:	71 05       	cpc	r23, r1
    2c94:	08 95       	ret
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	0a 2e       	mov	r0, r26
    2c9c:	06 94       	lsr	r0
    2c9e:	57 95       	ror	r21
    2ca0:	47 95       	ror	r20
    2ca2:	37 95       	ror	r19
    2ca4:	27 95       	ror	r18
    2ca6:	ba 95       	dec	r27
    2ca8:	c9 f7       	brne	.-14     	; 0x2c9c <__ultoa_invert+0xa2>
    2caa:	62 0f       	add	r22, r18
    2cac:	73 1f       	adc	r23, r19
    2cae:	84 1f       	adc	r24, r20
    2cb0:	95 1f       	adc	r25, r21
    2cb2:	a0 1d       	adc	r26, r0
    2cb4:	08 95       	ret

00002cb6 <_exit>:
    2cb6:	f8 94       	cli

00002cb8 <__stop_program>:
    2cb8:	ff cf       	rjmp	.-2      	; 0x2cb8 <__stop_program>
